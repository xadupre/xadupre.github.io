.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_load_and_predict.py>`     to download the full example code
    .. rst-class:: sphx-glr-example-title

    .. _sphx_glr_auto_examples_plot_load_and_predict.py:


.. _l-example-simple-usage:

Load and predict with ONNX Runtime and a very simple model
==========================================================

This example demonstrates how to load a model and compute
the output for an input vector. It also shows how to
retrieve the definition of its inputs and outputs.


.. code-block:: default


    import onnxruntime as rt
    import numpy
    from onnxruntime.datasets import get_example








Let's load a very simple model.
The model is available on github `onnx...test_sigmoid <https://github.com/onnx/onnx/tree/master/onnx/backend/test/data/node/test_sigmoid>`_.


.. code-block:: default


    example1 = get_example("sigmoid.onnx")
    sess = rt.InferenceSession(example1)








Let's see the input name and shape.


.. code-block:: default


    input_name = sess.get_inputs()[0].name
    print("input name", input_name)
    input_shape = sess.get_inputs()[0].shape
    print("input shape", input_shape)
    input_type = sess.get_inputs()[0].type
    print("input type", input_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    input name x
    input shape [3, 4, 5]
    input type tensor(float)




Let's see the output name and shape.


.. code-block:: default


    output_name = sess.get_outputs()[0].name
    print("output name", output_name)  
    output_shape = sess.get_outputs()[0].shape
    print("output shape", output_shape)
    output_type = sess.get_outputs()[0].type
    print("output type", output_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    output name y
    output shape [3, 4, 5]
    output type tensor(float)




Let's compute its outputs (or predictions if it is a machine learned model).


.. code-block:: default


    import numpy.random
    x = numpy.random.random((3,4,5))
    x = x.astype(numpy.float32)
    res = sess.run([output_name], {input_name: x})
    print(res)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([[[0.6973413 , 0.56554854, 0.57124555, 0.55338407, 0.7270968 ],
            [0.6125606 , 0.667267  , 0.71210325, 0.60089207, 0.64812523],
            [0.55352414, 0.7036437 , 0.70648825, 0.6978047 , 0.6929392 ],
            [0.7073603 , 0.6007343 , 0.5510685 , 0.6477096 , 0.71534485]],

           [[0.6343934 , 0.63989794, 0.5964886 , 0.65270627, 0.5650308 ],
            [0.5311023 , 0.7210944 , 0.7186448 , 0.51135963, 0.513806  ],
            [0.5553887 , 0.6271417 , 0.6354401 , 0.62655187, 0.63302326],
            [0.71707606, 0.61966354, 0.5117846 , 0.5476554 , 0.70755386]],

           [[0.70140666, 0.59375346, 0.5884077 , 0.65546745, 0.6384827 ],
            [0.51510346, 0.7194251 , 0.58381754, 0.72201353, 0.53023875],
            [0.5949844 , 0.62495905, 0.54461664, 0.60203683, 0.56151325],
            [0.6841529 , 0.516216  , 0.67164195, 0.6703805 , 0.6524756 ]]],
          dtype=float32)]





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.014 seconds)


.. _sphx_glr_download_auto_examples_plot_load_and_predict.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_load_and_predict.py <plot_load_and_predict.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_load_and_predict.ipynb <plot_load_and_predict.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
