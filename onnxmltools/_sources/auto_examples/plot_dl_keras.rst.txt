.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_dl_keras.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_dl_keras.py:



.. _l-example-backend-api-tensorflow:

ONNX Runtime for Keras
======================

The following demonstrates how to compute the predictions
of a pretrained deep learning model obtained from 
`keras <https://keras.io/>`_
with *onnxruntime*. The conversion requires
`keras <https://keras.io/>`_,
`tensorflow <https://www.tensorflow.org/>`_,
`onnxmltools <https://pypi.org/project/onnxmltools/>`_
but then only *onnxruntime* is required
to compute the predictions.



.. code-block:: python

    import os
    if not os.path.exists('dense121.onnx'):
        from keras.applications.densenet import DenseNet121
        model = DenseNet121(include_top=True, weights='imagenet')

        from onnxmltools import convert_keras
        onx = convert_keras(model, 'dense121.onnx')
    
        from onnxmltools.utils import save_model
        save_model(onx, "dense121.onnx")




.. code-block:: pytb

    Traceback (most recent call last):
      File "C:\xavierdupre\microsoft_github\onnxmltools\docs\examples\plot_dl_keras.py", line 27, in <module>
        onx = convert_keras(model, 'dense121.onnx')
      File "C:\xavierdupre\microsoft_github\onnxmltools\onnxmltools\convert\main.py", line 32, in convert_keras
        return convert(model, name, doc_string, target_opset, channel_first_inputs)
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\main.py", line 94, in convert_keras
        debug_mode, custom_op_conversions)
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\main.py", line 63, in _convert_tf
        parse_graph(topology, tf_graph, keras_op_table, target_opset, output_names)
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\parser.py", line 450, in parse_graph
        return _parse_graph_scope(graph, keras_op_table, topo, top_level, target_opset, output_names)
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\parser.py", line 439, in _parse_graph_scope
        _infer_graph_shape(topology, top_scope, varset)
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\parser.py", line 268, in _infer_graph_shape
        _finalize_tf2onnx_op(topology, oop, varset)
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\parser.py", line 247, in _finalize_tf2onnx_op
        g = tf2onnx_wrap(topo, subgraph.get_operations(), outputs, varset.target_opset)
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\wrapper.py", line 30, in tf2onnx_wrap
        raise e
      File "C:\xavierdupre\microsoft_github\keras-onnx\keras2onnx\wrapper.py", line 16, in tf2onnx_wrap
        onnx_nodes, op_cnt, attr_cnt, output_shapes, dtypes = tflist_to_onnx(node_list, {})
    NameError: name 'tflist_to_onnx' is not defined




Let's load an image (source: wikipedia).



.. code-block:: python


    from keras.preprocessing.image import array_to_img, img_to_array, load_img
    img = load_img('Sannosawa1.jpg')
    ximg = img_to_array(img)

    import matplotlib.pyplot as plt
    plt.imshow(ximg / 255)
    plt.axis('off')


Let's load the model with onnxruntime.



.. code-block:: python

    import onnxruntime as rt

    sess = rt.InferenceSession('dense121.onnx')

    print("The model expects input shape:", sess.get_inputs()[0].shape)
    print("image shape:", ximg.shape)


Let's resize the image.



.. code-block:: python

    from skimage.transform import resize
    import numpy

    ximg224 = resize(ximg / 255, (224, 224, 3), anti_aliasing=True)
    ximg = ximg224[numpy.newaxis, :, :, :]
    ximg = ximg.astype(numpy.float32)

    print("new shape:", ximg.shape)


Let's compute the output.



.. code-block:: python


    input_name = sess.get_inputs()[0].name
    res = sess.run(None, {input_name: ximg})
    prob = res[0]
    print(prob.ravel()[:10])  # Too big to be displayed.



Let's get more comprehensive results.



.. code-block:: python


    from keras.applications.densenet import decode_predictions
    decoded = decode_predictions(prob)

    import pandas
    df = pandas.DataFrame(decoded[0], columns=["class_id", "name", "P"])
    print(df)



**Total running time of the script:** ( 0 minutes  0.000 seconds)


.. _sphx_glr_download_auto_examples_plot_dl_keras.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_dl_keras.py <plot_dl_keras.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_dl_keras.ipynb <plot_dl_keras.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
