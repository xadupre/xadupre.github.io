
.. _l-onnx-doccom-microsoft-AdamWOptimizer:

==============================
com.microsoft - AdamWOptimizer
==============================

.. contents::
    :local:


.. _l-onnx-opcom-microsoft-adamwoptimizer-1:

AdamWOptimizer - 1
==================

**Version**

* **name**: `AdamWOptimizer (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.AdamWOptimizer>`_
* **domain**: **com.microsoft**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain com.microsoft**.

**Summary**

**Attributes**

* **adam_mode - INT** :   Modes for applying bias correction and weight decay (default 0) 0 :
  Weight decay is applied before weight is updated.  Computation
  aligned with Torch AdamW. In this mode,   correct_bias should be 1
  to keep aligned with PyTorch.1 : Weight decay is applied after
  weight is updated.    Computation is aligned with Huggingface AdamW.
* **alpha - FLOAT** :   Coefficient of previously accumulated gradient in running average.
* **beta - FLOAT** :   Coefficient of previously accumulated squared-gradient in running
  average.
* **correct_bias - INT** :   Whether or not to correct bias, enabled by default.
* **epsilon - FLOAT** :   Small scalar to avoid dividing by zero.
* **weight_decay - FLOAT** :   weight decay coefficient.

**Inputs**

Between 6 and 7 inputs.

* **lr** (heterogeneous) - **T1**:

* **step** (heterogeneous) - **T2**:

* **weights** (heterogeneous) - **S_WEIGHT**:

* **gradients** (heterogeneous) - **S_GRAD**:

* **momentums_1** (heterogeneous) - **S_MOMENT**:

* **momentums_2** (heterogeneous) - **S_MOMENT**:

* **update_signal** (optional, heterogeneous) - **T_BOOL**:

**Outputs**

Between 1 and 4 outputs.

* **updated_flag** (heterogeneous) - **T2**:

* **updated_weights** (optional, heterogeneous) - **S_WEIGHT**:

* **updated_momentums_1** (optional, heterogeneous) - **S_MOMENT**:

* **updated_momentums_2** (optional, heterogeneous) - **S_MOMENT**:

**Type Constraints**

* **T1** in (
  tensor(float)
  ):
  Constrain learning rate to float
* **T2** in (
  tensor(int64)
  ):
  Constrain step count to 64-bit integer
* **S_WEIGHT** in (
  seq(tensor(double)),
  seq(tensor(float)),
  seq(tensor(float16))
  ):
  Constrain weights' types.
* **S_GRAD** in (
  seq(tensor(double)),
  seq(tensor(float)),
  seq(tensor(float16))
  ):
  Constrain gradients' types.
* **S_MOMENT** in (
  seq(tensor(double)),
  seq(tensor(float)),
  seq(tensor(float16))
  ):
  Constrain momentums' types.
* **T_BOOL** in (
  tensor(bool)
  ):
  Constrain types to boolean tensors.

**Examples**
