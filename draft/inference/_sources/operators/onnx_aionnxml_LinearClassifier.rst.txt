
.. _l-onnx-docai-onnx-ml-LinearClassifier:

=============================
ai.onnx.ml - LinearClassifier
=============================


.. _l-onnx-opai-onnx-ml-linearclassifier-1:

LinearClassifier - 1
====================

**Version**

* **name**: `LinearClassifier (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators-ml.md#ai.onnx.ml.LinearClassifier>`_
* **domain**: **ai.onnx.ml**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain ai.onnx.ml**.

**Summary**

**Attributes**

* **classlabels_ints - INTS** :   Class labels when using integer labels. One and only one
  'classlabels' attribute must be defined.
* **classlabels_strings - STRINGS** :   Class labels when using string labels. One and only one
  'classlabels' attribute must be defined.
* **coefficients - FLOATS** (required) :   A collection of weights of the model(s).
* **intercepts - FLOATS** :   A collection of intercepts.
* **multi_class - INT** :   Indicates whether to do OvR or multinomial (0=OvR is the default).
* **post_transform - STRING** :   Indicates the transform to apply to the scores vector.<br>One of
  'NONE,' 'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'

**Inputs**

* **X** (heterogeneous) - **T1**:

**Outputs**

* **Y** (heterogeneous) - **T2**:

* **Z** (heterogeneous) - **tensor(float)**:

**Type Constraints**

* **T1** in (
  tensor(double),
  tensor(float),
  tensor(int32),
  tensor(int64)
  ):
  The input must be a tensor of a numeric type, and of shape [N,C] or
  [C]. In the latter case, it will be treated as [1,C]
* **T2** in (
  tensor(int64),
  tensor(string)
  ):
  The output will be a tensor of strings or integers.

**Examples**
