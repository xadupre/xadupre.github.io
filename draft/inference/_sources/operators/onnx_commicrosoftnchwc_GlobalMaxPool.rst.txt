
.. _l-onnx-doccom-microsoft-nchwc-GlobalMaxPool:

===================================
com.microsoft.nchwc - GlobalMaxPool
===================================


.. _l-onnx-opcom-microsoft-nchwc-globalmaxpool-1:

GlobalMaxPool - 1
=================

**Version**

* **name**: `GlobalMaxPool (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.nchwc.GlobalMaxPool>`_
* **domain**: **com.microsoft.nchwc**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain com.microsoft.nchwc**.

**Summary**

**Inputs**

* **X** (heterogeneous) - **T**:

**Outputs**

* **Y** (heterogeneous) - **T**:

**Type Constraints**

* **T** in (
  tensor(float)
  ):
  Constrain input and output types to float tensors

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "GlobalMaxPool",
        inputs=["x"],
        outputs=["y"],
    )
    x = np.random.randn(1, 3, 5, 5).astype(np.float32)
    y = np.max(x, axis=tuple(range(2, np.ndim(x))), keepdims=True)
    expect(node, inputs=[x], outputs=[y], name="test_globalmaxpool")

**_globalmaxpool_precomputed**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "GlobalMaxPool",
        inputs=["x"],
        outputs=["y"],
    )
    x = np.array(
        [
            [
                [
                    [1, 2, 3],
                    [4, 5, 6],
                    [7, 8, 9],
                ]
            ]
        ]
    ).astype(np.float32)
    y = np.array([[[[9]]]]).astype(np.float32)
    expect(node, inputs=[x], outputs=[y], name="test_globalmaxpool_precomputed")
