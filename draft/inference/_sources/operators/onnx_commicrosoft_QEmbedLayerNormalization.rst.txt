
.. _l-onnx-doccom-microsoft-QEmbedLayerNormalization:

========================================
com.microsoft - QEmbedLayerNormalization
========================================

.. contents::
    :local:


.. _l-onnx-opcom-microsoft-qembedlayernormalization-1:

QEmbedLayerNormalization - 1
============================

**Version**

* **name**: `QEmbedLayerNormalization (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.QEmbedLayerNormalization>`_
* **domain**: **com.microsoft**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.EXPERIMENTAL
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain com.microsoft**.

**Summary**

**Attributes**

* **epsilon - FLOAT** :   The epsilon value to use to avoid division by zero.

**Inputs**

* **input_ids** (heterogeneous) - **T1**:

* **segment_ids** (optional, heterogeneous) - **T1**:

* **word_embedding_quant** (heterogeneous) - **T2**:

* **position_embedding_quant** (heterogeneous) - **T2**:

* **segment_embedding** (optional, heterogeneous) - **T2**:

* **gamma_quant** (heterogeneous) - **T2**:

* **beta_quant** (heterogeneous) - **T2**:

* **mask** (optional, heterogeneous) - **T1**:

* **word_embedding_scale** (heterogeneous) - **T**:

* **position_embedding_scale** (heterogeneous) - **T**:

* **segment_embedding_scale** (optional, heterogeneous) - **T**:

* **gamma_scale** (heterogeneous) - **T**:

* **beta_scale** (heterogeneous) - **T**:

* **word_embedding_zero_point** (heterogeneous) - **T2**:

* **position_embedding_zero_point** (heterogeneous) - **T2**:

* **segment_embedding_zero_point** (optional, heterogeneous) - **T2**:

* **gamma_zero_point** (heterogeneous) - **T2**:

* **beta_zero_point** (heterogeneous) - **T2**:

**Outputs**

* **layernorm_out** (heterogeneous) - **T**:

* **mask_index_out** (heterogeneous) - **T1**:

**Type Constraints**

* **T1** in (
  tensor(int32)
  ):
  Constrain mask index to integer types
* **T2** in (
  tensor(int8),
  tensor(uint8)
  ):
  Constrain input and output types to int8 tensors.
* **T** in (
  tensor(float)
  ):
  Constrain input and output types to float32 tensors.

**Examples**
