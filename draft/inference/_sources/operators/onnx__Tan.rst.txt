
.. _l-onnx-doc-Tan:

===
Tan
===

.. contents::
    :local:


.. _l-onnx-op-tan-7:

Tan - 7
=======

**Version**

* **name**: `Tan (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Tan>`_
* **domain**: **main**
* **since_version**: **7**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 7**.

**Summary**

**Inputs**

* **input** (heterogeneous) - **T**:

**Outputs**

* **output** (heterogeneous) - **T**:

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Tan",
        inputs=["x"],
        outputs=["y"],
    )

    x = np.array([-1, 0, 1]).astype(np.float32)
    y = np.tan(x)
    expect(node, inputs=[x], outputs=[y], name="test_tan_example")

    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.tan(x)
    expect(node, inputs=[x], outputs=[y], name="test_tan")
