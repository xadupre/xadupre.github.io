
.. _l-onnx-doccom-microsoft-QLinearAveragePool:

==================================
com.microsoft - QLinearAveragePool
==================================

.. contents::
    :local:


.. _l-onnx-opcom-microsoft-qlinearaveragepool-1:

QLinearAveragePool - 1
======================

**Version**

* **name**: `QLinearAveragePool (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.QLinearAveragePool>`_
* **domain**: **com.microsoft**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain com.microsoft**.

**Summary**

**Attributes**

* **auto_pad - STRING** :   auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID.
  Where default value is NOTSET, which means explicit padding is used.
  SAME_UPPER or SAME_LOWER mean pad the input so that the output
  spatial size match the input.In case of odd number add the extra
  padding at the end for SAME_UPPER and at the beginning for
  SAME_LOWER. VALID mean no padding.
* **ceil_mode - INT** :   Whether to use ceil or floor (default) to compute the output shape.
* **channels_last - INT** :   Works on NHWC layout or not? Default not.
* **count_include_pad - INT** :   Whether include pad pixels when calculating values for the edges.
  Default is 0, doesn't count include pad.
* **kernel_shape - INTS** (required) :   The size of the kernel along each axis.
* **pads - INTS** :   Padding for the beginning and ending along each spatial axis, it can
  take any value greater than or equal to 0. The value represent the
  number of pixels added to the beginning and end part of the
  corresponding axis. `pads` format should be as follow [x1_begin,
  x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels
  added at the beginning of axis `i` and xi_end, the number of pixels
  added at the end of axis `i`. This attribute cannot be used
  simultaneously with auto_pad attribute. If not present, the padding
  defaults to 0 along start and end of each spatial axis.
* **strides - INTS** :   Stride along each spatial axis. If not present, the stride defaults
  to 1 along each spatial axis.

**Inputs**

Between 4 and 5 inputs.

* **X** (heterogeneous) - **T**:

* **x_scale** (heterogeneous) - **tensor(float)**:

* **x_zero_point** (optional, heterogeneous) - **T**:

* **y_scale** (heterogeneous) - **tensor(float)**:

* **y_zero_point** (optional, heterogeneous) - **T**:

**Outputs**

* **Y** (heterogeneous) - **T**:

**Type Constraints**

* **T** in (
  tensor(int8),
  tensor(uint8)
  ):
  Constrain input and output types to 8 bit tensors.

**Examples**
