
.. _l-onnx-doc-Det:

===
Det
===

.. contents::
    :local:


.. _l-onnx-op-det-11:

Det - 11
========

**Version**

* **name**: `Det (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Det>`_
* **domain**: **main**
* **since_version**: **11**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

**Inputs**

* **X** (heterogeneous) - **T**:

**Outputs**

* **Y** (heterogeneous) - **T**:

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to floating-point tensors.

**Examples**

**_2d**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Det",
        inputs=["x"],
        outputs=["y"],
    )

    x = np.arange(4).reshape(2, 2).astype(np.float32)
    y = np.linalg.det(x)  # expect -2
    expect(node, inputs=[x], outputs=[y], name="test_det_2d")

**_nd**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Det",
        inputs=["x"],
        outputs=["y"],
    )

    x = np.array([[[1, 2], [3, 4]], [[1, 2], [2, 1]], [[1, 3], [3, 1]]]).astype(
        np.float32
    )
    y = np.linalg.det(x)  # expect array([-2., -3., -8.])
    expect(node, inputs=[x], outputs=[y], name="test_det_nd")
