
.. _l-onnx-doccom-microsoft-nchwc-Upsample:

==============================
com.microsoft.nchwc - Upsample
==============================


.. _l-onnx-opcom-microsoft-nchwc-upsample-1:

Upsample - 1
============

**Version**

* **name**: `Upsample (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.nchwc.Upsample>`_
* **domain**: **com.microsoft.nchwc**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain com.microsoft.nchwc**.

**Summary**

**Attributes**

* **coordinate_transformation_mode - STRING** :
* **mode - STRING** :
* **scales - INTS** :

**Inputs**

* **X** (heterogeneous) - **T**:

**Outputs**

* **Y** (heterogeneous) - **T**:

**Type Constraints**

* **T** in (
  tensor(float)
  ):
  Constrain input and output types to float tensors

**Examples**

**_nearest**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Upsample",
        inputs=["X", "scales"],
        outputs=["Y"],
        mode="nearest",
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 3.0], dtype=np.float32)

    output = np.array(
        [
            [
                [
                    [1, 1, 1, 2, 2, 2],
                    [1, 1, 1, 2, 2, 2],
                    [3, 3, 3, 4, 4, 4],
                    [3, 3, 3, 4, 4, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_upsample_nearest",
        opset_imports=[helper.make_opsetid("", 9)],
    )
