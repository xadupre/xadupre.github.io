
.. _l-onnx-docai-onnx-ml-SVMClassifier:

==========================
ai.onnx.ml - SVMClassifier
==========================

.. contents::
    :local:


.. _l-onnx-opai-onnx-ml-svmclassifier-1:

SVMClassifier - 1
=================

**Version**

* **name**: `SVMClassifier (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators-ml.md#ai.onnx.ml.SVMClassifier>`_
* **domain**: **ai.onnx.ml**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain ai.onnx.ml**.

**Summary**

**Attributes**

* **classlabels_ints - INTS** :   Class labels if using integer labels.<br>One and only one of the
  'classlabels_*' attributes must be defined.
* **classlabels_strings - STRINGS** :   Class labels if using string labels.<br>One and only one of the
  'classlabels_*' attributes must be defined.
* **coefficients - FLOATS** :
* **kernel_params - FLOATS** :   List of 3 elements containing gamma, coef0, and degree, in that
  order. Zero if unused for the kernel.
* **kernel_type - STRING** :   The kernel type, one of 'LINEAR,' 'POLY,' 'RBF,' 'SIGMOID'.
* **post_transform - STRING** :   Indicates the transform to apply to the score. <br>One of 'NONE,'
  'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
* **prob_a - FLOATS** :   First set of probability coefficients.
* **prob_b - FLOATS** :   Second set of probability coefficients. This array must be same size
  as prob_a.<br>If these are provided then output Z are probability
  estimates, otherwise they are raw scores.
* **rho - FLOATS** :
* **support_vectors - FLOATS** :
* **vectors_per_class - INTS** :

**Inputs**

* **X** (heterogeneous) - **T1**:

**Outputs**

* **Y** (heterogeneous) - **T2**:

* **Z** (heterogeneous) - **tensor(float)**:

**Type Constraints**

* **T1** in (
  tensor(double),
  tensor(float),
  tensor(int32),
  tensor(int64)
  ):
  The input must be a tensor of a numeric type, either [C] or [N,C].
* **T2** in (
  tensor(int64),
  tensor(string)
  ):
  The output type will be a tensor of strings or integers, depending
  on which of the classlabels_* attributes is used. Its size will
  match the bactch size of the input.

**Examples**
