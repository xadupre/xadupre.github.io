
.. _l-onnx-doccom-microsoft-InvertibleLayerNormalizationGrad:

================================================
com.microsoft - InvertibleLayerNormalizationGrad
================================================

.. contents::
    :local:


.. _l-onnx-opcom-microsoft-invertiblelayernormalizationgrad-1:

InvertibleLayerNormalizationGrad - 1
====================================

**Version**

* **name**: `InvertibleLayerNormalizationGrad (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.InvertibleLayerNormalizationGrad>`_
* **domain**: **com.microsoft**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.EXPERIMENTAL
* **shape inference**: False

This version of the operator has been available
**since version 1 of domain com.microsoft**.

**Summary**

**Attributes**

* **axis - INT** :   The first normalization dimension: normalization will be performed
  along dimensions axis : rank(inputs).

**Inputs**

* **Y_grad** (heterogeneous) - **V**:

* **Y** (heterogeneous) - **V**:

* **scale** (heterogeneous) - **V**:

* **bias** (heterogeneous) - **V**:

* **inv_std_var** (heterogeneous) - **U**:

**Outputs**

* **X_grad** (heterogeneous) - **T**:

* **scale_grad** (heterogeneous) - **V**:

* **bias_grad** (heterogeneous) - **V**:

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input X and its gradient's type to float tensors.
* **U** in (
  tensor(double),
  tensor(float)
  ):
  Constrain mean and inv_std_var to float tensors.
* **V** in (
  tensor(bfloat16),
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain output Y, scale, bias and their gradients' type to float
  tensors.

**Examples**
