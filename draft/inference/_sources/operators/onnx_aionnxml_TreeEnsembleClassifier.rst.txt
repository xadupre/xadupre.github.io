
.. _l-onnx-docai-onnx-ml-TreeEnsembleClassifier:

===================================
ai.onnx.ml - TreeEnsembleClassifier
===================================

.. contents::
    :local:


.. _l-onnx-opai-onnx-ml-treeensembleclassifier-1:

TreeEnsembleClassifier - 1
==========================

**Version**

* **name**: `TreeEnsembleClassifier (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators-ml.md#ai.onnx.ml.TreeEnsembleClassifier>`_
* **domain**: **ai.onnx.ml**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain ai.onnx.ml**.

**Summary**

**Attributes**

* **base_values - FLOATS** :   Base values for classification, added to final class score; the size
  must be the same as the classes or can be left unassigned (assumed
  0)
* **class_ids - INTS** :   The index of the class list that each weight is for.
* **class_nodeids - INTS** :   node id that this weight is for.
* **class_treeids - INTS** :   The id of the tree that this node is in.
* **class_weights - FLOATS** :   The weight for the class in class_id.
* **classlabels_int64s - INTS** :   Class labels if using integer labels.<br>One and only one of the
  'classlabels_*' attributes must be defined.
* **classlabels_strings - STRINGS** :   Class labels if using string labels.<br>One and only one of the
  'classlabels_*' attributes must be defined.
* **nodes_falsenodeids - INTS** :   Child node if expression is false.
* **nodes_featureids - INTS** :   Feature id for each node.
* **nodes_hitrates - FLOATS** :   Popularity of each node, used for performance and may be omitted.
* **nodes_missing_value_tracks_true - INTS** :   For each node, define what to do in the presence of a missing value:
  if a value is missing (NaN), use the 'true' or 'false' branch based
  on the value in this array.<br>This attribute may be left undefined,
  and the defalt value is false (0) for all nodes.
* **nodes_modes - STRINGS** :   The node kind, that is, the comparison to make at the node. There is
  no comparison to make at a leaf node.<br>One of 'BRANCH_LEQ',
  'BRANCH_LT', 'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ',
  'LEAF'
* **nodes_nodeids - INTS** :   Node id for each node. Ids may restart at zero for each tree, but it
  not required to.
* **nodes_treeids - INTS** :   Tree id for each node.
* **nodes_truenodeids - INTS** :   Child node if expression is true.
* **nodes_values - FLOATS** :   Thresholds to do the splitting on for each node.
* **post_transform - STRING** :   Indicates the transform to apply to the score. <br> One of 'NONE,'
  'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT.'

**Inputs**

* **X** (heterogeneous) - **T1**:

**Outputs**

* **Y** (heterogeneous) - **T2**:

* **Z** (heterogeneous) - **tensor(float)**:

**Type Constraints**

* **T1** in (
  tensor(double),
  tensor(float),
  tensor(int32),
  tensor(int64)
  ):
  The input type must be a tensor of a numeric type.
* **T2** in (
  tensor(int64),
  tensor(string)
  ):
  The output type will be a tensor of strings or integers, depending
  on which of the classlabels_* attributes is used.
