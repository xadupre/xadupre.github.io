
.. _l-onnx-doccom-microsoft-PythonOp:

========================
com.microsoft - PythonOp
========================

.. contents::
    :local:


.. _l-onnx-opcom-microsoft-pythonop-1:

PythonOp - 1
============

**Version**

* **name**: `PythonOp (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.PythonOp>`_
* **domain**: **com.microsoft**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.EXPERIMENTAL
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain com.microsoft**.

**Summary**

**Attributes**

* **inplace - INT** :   Indicate if the output should reuse input memory.
* **input_convention - STRING** (required) :   input_convention[i]==c means a non-tensor argument.
  input_convention[i]==d means a tensor.
* **input_float_scalar_positions - INTS** :
* **input_float_scalars - FLOATS** :   Python float arguments.
* **input_float_tuple_begins - INTS** :
* **input_float_tuple_positions - INTS** :
* **input_float_tuples - FLOATS** :
* **input_int_scalar_positions - INTS** :
* **input_int_scalars - INTS** :   Python int arguments.
* **input_int_tuple_begins - INTS** :
* **input_int_tuple_positions - INTS** :
* **input_int_tuples - INTS** :   Python int-tuple arguments.
* **input_pointer_scalar_positions - INTS** :
* **input_pointer_scalars - INTS** :
* **input_requires_grads - INTS** :   Flags to indicate whether the torch.autograd.apply's inputs require
  gradients (including flags for both tensor and non-tensor inputs).
  If not provided, all value in the vector is 0,which means all inputs
  don't require grad. Frontend needs this info to call into torch
  correctly.
* **input_tensor_ranks - INTS** (required) :   Input tensors' ranks of autograd.Function.apply.
* **input_tensor_types - INTS** (required) :   Input types of autograd.Function.apply.
* **name - STRING** (required) :   Name of custom class.
* **output_tensor_ranks - INTS** (required) :   Output tensors' ranks of autograd.Function.apply.
* **output_tensor_types - INTS** (required) :   Output types of autograd.Function.apply.
* **training_mode - INT** :   Indicate if the model is exported in training_mode, by default,
  False.

**Inputs**

Between 1 and 2147483647 inputs.

* **inputs** (variadic) - **T**:

**Outputs**

Between 2 and 2147483647 outputs.

* **context** (heterogeneous) - **TInt64**:

* **outputs** (variadic) - **T**:

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Allow inputs and outputs to be any kind of tensor.
* **TInt64** in (
  tensor(int64)
  ):
  Constrain input type to 64-bit integer.

**Examples**
