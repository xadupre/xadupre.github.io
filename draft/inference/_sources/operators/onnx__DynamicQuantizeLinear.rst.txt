
.. _l-onnx-doc-DynamicQuantizeLinear:

=====================
DynamicQuantizeLinear
=====================


.. _l-onnx-op-dynamicquantizelinear-11:

DynamicQuantizeLinear - 11
==========================

**Version**

* **name**: `DynamicQuantizeLinear (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#DynamicQuantizeLinear>`_
* **domain**: **main**
* **since_version**: **11**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

**Inputs**

* **x** (heterogeneous) - **T1**:

**Outputs**

* **y** (heterogeneous) - **T2**:

* **y_scale** (heterogeneous) - **tensor(float)**:

* **y_zero_point** (heterogeneous) - **T2**:

**Type Constraints**

* **T1** in (
  tensor(float)
  ):
  Constrain 'x' to float tensor.
* **T2** in (
  tensor(uint8)
  ):
  Constrain 'y_zero_point' and 'y' to 8-bit unsigned integer tensor.

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "DynamicQuantizeLinear",
        inputs=["x"],
        outputs=["y", "y_scale", "y_zero_point"],
    )

    # expected scale 0.0196078438 and zero point 153
    X = np.array([0, 2, -3, -2.5, 1.34, 0.5]).astype(np.float32)
    x_min = np.minimum(0, np.min(X))
    x_max = np.maximum(0, np.max(X))
    Y_Scale = np.float32((x_max - x_min) / (255 - 0))  # uint8 -> [0, 255]
    Y_ZeroPoint = np.clip(round((0 - x_min) / Y_Scale), 0, 255).astype(np.uint8)
    Y = np.clip(np.round(X / Y_Scale) + Y_ZeroPoint, 0, 255).astype(np.uint8)

    expect(
        node,
        inputs=[X],
        outputs=[Y, Y_Scale, Y_ZeroPoint],
        name="test_dynamicquantizelinear",
    )

    # expected scale 0.0156862754 and zero point 255
    X = np.array([-1.0, -2.1, -1.3, -2.5, -3.34, -4.0]).astype(np.float32)
    x_min = np.minimum(0, np.min(X))
    x_max = np.maximum(0, np.max(X))
    Y_Scale = np.float32((x_max - x_min) / (255 - 0))  # uint8 -> [0, 255]
    Y_ZeroPoint = np.clip(round((0 - x_min) / Y_Scale), 0, 255).astype(np.uint8)
    Y = np.clip(np.round(X / Y_Scale) + Y_ZeroPoint, 0, 255).astype(np.uint8)

    expect(
        node,
        inputs=[X],
        outputs=[Y, Y_Scale, Y_ZeroPoint],
        name="test_dynamicquantizelinear_max_adjusted",
    )

    X = (
        np.array([1, 2.1, 1.3, 2.5, 3.34, 4.0, 1.5, 2.6, 3.9, 4.0, 3.0, 2.345])
        .astype(np.float32)
        .reshape((3, 4))
    )

    # expected scale 0.0156862754 and zero point 0
    x_min = np.minimum(0, np.min(X))
    x_max = np.maximum(0, np.max(X))
    Y_Scale = np.float32((x_max - x_min) / (255 - 0))  # uint8 -> [0, 255]
    Y_ZeroPoint = np.clip(round((0 - x_min) / Y_Scale), 0, 255).astype(np.uint8)
    Y = np.clip(np.round(X / Y_Scale) + Y_ZeroPoint, 0, 255).astype(np.uint8)

    expect(
        node,
        inputs=[X],
        outputs=[Y, Y_Scale, Y_ZeroPoint],
        name="test_dynamicquantizelinear_min_adjusted",
    )
