
.. _l-onnx-doccom-microsoft-PythonOpGrad:

============================
com.microsoft - PythonOpGrad
============================

.. contents::
    :local:


.. _l-onnx-opcom-microsoft-pythonopgrad-1:

PythonOpGrad - 1
================

**Version**

* **name**: `PythonOpGrad (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#com.microsoft.PythonOpGrad>`_
* **domain**: **com.microsoft**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.EXPERIMENTAL
* **shape inference**: True

This version of the operator has been available
**since version 1 of domain com.microsoft**.

**Summary**

**Attributes**

* **inplace - INT** :   Indicate if the output should reuse input memory. Todo(pengwa): do
  we really need it?
* **input_tensor_ranks - INTS** :   Input ranks of autograd.Function.backward (including only tensor
  inputs).This attribute is mostly used for input checks for better
  robustness.
* **input_tensor_types - INTS** :   Input types of autograd.Function.backward (including only tensor
  inputs).This attribute is mostly used for input checks for better
  robustnes.
* **name - STRING** (required) :   Name of custom class.
* **output_convention - STRING** (required) :   A string inidicating autograd.Function.backward outputs's type.value
  'c' - non-tensor output; value 'd' - tensor output.
* **output_tensor_ranks - INTS** :   Output ranks of autograd.Function.backward outputs (including only
  tensor outputs).
* **output_tensor_requires_grads - INTS** (required) :   Flags to indicate which outputs have gradients (including only
  tensor outputs).
* **output_tensor_types - INTS** :   Output types of autograd.Function.backward outputs (including only
  tensor outputs).

**Inputs**

Between 2 and 2147483647 inputs.

* **context** (heterogeneous) - **TInt64**:

* **inputs** (variadic) - **T**:

**Outputs**

Between 1 and 2147483647 outputs.

* **outputs** (variadic) - **T**:

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Allow inputs and outputs to be any kind of tensor.
* **TInt64** in (
  tensor(int64)
  ):
  Constrain input type to 64-bit integer.

**Examples**
