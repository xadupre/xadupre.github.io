
.. _l-onnx-docai-onnx-ml-TreeEnsembleRegressor:

==================================
ai.onnx.ml - TreeEnsembleRegressor
==================================

.. contents::
    :local:


.. _l-onnx-opai-onnx-ml-treeensembleregressor-1:

TreeEnsembleRegressor - 1
=========================

**Version**

* **name**: `TreeEnsembleRegressor (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators-ml.md#ai.onnx.ml.TreeEnsembleRegressor>`_
* **domain**: **ai.onnx.ml**
* **since_version**: **1**
* **function**:
* **support_level**: SupportType.COMMON
* **shape inference**: False

This version of the operator has been available
**since version 1 of domain ai.onnx.ml**.

**Summary**

**Attributes**

* **aggregate_function - STRING** :   Defines how to aggregate leaf values within a target. <br>One of
  'AVERAGE,' 'SUM,' 'MIN,' 'MAX.'
* **base_values - FLOATS** :   Base values for classification, added to final class score; the size
  must be the same as the classes or can be left unassigned (assumed
  0)
* **n_targets - INT** :   The total number of targets.
* **nodes_falsenodeids - INTS** :   Child node if expression is false
* **nodes_featureids - INTS** :   Feature id for each node.
* **nodes_hitrates - FLOATS** :   Popularity of each node, used for performance and may be omitted.
* **nodes_missing_value_tracks_true - INTS** :   For each node, define what to do in the presence of a NaN: use the
  'true' (if the attribute value is 1) or 'false' (if the attribute
  value is 0) branch based on the value in this array.<br>This
  attribute may be left undefined and the defalt value is false (0)
  for all nodes.
* **nodes_modes - STRINGS** :   The node kind, that is, the comparison to make at the node. There is
  no comparison to make at a leaf node.<br>One of 'BRANCH_LEQ',
  'BRANCH_LT', 'BRANCH_GTE', 'BRANCH_GT', 'BRANCH_EQ', 'BRANCH_NEQ',
  'LEAF'
* **nodes_nodeids - INTS** :   Node id for each node. Node ids must restart at zero for each tree
  and increase sequentially.
* **nodes_treeids - INTS** :   Tree id for each node.
* **nodes_truenodeids - INTS** :   Child node if expression is true
* **nodes_values - FLOATS** :   Thresholds to do the splitting on for each node.
* **post_transform - STRING** :   Indicates the transform to apply to the score. <br>One of 'NONE,'
  'SOFTMAX,' 'LOGISTIC,' 'SOFTMAX_ZERO,' or 'PROBIT'
* **target_ids - INTS** :   The index of the target that each weight is for
* **target_nodeids - INTS** :   The node id of each weight
* **target_treeids - INTS** :   The id of the tree that each node is in.
* **target_weights - FLOATS** :   The weight for each target

**Inputs**

* **X** (heterogeneous) - **T**:

**Outputs**

* **Y** (heterogeneous) - **tensor(float)**:

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(int32),
  tensor(int64)
  ):
  The input type must be a tensor of a numeric type.
