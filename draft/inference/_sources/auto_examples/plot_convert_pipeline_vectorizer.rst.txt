
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_convert_pipeline_vectorizer.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_convert_pipeline_vectorizer.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_convert_pipeline_vectorizer.py:


Train, convert and predict with ONNX Runtime
============================================

This example demonstrates an end to end scenario
starting with the training of a scikit-learn pipeline
which takes as inputs not a regular vector but a
dictionary ``{ int: float }`` as its first step is a
`DictVectorizer <http://scikit-learn.org/stable/modules/generated/sklearn.feature_extraction.DictVectorizer.html>`_.

.. contents::
    :local:

Train a pipeline
++++++++++++++++

The first step consists in retrieving the boston datset.

.. GENERATED FROM PYTHON SOURCE LINES 22-34

.. code-block:: default

    import pandas
    from sklearn.datasets import load_boston

    boston = load_boston()
    X, y = boston.data, boston.target

    from sklearn.model_selection import train_test_split

    X_train, X_test, y_train, y_test = train_test_split(X, y)
    X_train_dict = pandas.DataFrame(X_train[:, 1:]).T.to_dict().values()
    X_test_dict = pandas.DataFrame(X_test[:, 1:]).T.to_dict().values()



.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/home/xadupre/github/onnxruntime/docs/python/inference/examples/plot_convert_pipeline_vectorizer.py", line 23, in <module>
        from sklearn.datasets import load_boston
      File "/home/xadupre/github/scikit-learn/sklearn/datasets/__init__.py", line 156, in __getattr__
        raise ImportError(msg)
    ImportError: 
    `load_boston` has been removed from scikit-learn since version 1.2.

    The Boston housing prices dataset has an ethical problem: as
    investigated in [1], the authors of this dataset engineered a
    non-invertible variable "B" assuming that racial self-segregation had a
    positive impact on house prices [2]. Furthermore the goal of the
    research that led to the creation of this dataset was to study the
    impact of air quality but it did not give adequate demonstration of the
    validity of this assumption.

    The scikit-learn maintainers therefore strongly discourage the use of
    this dataset unless the purpose of the code is to study and educate
    about ethical issues in data science and machine learning.

    In this special case, you can fetch the dataset from the original
    source::

        import pandas as pd
        import numpy as np

        data_url = "http://lib.stat.cmu.edu/datasets/boston"
        raw_df = pd.read_csv(data_url, sep="\s+", skiprows=22, header=None)
        data = np.hstack([raw_df.values[::2, :], raw_df.values[1::2, :2]])
        target = raw_df.values[1::2, 2]

    Alternative datasets include the California housing dataset and the
    Ames housing dataset. You can load the datasets as follows::

        from sklearn.datasets import fetch_california_housing
        housing = fetch_california_housing()

    for the California housing dataset and::

        from sklearn.datasets import fetch_openml
        housing = fetch_openml(name="house_prices", as_frame=True)

    for the Ames housing dataset.

    [1] M Carlisle.
    "Racist data destruction?"
    <https://medium.com/@docintangible/racist-data-destruction-113e3eff54a8>

    [2] Harrison Jr, David, and Daniel L. Rubinfeld.
    "Hedonic housing prices and the demand for clean air."
    Journal of environmental economics and management 5.1 (1978): 81-102.
    <https://www.researchgate.net/publication/4974606_Hedonic_housing_prices_and_the_demand_for_clean_air>





.. GENERATED FROM PYTHON SOURCE LINES 35-36

We create a pipeline.

.. GENERATED FROM PYTHON SOURCE LINES 36-45

.. code-block:: default


    from sklearn.ensemble import GradientBoostingRegressor
    from sklearn.feature_extraction import DictVectorizer
    from sklearn.pipeline import make_pipeline

    pipe = make_pipeline(DictVectorizer(sparse=False), GradientBoostingRegressor())

    pipe.fit(X_train_dict, y_train)


.. GENERATED FROM PYTHON SOURCE LINES 46-48

We compute the prediction on the test set
and we show the confusion matrix.

.. GENERATED FROM PYTHON SOURCE LINES 48-53

.. code-block:: default

    from sklearn.metrics import r2_score

    pred = pipe.predict(X_test_dict)
    print(r2_score(y_test, pred))


.. GENERATED FROM PYTHON SOURCE LINES 54-60

Conversion to ONNX format
+++++++++++++++++++++++++

We use module
`sklearn-onnx <https://github.com/onnx/sklearn-onnx>`_
to convert the model into ONNX format.

.. GENERATED FROM PYTHON SOURCE LINES 60-70

.. code-block:: default


    from skl2onnx import convert_sklearn
    from skl2onnx.common.data_types import DictionaryType, FloatTensorType, Int64TensorType, SequenceType

    # initial_type = [('float_input', DictionaryType(Int64TensorType([1]), FloatTensorType([])))]
    initial_type = [("float_input", DictionaryType(Int64TensorType([1]), FloatTensorType([])))]
    onx = convert_sklearn(pipe, initial_types=initial_type)
    with open("pipeline_vectorize.onnx", "wb") as f:
        f.write(onx.SerializeToString())


.. GENERATED FROM PYTHON SOURCE LINES 71-73

We load the model with ONNX Runtime and look at
its input and output.

.. GENERATED FROM PYTHON SOURCE LINES 73-84

.. code-block:: default

    import onnxruntime as rt
    from onnxruntime.capi.onnxruntime_pybind11_state import InvalidArgument

    sess = rt.InferenceSession("pipeline_vectorize.onnx", providers=rt.get_available_providers())

    import numpy

    inp, out = sess.get_inputs()[0], sess.get_outputs()[0]
    print("input name='{}' and shape={} and type={}".format(inp.name, inp.shape, inp.type))
    print("output name='{}' and shape={} and type={}".format(out.name, out.shape, out.type))


.. GENERATED FROM PYTHON SOURCE LINES 85-87

We compute the predictions.
We could do that in one call:

.. GENERATED FROM PYTHON SOURCE LINES 87-93

.. code-block:: default


    try:
        pred_onx = sess.run([out.name], {inp.name: X_test_dict})[0]
    except (RuntimeError, InvalidArgument) as e:
        print(e)


.. GENERATED FROM PYTHON SOURCE LINES 94-96

But it fails because, in case of a DictVectorizer,
ONNX Runtime expects one observation at a time.

.. GENERATED FROM PYTHON SOURCE LINES 96-98

.. code-block:: default

    pred_onx = [sess.run([out.name], {inp.name: row})[0][0, 0] for row in X_test_dict]


.. GENERATED FROM PYTHON SOURCE LINES 99-100

We compare them to the model's ones.

.. GENERATED FROM PYTHON SOURCE LINES 100-102

.. code-block:: default

    print(r2_score(pred, pred_onx))


.. GENERATED FROM PYTHON SOURCE LINES 103-105

Very similar. *ONNX Runtime* uses floats instead of doubles,
that explains the small discrepencies.


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  1.461 seconds)


.. _sphx_glr_download_auto_examples_plot_convert_pipeline_vectorizer.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_convert_pipeline_vectorizer.py <plot_convert_pipeline_vectorizer.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_convert_pipeline_vectorizer.ipynb <plot_convert_pipeline_vectorizer.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
