
:orphan:

|rss_image|  **blog page - 1/3** :ref:`==> <ap-main-1>` :ref:`Blog <ap-main-0>` :ref:`onnx (8) <ap-cat-onnx-0>` :ref:`runtime (3) <ap-cat-runtime-0>`

.. |rss_image| image:: feed-icon-16x16.png
    :target: ../_downloads/rss.xml
    :alt: RSS

----


.. index:: blog


.. _ap-main-0:

blog page - 1/3
+++++++++++++++

.. blogpostagg::
    :title: Xop, easy to create onnx graph
    :date: 2022-02-27
    :keywords: tips,tensorflow,tensorflow-onnx
    :categories: xop,onnx
    :rawfile: 2022/2022-02-27_xop.rst

    :epkg:`onnx` package has a very verbose API to create ONNX
    graph. Could you imagine a user to directly write the syntax tree
    of a program instead of some python code? Creating a ONNX graph is
    very similar to that task except ONNX language is more simple
    than python.
    

    ...




.. blogpostagg::
    :title: A few tricks for tf2onnx
    :date: 2021-08-12
    :keywords: tips,tensorflow,tensorflow-onnx
    :categories: tf2onnx
    :rawfile: 2021/2021-08-12_tf2onnx.rst

    A few things I tend to forget. To run a specific
    test on a specific opset.
    

    ...




.. blogpostagg::
    :title: Decompose einsum into numpy operators
    :date: 2021-08-11
    :keywords: einsum
    :categories: onnx
    :rawfile: 2021/2021-08-11_einsum.rst

    Notebook :ref:`einsumdecompositionrst` what function :epkg:`numpy:einsum`
    does and how it can be decomposed into a series of basic operations,
    all available in ONNX. That's the purpose of function
    Function :func:`decompose_einsum_equation
    <mlprodict.testing.einsum.einsum_impl.decompose_einsum_equation>`.
    With function :func:`export2numpy
    <mlprodict.onnx_tools.onnx_export.export2numpy>`, it is possible to
    convert back this ONNX graph into a series of numpy operations.
    

    ...




.. blogpostagg::
    :title: onnxruntime shape [] != None
    :date: 2021-08-10
    :keywords: onnxruntime
    :categories: onnx
    :rawfile: 2021/2021-08-10_shape.rst

    `None` is the undefined shape, `[]` is an empty shape.
    And when shapes do not fit the results, the outputs can
    be suprising. The following example shows what :epkg:`onnxruntime`
    produces for the same graph except input and output shapes
    when defined as `None` and `[]`.
    

    ...




.. blogpostagg::
    :title: ONNX from C#
    :date: 2021-07-09
    :keywords: ONNX,C#
    :categories: runtime
    :rawfile: 2021/2021-07-09_csharp.rst

    This example shows how to compute the predictions of a model
    using C#.
    

    ...




.. blogpostagg::
    :title: Convert a Lightgbm dump
    :date: 2021-07-09
    :keywords: ONNX,lightgbm,onnxmltools
    :categories: converters
    :rawfile: 2021/2021-07-09_lightgbm.rst

    This example shows how to convert a :epkg:`lightgbm` model
    dumped as a text file. It uses :epkg:`lightgbm` to restore
    the model, converts it and checks the discrepencies.
    

    ...




.. blogpostagg::
    :title: Numpy API for ONNX and scikit-learn (part II)
    :date: 2021-05-05
    :keywords: ONNX,API,numpy,scikit-learn
    :categories: API
    :rawfile: 2021/2021-05-05_numpyapionnx2.rst

    This follows blog post :ref:`Numpy API for ONNX and scikit-learn (part I)
    <blog-onnx-api-part1>`. It demonstrated how to insert a custom
    function in a pipeline and still be able to convert that pipeline
    into ONNX. This blog post shows how to implement a custom transformer.
    

    ...




.. blogpostagg::
    :title: Numpy API for ONNX and scikit-learn (part I)
    :date: 2021-05-05
    :keywords: ONNX,API,numpy,scikit-learn
    :categories: API
    :rawfile: 2021/2021-05-05_numpyapionnx1.rst

    :epkg:`sklearn-onnx` converts most of the pipelines including
    numerical preprocessing or predictors but it fails whenever
    custom code is involved. That covers the use of `FunctionTransformer
    <https://scikit-learn.org/stable/modules/generated/
    sklearn.preprocessing.FunctionTransformer.html>`_ or a new model
    inheriting from `BaseEstimator <https://scikit-learn.org/stable/
    modules/generated/sklearn.base.BaseEstimator.html>`_. To be successful,
    the conversion needs a way to convert the custom code into ONNX.
    The proposed solution here is bypass that complex steps
    (rewrite a python function with ONNX operators) by directly writing
    the custom code with ONNX operators. However, even though most of
    the operator are close to :epkg:`numpy` functions, they are not
    the same. To avoid spending time looking at them, many :epkg:`numpy`
    functions were implementing with ONNX operators. The custom function
    or predictor can then just be implemented with this API to build
    a unique ONNX graph executed with a runtime.
    

    ...




.. blogpostagg::
    :title: Parallelization of Random Forest predictions
    :date: 2020-11-27
    :keywords: scikit-learn,parallelization,Random Forest
    :categories: runtime
    :rawfile: 2020/2020-11-27_parallelisation.rst

    I've been struggling to understand why the first implementation
    of TreeEnsemble could not get as fast as *scikit-learn* implementation
    for a RandomForest when the number of observations was 100.000 or above,
    100 trees and a depth >= 10. The only difference was that the computation
    was parallelized by trees and not by observations. These
    observations are benchmarked in
    :ref:`l-example-tree-ensemble-reg-bench`
    (:ref:`l-example-tree-ensemble-cls-bench-multi` for the
    multiclass version).
    

    ...




.. blogpostagg::
    :title: x / y != x * (1 / y)
    :date: 2020-06-09
    :keywords: scikit-learn,float inverse,compilation,StandardScaler
    :categories: runtime
    :rawfile: 2020/2020-06-09_float_inverse.rst

    I was recently investigating issue
    `onnxruntime/4130 <https://github.com/microsoft/onnxruntime/issues/4130>`_
    in notebook :ref:`onnxdiscrepenciesrst`.
    While looking into a way to solve it, I finally discovered
    that this is not an easy problem.
    

    ...





----

|rss_image|  **blog page - 1/3** :ref:`==> <ap-main-1>` :ref:`2020-11 (1) <ap-month-2020-11-0>` :ref:`2021-05 (2) <ap-month-2021-05-0>` :ref:`2021-07 (2) <ap-month-2021-07-0>` :ref:`2021-08 (3) <ap-month-2021-08-0>` :ref:`2022-02 (1) <ap-month-2022-02-0>`