

.. _l-BernoulliNB-m-cl-default--o15:

BernoulliNB - m-cl - default - 
===============================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        BernoulliNB()

+-----------------------------+----------+
| index                       | 0        |
+=============================+==========+
| skl_nop                     | 1        |
+-----------------------------+----------+
| skl_ncoef                   | 3        |
+-----------------------------+----------+
| skl_nlin                    | 1        |
+-----------------------------+----------+
| onx_size                    | 1857     |
+-----------------------------+----------+
| onx_nnodes                  | 22       |
+-----------------------------+----------+
| onx_ninits                  | 9        |
+-----------------------------+----------+
| onx_doc_string              |          |
+-----------------------------+----------+
| onx_ir_version              | 8        |
+-----------------------------+----------+
| onx_domain                  | ai.onnx  |
+-----------------------------+----------+
| onx_model_version           | 0        |
+-----------------------------+----------+
| onx_producer_name           | skl2onnx |
+-----------------------------+----------+
| onx_producer_version        | 1.11     |
+-----------------------------+----------+
| onx_ai.onnx.ml              | 1        |
+-----------------------------+----------+
| onx_                        | 13       |
+-----------------------------+----------+
| onx_op_Cast                 | 4        |
+-----------------------------+----------+
| onx_op_ZipMap               | 1        |
+-----------------------------+----------+
| onx_op_Reshape              | 2        |
+-----------------------------+----------+
| onx_size_optim              | 1857     |
+-----------------------------+----------+
| onx_nnodes_optim            | 22       |
+-----------------------------+----------+
| onx_ninits_optim            | 9        |
+-----------------------------+----------+
| fit_classes_.shape          | 3        |
+-----------------------------+----------+
| fit_class_count_.shape      | 3        |
+-----------------------------+----------+
| fit_feature_count_.shape    | (3, 4)   |
+-----------------------------+----------+
| fit_feature_log_prob_.shape | (3, 4)   |
+-----------------------------+----------+
| fit_class_log_prior_.shape  | 3        |
+-----------------------------+----------+
| fit_n_features_             | 4        |
+-----------------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'float', 'shape': }}]" fontsize=10];

      classes [shape=box label="classes\nint32((3,))\n[0 1 2]" fontsize=10];
      feature_log_prob [shape=box label="feature_log_prob\nfloat32((4, 3))\n[[-0.02739897 -0.02469261 -0.02531781]\n [-0.027398..." fontsize=10];
      class_log_prior [shape=box label="class_log_prior\nfloat32((1, 3))\n[[-1.1631508 -1.0549372 -1.0809127]]" fontsize=10];
      constant [shape=box label="constant\nfloat32(())\n1.0" fontsize=10];
      threshold [shape=box label="threshold\nfloat32((1,))\n[0.]" fontsize=10];
      zero_tensor [shape=box label="zero_tensor\nfloat32((1, 4))\n[[0. 0. 0. 0.]]" fontsize=10];
      axis [shape=box label="axis\nint64((1,))\n[0]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((2,))\n[-1  1]" fontsize=10];
      shape_tensor1 [shape=box label="shape_tensor1\nint64((1,))\n[-1]" fontsize=10];

      exp_result [shape=box label="exp_result" fontsize=10];
      Exp [shape=box style="filled,rounded" color=orange label="Exp\n(Exp)" fontsize=10];
      feature_log_prob -> Exp;
      Exp -> exp_result;

      condition [shape=box label="condition" fontsize=10];
      Greater [shape=box style="filled,rounded" color=orange label="Greater\n(Greater)" fontsize=10];
      X -> Greater;
      threshold -> Greater;
      Greater -> condition;

      cast_values [shape=box label="cast_values" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=1" fontsize=10];
      condition -> Cast;
      Cast -> cast_values;

      sub_result [shape=box label="sub_result" fontsize=10];
      Sub [shape=box style="filled,rounded" color=orange label="Sub\n(Sub)" fontsize=10];
      constant -> Sub;
      exp_result -> Sub;
      Sub -> sub_result;

      binarised_input [shape=box label="binarised_input" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      zero_tensor -> Add;
      cast_values -> Add;
      Add -> binarised_input;

      neg_prob [shape=box label="neg_prob" fontsize=10];
      Log [shape=box style="filled,rounded" color=orange label="Log\n(Log)" fontsize=10];
      sub_result -> Log;
      Log -> neg_prob;

      sum_neg_prob [shape=box label="sum_neg_prob" fontsize=10];
      ReduceSum [shape=box style="filled,rounded" color=orange label="ReduceSum\n(ReduceSum)" fontsize=10];
      neg_prob -> ReduceSum;
      axis -> ReduceSum;
      ReduceSum -> sum_neg_prob;

      difference_matrix [shape=box label="difference_matrix" fontsize=10];
      Sub1 [shape=box style="filled,rounded" color=orange label="Sub\n(Sub1)" fontsize=10];
      feature_log_prob -> Sub1;
      neg_prob -> Sub1;
      Sub1 -> difference_matrix;

      dot_prod [shape=box label="dot_prod" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      binarised_input -> MatMul;
      difference_matrix -> MatMul;
      MatMul -> dot_prod;

      partial_sum_result [shape=box label="partial_sum_result" fontsize=10];
      Add1 [shape=box style="filled,rounded" color=orange label="Add\n(Add1)" fontsize=10];
      dot_prod -> Add1;
      sum_neg_prob -> Add1;
      Add1 -> partial_sum_result;

      sum_result [shape=box label="sum_result" fontsize=10];
      Add2 [shape=box style="filled,rounded" color=orange label="Add\n(Add2)" fontsize=10];
      partial_sum_result -> Add2;
      class_log_prior -> Add2;
      Add2 -> sum_result;

      argmax_output [shape=box label="argmax_output" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      sum_result -> ArgMax;
      ArgMax -> argmax_output;

      reduce_log_sum_exp_result [shape=box label="reduce_log_sum_exp_result" fontsize=10];
      ReduceLogSumExp [shape=box style="filled,rounded" color=orange label="ReduceLogSumExp\n(ReduceLogSumExp)\naxes=[1]\nkeepdims=0" fontsize=10];
      sum_result -> ReduceLogSumExp;
      ReduceLogSumExp -> reduce_log_sum_exp_result;

      reshaped_log_prob [shape=box label="reshaped_log_prob" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      reduce_log_sum_exp_result -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_log_prob;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      argmax_output -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> array_feature_extractor_result;

      log_prob [shape=box label="log_prob" fontsize=10];
      Sub2 [shape=box style="filled,rounded" color=orange label="Sub\n(Sub2)" fontsize=10];
      sum_result -> Sub2;
      reshaped_log_prob -> Sub2;
      Sub2 -> log_prob;

      cast2_result [shape=box label="cast2_result" fontsize=10];
      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=1" fontsize=10];
      array_feature_extractor_result -> Cast1;
      Cast1 -> cast2_result;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape1 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape1)" fontsize=10];
      cast2_result -> Reshape1;
      shape_tensor1 -> Reshape1;
      Reshape1 -> reshaped_result;

      probabilities [shape=box label="probabilities" fontsize=10];
      Exp1 [shape=box style="filled,rounded" color=orange label="Exp\n(Exp1)" fontsize=10];
      log_prob -> Exp1;
      Exp1 -> probabilities;

      label [shape=box label="label" fontsize=10];
      Cast2 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast2)\nto=7" fontsize=10];
      reshaped_result -> Cast2;
      Cast2 -> label;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1 2]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;

      Cast3 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast3)\nto=7" fontsize=10];
      label -> Cast3;
      Cast3 -> output_label;
    }