

.. _l-StackingClassifier-b-cl-logreg-zipmap:False-o15:

StackingClassifier - b-cl - logreg - {'zipmap': False}
======================================================

Fitted on a problem type *b-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.ensemble._stacking.StackingClassifier'>={'zipmap': False}``.

::

        StackingClassifier(estimators=[('lr1', LogisticRegression(solver='liblinear')),
                                   ('lr2',
                                    LogisticRegression(fit_intercept=False,
                                                       solver='liblinear'))],
                       n_jobs=8)

+----------------------------------+----------+
| index                            | 0        |
+==================================+==========+
| skl_nop                          | 3        |
+----------------------------------+----------+
| skl_ncoef                        | 2        |
+----------------------------------+----------+
| skl_nlin                         | 2        |
+----------------------------------+----------+
| onx_size                         | 2205     |
+----------------------------------+----------+
| onx_nnodes                       | 17       |
+----------------------------------+----------+
| onx_ninits                       | 3        |
+----------------------------------+----------+
| onx_doc_string                   |          |
+----------------------------------+----------+
| onx_ir_version                   | 8        |
+----------------------------------+----------+
| onx_domain                       | ai.onnx  |
+----------------------------------+----------+
| onx_model_version                | 0        |
+----------------------------------+----------+
| onx_producer_name                | skl2onnx |
+----------------------------------+----------+
| onx_producer_version             | 1.11     |
+----------------------------------+----------+
| onx_ai.onnx.ml                   | 1        |
+----------------------------------+----------+
| onx_                             | 14       |
+----------------------------------+----------+
| onx_op_Cast                      | 4        |
+----------------------------------+----------+
| onx_op_Identity                  | 1        |
+----------------------------------+----------+
| onx_op_Reshape                   | 1        |
+----------------------------------+----------+
| onx_size_optim                   | 2114     |
+----------------------------------+----------+
| onx_nnodes_optim                 | 16       |
+----------------------------------+----------+
| onx_ninits_optim                 | 3        |
+----------------------------------+----------+
| fit_classes_.shape               | 2        |
+----------------------------------+----------+
| fit_estimators_.size             | 2        |
+----------------------------------+----------+
| fit_estimators_.coef_.shape      | (1, 4)   |
+----------------------------------+----------+
| fit_estimators_.n_iter_.shape    | 1        |
+----------------------------------+----------+
| fit_estimators_.classes_.shape   | 2        |
+----------------------------------+----------+
| fit_estimators_.intercept_.shape | 1        |
+----------------------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 2))" fontsize=10];

      classes [shape=box label="classes\nint32((2,))\n[0 1]" fontsize=10];
      column_index [shape=box label="column_index\nint64(())\n1" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((1,))\n[-1]" fontsize=10];

      label1 [shape=box label="label1" fontsize=10];
      probability_tensor3 [shape=box label="probability_tensor3" fontsize=10];
      LinearClassifier [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier)\nclasslabels_ints=[0 1]\ncoefficients=[ 0.45876738  1.29...\nintercepts=[ 0.28357968 -0.2835...\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LinearClassifier;
      LinearClassifier -> label1;
      LinearClassifier -> probability_tensor3;

      label2 [shape=box label="label2" fontsize=10];
      probability_tensor4 [shape=box label="probability_tensor4" fontsize=10];
      LinearClassifier1 [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier1)\nclasslabels_ints=[0 1]\ncoefficients=[ 0.49765062  1.31...\nintercepts=[-0.  0.]\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LinearClassifier1;
      LinearClassifier1 -> label2;
      LinearClassifier1 -> probability_tensor4;

      probability_tensor1 [shape=box label="probability_tensor1" fontsize=10];
      Normalizer1 [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer1)\nnorm=b'L1'" fontsize=10];
      probability_tensor4 -> Normalizer1;
      Normalizer1 -> probability_tensor1;

      probability_tensor [shape=box label="probability_tensor" fontsize=10];
      Normalizer [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer)\nnorm=b'L1'" fontsize=10];
      probability_tensor3 -> Normalizer;
      Normalizer -> probability_tensor;

      probability_tensor1_castio [shape=box label="probability_tensor1_castio" fontsize=10];
      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=1" fontsize=10];
      probability_tensor1 -> Cast1;
      Cast1 -> probability_tensor1_castio;

      probability_tensor_castio [shape=box label="probability_tensor_castio" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=1" fontsize=10];
      probability_tensor -> Cast;
      Cast -> probability_tensor_castio;

      stack_prob0 [shape=box label="stack_prob0" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      probability_tensor_castio -> ArrayFeatureExtractor;
      column_index -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> stack_prob0;

      stack_prob1 [shape=box label="stack_prob1" fontsize=10];
      ArrayFeatureExtractor1 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor1)" fontsize=10];
      probability_tensor1_castio -> ArrayFeatureExtractor1;
      column_index -> ArrayFeatureExtractor1;
      ArrayFeatureExtractor1 -> stack_prob1;

      merged_probability_tensor [shape=box label="merged_probability_tensor" fontsize=10];
      Concat [shape=box style="filled,rounded" color=orange label="Concat\n(Concat)\naxis=1" fontsize=10];
      stack_prob0 -> Concat;
      stack_prob1 -> Concat;
      Concat -> merged_probability_tensor;

      label3 [shape=box label="label3" fontsize=10];
      probability_tensor5 [shape=box label="probability_tensor5" fontsize=10];
      LinearClassifier2 [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier2)\nclasslabels_ints=[0 1]\ncoefficients=[-2.9424708 -2.939...\nintercepts=[ 2.631917 -2.631917...\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      merged_probability_tensor -> LinearClassifier2;
      LinearClassifier2 -> label3;
      LinearClassifier2 -> probability_tensor5;

      probability_tensor2 [shape=box label="probability_tensor2" fontsize=10];
      Normalizer2 [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer2)\nnorm=b'L1'" fontsize=10];
      probability_tensor5 -> Normalizer2;
      Normalizer2 -> probability_tensor2;

      probability_tensor2_castio [shape=box label="probability_tensor2_castio" fontsize=10];
      Cast2 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast2)\nto=1" fontsize=10];
      probability_tensor2 -> Cast2;
      Cast2 -> probability_tensor2_castio;

      argmax_output [shape=box label="argmax_output" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      probability_tensor2_castio -> ArgMax;
      ArgMax -> argmax_output;

      OpProb [shape=box style="filled,rounded" color=orange label="Identity\n(OpProb)" fontsize=10];
      probability_tensor2_castio -> OpProb;
      OpProb -> probabilities;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor2 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor2)" fontsize=10];
      classes -> ArrayFeatureExtractor2;
      argmax_output -> ArrayFeatureExtractor2;
      ArrayFeatureExtractor2 -> array_feature_extractor_result;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      array_feature_extractor_result -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_result;

      Cast3 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast3)\nto=7" fontsize=10];
      reshaped_result -> Cast3;
      Cast3 -> label;
    }