

.. _l-LabelBinarizer-int-col-default--o15:

LabelBinarizer - int-col - default - 
=====================================

Fitted on a problem type *int-col*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `transform` matches output .


::

        LabelBinarizer()

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| onx_size             | 507      |
+----------------------+----------+
| onx_nnodes           | 4        |
+----------------------+----------+
| onx_ninits           | 4        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11.1   |
+----------------------+----------+
| onx_                 | 13       |
+----------------------+----------+
| onx_op_Cast          | 1        |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 507      |
+----------------------+----------+
| onx_nnodes_optim     | 4        |
+----------------------+----------+
| onx_ninits_optim     | 4        |
+----------------------+----------+
| fit_classes_.shape   | 3        |
+----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nint64((0,))" fontsize=10];

      variable [shape=box color=green label="variable\nint64((0, 3))" fontsize=10];

      classes_tensor [shape=box label="classes_tensor\nint64((3,))\n[0 1 2]" fontsize=10];
      zero_tensor [shape=box label="zero_tensor\nfloat32((1, 3))\n[[0. 0. 0.]]" fontsize=10];
      unit_tensor [shape=box label="unit_tensor\nfloat32((1, 3))\n[[1. 1. 1.]]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((2,))\n[-1  1]" fontsize=10];

      reshaped_input [shape=box label="reshaped_input" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      X -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_input;

      equal_condition_tensor [shape=box label="equal_condition_tensor" fontsize=10];
      equal [shape=box style="filled,rounded" color=orange label="Equal\n(equal)" fontsize=10];
      classes_tensor -> equal;
      reshaped_input -> equal;
      equal -> equal_condition_tensor;

      where_result [shape=box label="where_result" fontsize=10];
      where [shape=box style="filled,rounded" color=orange label="Where\n(where)" fontsize=10];
      equal_condition_tensor -> where;
      unit_tensor -> where;
      zero_tensor -> where;
      where -> where_result;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      where_result -> Cast;
      Cast -> variable;
    }