

.. _l-ExtraTreeClassifier-~m-label-default-zipmap:False-o15:

ExtraTreeClassifier - ~m-label - default - {'zipmap': False}
============================================================

Fitted on a problem type *~m-label*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.tree._classes.ExtraTreeClassifier'>={'zipmap': False}``.

::

        ExtraTreeClassifier(random_state=0)

+-----------------------+----------+
| index                 | 0        |
+=======================+==========+
| skl_nop               | 1        |
+-----------------------+----------+
| skl_nnodes            | 127      |
+-----------------------+----------+
| skl_ntrees            | 1        |
+-----------------------+----------+
| skl_max_depth         | 13       |
+-----------------------+----------+
| onx_size              | 10411    |
+-----------------------+----------+
| onx_nnodes            | 23       |
+-----------------------+----------+
| onx_ninits            | 7        |
+-----------------------+----------+
| onx_doc_string        |          |
+-----------------------+----------+
| onx_ir_version        | 8        |
+-----------------------+----------+
| onx_domain            | ai.onnx  |
+-----------------------+----------+
| onx_model_version     | 0        |
+-----------------------+----------+
| onx_producer_name     | skl2onnx |
+-----------------------+----------+
| onx_producer_version  | 1.11.1   |
+-----------------------+----------+
| onx_                  | 15       |
+-----------------------+----------+
| onx_ai.onnx.ml        | 1        |
+-----------------------+----------+
| onx_op_Cast           | 2        |
+-----------------------+----------+
| onx_op_Reshape        | 7        |
+-----------------------+----------+
| onx_size_optim        | 10411    |
+-----------------------+----------+
| onx_nnodes_optim      | 23       |
+-----------------------+----------+
| onx_ninits_optim      | 7        |
+-----------------------+----------+
| fit_n_classes_.shape  | 3        |
+-----------------------+----------+
| fit_n_classes_        | [2 2 2]  |
+-----------------------+----------+
| fit_n_features_       | 4        |
+-----------------------+----------+
| fit_tree_.node_count  | 127      |
+-----------------------+----------+
| fit_tree_.leave_count | 64       |
+-----------------------+----------+
| fit_tree_.max_depth   | 13       |
+-----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0, 3))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((3, 0, 2))" fontsize=10];

      values [shape=box label="values\nfloat32((3, 2, 127))\n[[[69.  8.  8.  7.  0.  0.  0.  0.  0.  0.  0.  0...." fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((2,))\n[ 1 -1]" fontsize=10];
      k_column [shape=box label="k_column\nint64(())\n0" fontsize=10];
      classes [shape=box label="classes\nint64((2,))\n[0 1]" fontsize=10];
      shape_tensor2 [shape=box label="shape_tensor2\nint64((2,))\n[-1  1]" fontsize=10];
      k_column1 [shape=box label="k_column1\nint64(())\n1" fontsize=10];
      k_column2 [shape=box label="k_column2\nint64(())\n2" fontsize=10];

      indices [shape=box label="indices" fontsize=10];
      dummy_proba [shape=box label="dummy_proba" fontsize=10];
      TreeEnsembleClassifier [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier)\nclass_ids=[  5   7   9  11  13 ...\nclass_nodeids=[  5   7   9  11 ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 1. 1. 1. 1. 1...\nclasslabels_int64s=[  0   1   2...\nnodes_falsenodeids=[ 32  23  22...\nnodes_featureids=[0 1 3 2 1 0 0...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'BR...\nnodes_nodeids=[  0   1   2   3 ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[  1   2   3 ...\nnodes_values=[5.384941  3.13197...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier;
      TreeEnsembleClassifier -> indices;
      TreeEnsembleClassifier -> dummy_proba;

      reshaped_indices [shape=box label="reshaped_indices" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      indices -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_indices;

      out_indices [shape=box label="out_indices" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      values -> ArrayFeatureExtractor;
      reshaped_indices -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> out_indices;

      proba_output [shape=box label="proba_output" fontsize=10];
      Transpose [shape=box style="filled,rounded" color=orange label="Transpose\n(Transpose)\nperm=[0 2 1]" fontsize=10];
      out_indices -> Transpose;
      Transpose -> proba_output;

      transposed_result [shape=box label="transposed_result" fontsize=10];
      Transpose1 [shape=box style="filled,rounded" color=orange label="Transpose\n(Transpose1)\nperm=[2 1 0]" fontsize=10];
      out_indices -> Transpose1;
      Transpose1 -> transposed_result;

      out_k_column [shape=box label="out_k_column" fontsize=10];
      ArrayFeatureExtractor1 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor1)" fontsize=10];
      transposed_result -> ArrayFeatureExtractor1;
      k_column -> ArrayFeatureExtractor1;
      ArrayFeatureExtractor1 -> out_k_column;

      cast_result [shape=box label="cast_result" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=9" fontsize=10];
      proba_output -> Cast;
      Cast -> cast_result;

      out_k_column1 [shape=box label="out_k_column1" fontsize=10];
      ArrayFeatureExtractor3 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor3)" fontsize=10];
      transposed_result -> ArrayFeatureExtractor3;
      k_column1 -> ArrayFeatureExtractor3;
      ArrayFeatureExtractor3 -> out_k_column1;

      out_k_column2 [shape=box label="out_k_column2" fontsize=10];
      ArrayFeatureExtractor5 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor5)" fontsize=10];
      transposed_result -> ArrayFeatureExtractor5;
      k_column2 -> ArrayFeatureExtractor5;
      ArrayFeatureExtractor5 -> out_k_column2;

      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=1" fontsize=10];
      cast_result -> Cast1;
      Cast1 -> probabilities;

      argmax_output [shape=box label="argmax_output" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      out_k_column -> ArgMax;
      ArgMax -> argmax_output;

      argmax_output1 [shape=box label="argmax_output1" fontsize=10];
      ArgMax1 [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax1)\naxis=1" fontsize=10];
      out_k_column1 -> ArgMax1;
      ArgMax1 -> argmax_output1;

      argmax_output2 [shape=box label="argmax_output2" fontsize=10];
      ArgMax2 [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax2)\naxis=1" fontsize=10];
      out_k_column2 -> ArgMax2;
      ArgMax2 -> argmax_output2;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape1 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape1)" fontsize=10];
      argmax_output -> Reshape1;
      shape_tensor -> Reshape1;
      Reshape1 -> reshaped_result;

      reshaped_result1 [shape=box label="reshaped_result1" fontsize=10];
      Reshape3 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape3)" fontsize=10];
      argmax_output1 -> Reshape3;
      shape_tensor -> Reshape3;
      Reshape3 -> reshaped_result1;

      reshaped_result2 [shape=box label="reshaped_result2" fontsize=10];
      Reshape5 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape5)" fontsize=10];
      argmax_output2 -> Reshape5;
      shape_tensor -> Reshape5;
      Reshape5 -> reshaped_result2;

      preds [shape=box label="preds" fontsize=10];
      ArrayFeatureExtractor2 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor2)" fontsize=10];
      classes -> ArrayFeatureExtractor2;
      reshaped_result -> ArrayFeatureExtractor2;
      ArrayFeatureExtractor2 -> preds;

      preds2 [shape=box label="preds2" fontsize=10];
      ArrayFeatureExtractor6 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor6)" fontsize=10];
      classes -> ArrayFeatureExtractor6;
      reshaped_result2 -> ArrayFeatureExtractor6;
      ArrayFeatureExtractor6 -> preds2;

      preds1 [shape=box label="preds1" fontsize=10];
      ArrayFeatureExtractor4 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor4)" fontsize=10];
      classes -> ArrayFeatureExtractor4;
      reshaped_result1 -> ArrayFeatureExtractor4;
      ArrayFeatureExtractor4 -> preds1;

      reshaped_preds [shape=box label="reshaped_preds" fontsize=10];
      Reshape2 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape2)" fontsize=10];
      preds -> Reshape2;
      shape_tensor2 -> Reshape2;
      Reshape2 -> reshaped_preds;

      reshaped_preds2 [shape=box label="reshaped_preds2" fontsize=10];
      Reshape6 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape6)" fontsize=10];
      preds2 -> Reshape6;
      shape_tensor2 -> Reshape6;
      Reshape6 -> reshaped_preds2;

      reshaped_preds1 [shape=box label="reshaped_preds1" fontsize=10];
      Reshape4 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape4)" fontsize=10];
      preds1 -> Reshape4;
      shape_tensor2 -> Reshape4;
      Reshape4 -> reshaped_preds1;

      Concat [shape=box style="filled,rounded" color=orange label="Concat\n(Concat)\naxis=1" fontsize=10];
      reshaped_preds -> Concat;
      reshaped_preds1 -> Concat;
      reshaped_preds2 -> Concat;
      Concat -> label;
    }