

.. _l-MultiOutputClassifier-~m-label-logreg-zipmap:False-o15:

MultiOutputClassifier - ~m-label - logreg - {'zipmap': False}
=============================================================

Fitted on a problem type *~m-label*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.multioutput.MultiOutputClassifier'>={'zipmap': False}``.

::

        MultiOutputClassifier(estimator=LogisticRegression(random_state=0,
                                                       solver='liblinear'),
                          n_jobs=8)

+----------------------------------+----------+
| index                            | 0        |
+==================================+==========+
| skl_nop                          | 4        |
+----------------------------------+----------+
| skl_ncoef                        | 3        |
+----------------------------------+----------+
| skl_nlin                         | 3        |
+----------------------------------+----------+
| onx_size                         | 1652     |
+----------------------------------+----------+
| onx_nnodes                       | 11       |
+----------------------------------+----------+
| onx_ninits                       | 1        |
+----------------------------------+----------+
| onx_doc_string                   |          |
+----------------------------------+----------+
| onx_ir_version                   | 8        |
+----------------------------------+----------+
| onx_domain                       | ai.onnx  |
+----------------------------------+----------+
| onx_model_version                | 0        |
+----------------------------------+----------+
| onx_producer_name                | skl2onnx |
+----------------------------------+----------+
| onx_producer_version             | 1.11.1   |
+----------------------------------+----------+
| onx_                             | 15       |
+----------------------------------+----------+
| onx_ai.onnx.ml                   | 1        |
+----------------------------------+----------+
| onx_op_Reshape                   | 3        |
+----------------------------------+----------+
| onx_size_optim                   | 1652     |
+----------------------------------+----------+
| onx_nnodes_optim                 | 11       |
+----------------------------------+----------+
| onx_ninits_optim                 | 1        |
+----------------------------------+----------+
| fit_estimators_.size             | 3        |
+----------------------------------+----------+
| fit_estimators_.intercept_.shape | 1        |
+----------------------------------+----------+
| fit_estimators_.classes_.shape   | 2        |
+----------------------------------+----------+
| fit_estimators_.coef_.shape      | (1, 4)   |
+----------------------------------+----------+
| fit_estimators_.n_iter_.shape    | 1        |
+----------------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0, 3))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\n[float()]" fontsize=10];

      Re_Reshapecst [shape=box label="Re_Reshapecst\nint64((2,))\n[-1  1]" fontsize=10];

      label2 [shape=box label="label2" fontsize=10];
      probability_tensor1 [shape=box label="probability_tensor1" fontsize=10];
      LinearClassifier1 [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier1)\nclasslabels_ints=[0 1]\ncoefficients=[-0.54714024  1.21...\nintercepts=[-0.84863716  0.8486...\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LinearClassifier1;
      LinearClassifier1 -> label2;
      LinearClassifier1 -> probability_tensor1;

      label3 [shape=box label="label3" fontsize=10];
      probability_tensor2 [shape=box label="probability_tensor2" fontsize=10];
      LinearClassifier2 [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier2)\nclasslabels_ints=[0 1]\ncoefficients=[ 1.5634936  -0.16...\nintercepts=[ 0.951305 -0.951305...\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LinearClassifier2;
      LinearClassifier2 -> label3;
      LinearClassifier2 -> probability_tensor2;

      label1 [shape=box label="label1" fontsize=10];
      probability_tensor [shape=box label="probability_tensor" fontsize=10];
      LinearClassifier [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier)\nclasslabels_ints=[0 1]\ncoefficients=[-0.2891426 -0.935...\nintercepts=[ 0.6001405 -0.60014...\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LinearClassifier;
      LinearClassifier -> label1;
      LinearClassifier -> probability_tensor;

      probabilities3 [shape=box label="probabilities3" fontsize=10];
      Normalizer2 [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer2)\nnorm=b'L1'" fontsize=10];
      probability_tensor2 -> Normalizer2;
      Normalizer2 -> probabilities3;

      probabilities1 [shape=box label="probabilities1" fontsize=10];
      Normalizer [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer)\nnorm=b'L1'" fontsize=10];
      probability_tensor -> Normalizer;
      Normalizer -> probabilities1;

      probabilities2 [shape=box label="probabilities2" fontsize=10];
      Normalizer1 [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer1)\nnorm=b'L1'" fontsize=10];
      probability_tensor1 -> Normalizer1;
      Normalizer1 -> probabilities2;

      Re_reshaped02 [shape=box label="Re_reshaped02" fontsize=10];
      Re_Reshape1 [shape=box style="filled,rounded" color=orange label="Reshape\n(Re_Reshape1)\nallowzero=0" fontsize=10];
      label2 -> Re_Reshape1;
      Re_Reshapecst -> Re_Reshape1;
      Re_Reshape1 -> Re_reshaped02;

      Re_reshaped03 [shape=box label="Re_reshaped03" fontsize=10];
      Re_Reshape2 [shape=box style="filled,rounded" color=orange label="Reshape\n(Re_Reshape2)\nallowzero=0" fontsize=10];
      label3 -> Re_Reshape2;
      Re_Reshapecst -> Re_Reshape2;
      Re_Reshape2 -> Re_reshaped03;

      Re_reshaped0 [shape=box label="Re_reshaped0" fontsize=10];
      Re_Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Re_Reshape)\nallowzero=0" fontsize=10];
      label1 -> Re_Reshape;
      Re_Reshapecst -> Re_Reshape;
      Re_Reshape -> Re_reshaped0;

      Co_Concat [shape=box style="filled,rounded" color=orange label="Concat\n(Co_Concat)\naxis=1" fontsize=10];
      Re_reshaped0 -> Co_Concat;
      Re_reshaped02 -> Co_Concat;
      Re_reshaped03 -> Co_Concat;
      Co_Concat -> label;

      Se_SequenceConstruct [shape=box style="filled,rounded" color=orange label="SequenceConstruct\n(Se_SequenceConstruct)" fontsize=10];
      probabilities1 -> Se_SequenceConstruct;
      probabilities2 -> Se_SequenceConstruct;
      probabilities3 -> Se_SequenceConstruct;
      Se_SequenceConstruct -> probabilities;
    }