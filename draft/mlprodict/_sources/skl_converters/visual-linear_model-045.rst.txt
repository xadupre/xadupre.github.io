

.. _l-LogisticRegression-m-cl-liblinear-onnx-o15:

LogisticRegression - m-cl - liblinear - onnx
============================================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``onnx``.

::

        LogisticRegression(n_jobs=8, random_state=0, solver='liblinear')

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| skl_ncoef            | 3        |
+----------------------+----------+
| skl_nlin             | 1        |
+----------------------+----------+
| onx_size             | 681      |
+----------------------+----------+
| onx_nnodes           | 4        |
+----------------------+----------+
| onx_ninits           | 0        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11.1   |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_                 | 9        |
+----------------------+----------+
| onx_op_Cast          | 1        |
+----------------------+----------+
| onx_op_ZipMap        | 1        |
+----------------------+----------+
| onx_size_optim       | 681      |
+----------------------+----------+
| onx_nnodes_optim     | 4        |
+----------------------+----------+
| onx_ninits_optim     | 0        |
+----------------------+----------+
| fit_classes_.shape   | 3        |
+----------------------+----------+
| fit_coef_.shape      | (3, 4)   |
+----------------------+----------+
| fit_intercept_.shape | 3        |
+----------------------+----------+
| fit_n_iter_.shape    | 1        |
+----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'float', 'shape': }}]" fontsize=10];


      label [shape=box label="label" fontsize=10];
      probability_tensor [shape=box label="probability_tensor" fontsize=10];
      LinearClassifier [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier)\nclasslabels_ints=[0 1 2]\ncoefficients=[ 0.45876738  1.29...\nintercepts=[ 0.28357968  0.8646...\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LinearClassifier;
      LinearClassifier -> label;
      LinearClassifier -> probability_tensor;

      probabilities [shape=box label="probabilities" fontsize=10];
      Normalizer [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer)\nnorm=b'L1'" fontsize=10];
      probability_tensor -> Normalizer;
      Normalizer -> probabilities;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      label -> Cast;
      Cast -> output_label;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1 2]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;
    }