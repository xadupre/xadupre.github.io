

.. _l-RidgeClassifier-~b-cl-nop-default-zipmap:False-o15:

RidgeClassifier - ~b-cl-nop - default - {'zipmap': False}
=========================================================

Fitted on a problem type *~b-cl-nop*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .
Model was converted with additional parameter: ``<class 'sklearn.linear_model._ridge.RidgeClassifier'>={'zipmap': False}``.

::

        RidgeClassifier(random_state=0)

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| skl_ncoef            | 1        |
+----------------------+----------+
| skl_nlin             | 1        |
+----------------------+----------+
| onx_size             | 545      |
+----------------------+----------+
| onx_nnodes           | 2        |
+----------------------+----------+
| onx_ninits           | 1        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11.1   |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_                 | 15       |
+----------------------+----------+
| onx_size_optim       | 545      |
+----------------------+----------+
| onx_nnodes_optim     | 2        |
+----------------------+----------+
| onx_ninits_optim     | 1        |
+----------------------+----------+
| fit_coef_.shape      | (1, 4)   |
+----------------------+----------+
| fit_intercept_.shape | 1        |
+----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 2))" fontsize=10];

      positive_class_index [shape=box label="positive_class_index\nint64(())\n1" fontsize=10];

      raw_scores_tensor [shape=box label="raw_scores_tensor" fontsize=10];
      LinearClassifier [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier)\nclasslabels_ints=[0 1]\ncoefficients=[ 0.10896477  0.33...\nintercepts=[-0.21448028  0.2144...\nmulti_class=0\npost_transform=b'NONE'" fontsize=10];
      X -> LinearClassifier;
      LinearClassifier -> label;
      LinearClassifier -> raw_scores_tensor;

      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      raw_scores_tensor -> ArrayFeatureExtractor;
      positive_class_index -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> probabilities;
    }