

.. _l-NuSVC-~b-cl-64-prob--o15:

NuSVC - ~b-cl-64 - prob - 
==========================

Fitted on a problem type *~b-cl-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        NuSVC(probability=True, random_state=0)

+----------------------------+----------+
| index                      | 0        |
+============================+==========+
| skl_nop                    | 1        |
+----------------------------+----------+
| onx_size                   | 2061     |
+----------------------------+----------+
| onx_nnodes                 | 4        |
+----------------------------+----------+
| onx_ninits                 | 0        |
+----------------------------+----------+
| onx_doc_string             |          |
+----------------------------+----------+
| onx_ir_version             | 8        |
+----------------------------+----------+
| onx_domain                 | ai.onnx  |
+----------------------------+----------+
| onx_model_version          | 0        |
+----------------------------+----------+
| onx_producer_name          | skl2onnx |
+----------------------------+----------+
| onx_producer_version       | 1.11     |
+----------------------------+----------+
| onx_ai.onnx.ml             | 1        |
+----------------------------+----------+
| onx_                       | 9        |
+----------------------------+----------+
| onx_mlprodict              | 1        |
+----------------------------+----------+
| onx_op_Cast                | 2        |
+----------------------------+----------+
| onx_op_ZipMap              | 1        |
+----------------------------+----------+
| onx_size_optim             | 2061     |
+----------------------------+----------+
| onx_nnodes_optim           | 4        |
+----------------------------+----------+
| onx_ninits_optim           | 0        |
+----------------------------+----------+
| fit_class_weight_.shape    | 2        |
+----------------------------+----------+
| fit_classes_.shape         | 2        |
+----------------------------+----------+
| fit_support_.shape         | 56       |
+----------------------------+----------+
| fit_support_vectors_.shape | (56, 4)  |
+----------------------------+----------+
| fit_dual_coef_.shape       | (1, 56)  |
+----------------------------+----------+
| fit_intercept_.shape       | 1        |
+----------------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'double', 'shape': }}]" fontsize=10];


      label [shape=box label="label" fontsize=10];
      SVM02 [shape=box label="SVM02" fontsize=10];
      SVMc [shape=box style="filled,rounded" color=orange label="SVMClassifierDouble\n(SVMc)\nclasslabels_ints=[0 1]\ncoefficients=[ 0.08307357  0.08...\nkernel_params=[0.06311981 0.   ...\nkernel_type=b'RBF'\npost_transform=b'NONE'\nprob_a=[-4.612284]\nprob_b=[0.5148242]\nrho=[-0.04041703]\nsupport_vectors=[ 5.1691985e+00...\nvectors_per_class=[28 28]" fontsize=10];
      X -> SVMc;
      SVMc -> label;
      SVMc -> SVM02;

      probabilities [shape=box label="probabilities" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=11" fontsize=10];
      SVM02 -> Cast;
      Cast -> probabilities;

      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=7" fontsize=10];
      label -> Cast1;
      Cast1 -> output_label;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;
    }