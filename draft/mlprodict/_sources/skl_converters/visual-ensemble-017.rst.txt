

.. _l-BaggingClassifier-m-cl-default--o15:

BaggingClassifier - m-cl - default - 
=====================================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        BaggingClassifier(n_jobs=8, random_state=0)

+---------------------------------------+----------+
| index                                 | 0        |
+=======================================+==========+
| skl_nop                               | 11       |
+---------------------------------------+----------+
| skl_nnodes                            | 158      |
+---------------------------------------+----------+
| skl_ntrees                            | 10       |
+---------------------------------------+----------+
| skl_max_depth                         | 6        |
+---------------------------------------+----------+
| onx_size                              | 13638    |
+---------------------------------------+----------+
| onx_nnodes                            | 29       |
+---------------------------------------+----------+
| onx_ninits                            | 3        |
+---------------------------------------+----------+
| onx_doc_string                        |          |
+---------------------------------------+----------+
| onx_ir_version                        | 8        |
+---------------------------------------+----------+
| onx_domain                            | ai.onnx  |
+---------------------------------------+----------+
| onx_model_version                     | 0        |
+---------------------------------------+----------+
| onx_producer_name                     | skl2onnx |
+---------------------------------------+----------+
| onx_producer_version                  | 1.11.1   |
+---------------------------------------+----------+
| onx_                                  | 15       |
+---------------------------------------+----------+
| onx_ai.onnx.ml                        | 1        |
+---------------------------------------+----------+
| onx_op_Cast                           | 3        |
+---------------------------------------+----------+
| onx_op_ZipMap                         | 1        |
+---------------------------------------+----------+
| onx_op_Reshape                        | 11       |
+---------------------------------------+----------+
| onx_size_optim                        | 13638    |
+---------------------------------------+----------+
| onx_nnodes_optim                      | 29       |
+---------------------------------------+----------+
| onx_ninits_optim                      | 3        |
+---------------------------------------+----------+
| fit_classes_.shape                    | 3        |
+---------------------------------------+----------+
| fit_n_classes_                        | 3        |
+---------------------------------------+----------+
| fit_n_features_                       | 4        |
+---------------------------------------+----------+
| fit_estimators_.size                  | 10       |
+---------------------------------------+----------+
| fit_estimators_.n_classes_            | 3        |
+---------------------------------------+----------+
| fit_estimators_.sum|tree_.node_count  | 158      |
+---------------------------------------+----------+
| fit_estimators_.classes_.shape        | 3        |
+---------------------------------------+----------+
| fit_estimators_.sum|tree_.leave_count | 84       |
+---------------------------------------+----------+
| fit_estimators_.n_features_           | 4        |
+---------------------------------------+----------+
| fit_estimators_.max|tree_.max_depth   | 6        |
+---------------------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'float', 'shape': }}]" fontsize=10];

      classes [shape=box label="classes\nint32((3,))\n[0 1 2]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((3,))\n[ 1 -1  3]" fontsize=10];
      shape_tensor10 [shape=box label="shape_tensor10\nint64((1,))\n[-1]" fontsize=10];

      label_9 [shape=box label="label_9" fontsize=10];
      proba_9 [shape=box label="proba_9" fontsize=10];
      TreeEnsembleClassifier9 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier9)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 10  9...\nnodes_featureids=[2 0 2 3 3 0 0...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.6641772 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier9;
      TreeEnsembleClassifier9 -> label_9;
      TreeEnsembleClassifier9 -> proba_9;

      label_4 [shape=box label="label_4" fontsize=10];
      proba_4 [shape=box label="proba_4" fontsize=10];
      TreeEnsembleClassifier4 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier4)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 2  2  2  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[10  3  0  9...\nnodes_featureids=[2 2 0 3 3 0 3...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'BR...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[1 2 0 4 5 0 ...\nnodes_values=[4.849488  2.54898...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier4;
      TreeEnsembleClassifier4 -> label_4;
      TreeEnsembleClassifier4 -> proba_4;

      label_2 [shape=box label="label_2" fontsize=10];
      proba_2 [shape=box label="proba_2" fontsize=10];
      TreeEnsembleClassifier2 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier2)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 10  9...\nnodes_featureids=[2 0 2 3 3 0 3...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.4079013 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier2;
      TreeEnsembleClassifier2 -> label_2;
      TreeEnsembleClassifier2 -> proba_2;

      label_5 [shape=box label="label_5" fontsize=10];
      proba_5 [shape=box label="proba_5" fontsize=10];
      TreeEnsembleClassifier5 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier5)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 10  9...\nnodes_featureids=[2 0 2 3 3 0 3...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.7056267 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier5;
      TreeEnsembleClassifier5 -> label_5;
      TreeEnsembleClassifier5 -> proba_5;

      label_8 [shape=box label="label_8" fontsize=10];
      proba_8 [shape=box label="proba_8" fontsize=10];
      TreeEnsembleClassifier8 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier8)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 12 11...\nnodes_featureids=[2 0 2 3 3 0 1...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.5489838 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier8;
      TreeEnsembleClassifier8 -> label_8;
      TreeEnsembleClassifier8 -> proba_8;

      label_1 [shape=box label="label_1" fontsize=10];
      proba_1 [shape=box label="proba_1" fontsize=10];
      TreeEnsembleClassifier1 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier1)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 12 11...\nnodes_featureids=[2 0 2 3 3 0 1...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.4172986 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier1;
      TreeEnsembleClassifier1 -> label_1;
      TreeEnsembleClassifier1 -> proba_1;

      label_3 [shape=box label="label_3" fontsize=10];
      proba_3 [shape=box label="proba_3" fontsize=10];
      TreeEnsembleClassifier3 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier3)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 10  9...\nnodes_featureids=[2 0 2 3 3 0 3...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.4861827 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier3;
      TreeEnsembleClassifier3 -> label_3;
      TreeEnsembleClassifier3 -> proba_3;

      label_7 [shape=box label="label_7" fontsize=10];
      proba_7 [shape=box label="proba_7" fontsize=10];
      TreeEnsembleClassifier7 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier7)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 12 11...\nnodes_featureids=[2 0 2 3 3 0 3...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.5489838 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier7;
      TreeEnsembleClassifier7 -> label_7;
      TreeEnsembleClassifier7 -> proba_7;

      label_0 [shape=box label="label_0" fontsize=10];
      proba_0 [shape=box label="proba_0" fontsize=10];
      TreeEnsembleClassifier [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 10  9...\nnodes_featureids=[2 0 2 3 3 0 1...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.7556252 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier;
      TreeEnsembleClassifier -> label_0;
      TreeEnsembleClassifier -> proba_0;

      label_6 [shape=box label="label_6" fontsize=10];
      proba_6 [shape=box label="proba_6" fontsize=10];
      TreeEnsembleClassifier6 [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier6)\nclass_ids=[0 1 2 0 1 2 0 1 2 0 ...\nclass_nodeids=[ 1  1  1  5  5  ...\nclass_treeids=[0 0 0 0 0 0 0 0 ...\nclass_weights=[1. 0. 0. 0. 1. 0...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[ 2  0 10  9...\nnodes_featureids=[2 0 2 3 3 0 0...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  3  4  ...\nnodes_treeids=[0 0 0 0 0 0 0 0 ...\nnodes_truenodeids=[ 1  0  3  4 ...\nnodes_values=[2.532492  0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier6;
      TreeEnsembleClassifier6 -> label_6;
      TreeEnsembleClassifier6 -> proba_6;

      reshaped_proba [shape=box label="reshaped_proba" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      proba_0 -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_proba;

      reshaped_proba3 [shape=box label="reshaped_proba3" fontsize=10];
      Reshape3 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape3)" fontsize=10];
      proba_3 -> Reshape3;
      shape_tensor -> Reshape3;
      Reshape3 -> reshaped_proba3;

      reshaped_proba2 [shape=box label="reshaped_proba2" fontsize=10];
      Reshape2 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape2)" fontsize=10];
      proba_2 -> Reshape2;
      shape_tensor -> Reshape2;
      Reshape2 -> reshaped_proba2;

      reshaped_proba4 [shape=box label="reshaped_proba4" fontsize=10];
      Reshape4 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape4)" fontsize=10];
      proba_4 -> Reshape4;
      shape_tensor -> Reshape4;
      Reshape4 -> reshaped_proba4;

      reshaped_proba5 [shape=box label="reshaped_proba5" fontsize=10];
      Reshape5 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape5)" fontsize=10];
      proba_5 -> Reshape5;
      shape_tensor -> Reshape5;
      Reshape5 -> reshaped_proba5;

      reshaped_proba6 [shape=box label="reshaped_proba6" fontsize=10];
      Reshape6 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape6)" fontsize=10];
      proba_6 -> Reshape6;
      shape_tensor -> Reshape6;
      Reshape6 -> reshaped_proba6;

      reshaped_proba7 [shape=box label="reshaped_proba7" fontsize=10];
      Reshape7 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape7)" fontsize=10];
      proba_7 -> Reshape7;
      shape_tensor -> Reshape7;
      Reshape7 -> reshaped_proba7;

      reshaped_proba8 [shape=box label="reshaped_proba8" fontsize=10];
      Reshape8 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape8)" fontsize=10];
      proba_8 -> Reshape8;
      shape_tensor -> Reshape8;
      Reshape8 -> reshaped_proba8;

      reshaped_proba9 [shape=box label="reshaped_proba9" fontsize=10];
      Reshape9 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape9)" fontsize=10];
      proba_9 -> Reshape9;
      shape_tensor -> Reshape9;
      Reshape9 -> reshaped_proba9;

      reshaped_proba1 [shape=box label="reshaped_proba1" fontsize=10];
      Reshape1 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape1)" fontsize=10];
      proba_1 -> Reshape1;
      shape_tensor -> Reshape1;
      Reshape1 -> reshaped_proba1;

      merged_proba [shape=box label="merged_proba" fontsize=10];
      Concat [shape=box style="filled,rounded" color=orange label="Concat\n(Concat)\naxis=0" fontsize=10];
      reshaped_proba -> Concat;
      reshaped_proba1 -> Concat;
      reshaped_proba2 -> Concat;
      reshaped_proba3 -> Concat;
      reshaped_proba4 -> Concat;
      reshaped_proba5 -> Concat;
      reshaped_proba6 -> Concat;
      reshaped_proba7 -> Concat;
      reshaped_proba8 -> Concat;
      reshaped_proba9 -> Concat;
      Concat -> merged_proba;

      probabilities [shape=box label="probabilities" fontsize=10];
      ReduceMean [shape=box style="filled,rounded" color=orange label="ReduceMean\n(ReduceMean)\naxes=[0]\nkeepdims=0" fontsize=10];
      merged_proba -> ReduceMean;
      ReduceMean -> probabilities;

      argmax_output [shape=box label="argmax_output" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      probabilities -> ArgMax;
      ArgMax -> argmax_output;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1 2]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      argmax_output -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> array_feature_extractor_result;

      cast_result [shape=box label="cast_result" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      array_feature_extractor_result -> Cast;
      Cast -> cast_result;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape10 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape10)" fontsize=10];
      cast_result -> Reshape10;
      shape_tensor10 -> Reshape10;
      Reshape10 -> reshaped_result;

      label [shape=box label="label" fontsize=10];
      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=7" fontsize=10];
      reshaped_result -> Cast1;
      Cast1 -> label;

      Cast2 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast2)\nto=7" fontsize=10];
      label -> Cast2;
      Cast2 -> output_label;
    }