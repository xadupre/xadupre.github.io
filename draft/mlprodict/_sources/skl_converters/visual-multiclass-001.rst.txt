

.. _l-OneVsRestClassifier-~b-cl-64-logreg-zipmap:False-o15:

OneVsRestClassifier - ~b-cl-64 - logreg - {'zipmap': False}
===========================================================

Fitted on a problem type *~b-cl-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.multiclass.OneVsOneClassifier'>={'zipmap': False}``.

::

        OneVsRestClassifier(estimator=LogisticRegression(random_state=0,
                                                     solver='liblinear'),
                        n_jobs=8)

+----------------------------------+----------+
| index                            | 0        |
+==================================+==========+
| skl_nop                          | 2        |
+----------------------------------+----------+
| skl_ncoef                        | 2        |
+----------------------------------+----------+
| skl_nlin                         | 2        |
+----------------------------------+----------+
| onx_size                         | 1918     |
+----------------------------------+----------+
| onx_nnodes                       | 23       |
+----------------------------------+----------+
| onx_ninits                       | 7        |
+----------------------------------+----------+
| onx_doc_string                   |          |
+----------------------------------+----------+
| onx_ir_version                   | 8        |
+----------------------------------+----------+
| onx_domain                       | ai.onnx  |
+----------------------------------+----------+
| onx_model_version                | 0        |
+----------------------------------+----------+
| onx_producer_name                | skl2onnx |
+----------------------------------+----------+
| onx_producer_version             | 1.11.1   |
+----------------------------------+----------+
| onx_                             | 15       |
+----------------------------------+----------+
| onx_ai.onnx.ml                   | 1        |
+----------------------------------+----------+
| onx_op_Cast                      | 5        |
+----------------------------------+----------+
| onx_op_ZipMap                    | 1        |
+----------------------------------+----------+
| onx_op_Reshape                   | 2        |
+----------------------------------+----------+
| onx_size_optim                   | 1552     |
+----------------------------------+----------+
| onx_nnodes_optim                 | 18       |
+----------------------------------+----------+
| onx_ninits_optim                 | 7        |
+----------------------------------+----------+
| fit_classes_.shape               | 2        |
+----------------------------------+----------+
| fit_n_classes_                   | 2        |
+----------------------------------+----------+
| fit_estimators_.size             | 1        |
+----------------------------------+----------+
| fit_estimators_.n_iter_.shape    | 1        |
+----------------------------------+----------+
| fit_estimators_.coef_.shape      | (1, 4)   |
+----------------------------------+----------+
| fit_estimators_.classes_.shape   | 2        |
+----------------------------------+----------+
| fit_estimators_.intercept_.shape | 1        |
+----------------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'double', 'shape': }}]" fontsize=10];

      starts [shape=box label="starts\nint64((1,))\n[1]" fontsize=10];
      ends [shape=box label="ends\nint64((1,))\n[2]" fontsize=10];
      unit_float_tensor [shape=box label="unit_float_tensor\nfloat64(())\n1.0" fontsize=10];
      classes [shape=box label="classes\nint32((2,))\n[0 1]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((1,))\n[-1]" fontsize=10];
      coef [shape=box label="coef\nfloat64((4, 2))\n[[ 0.45876741 -0.45876741]\n [ 1.29302622 -1.29302622]\n [-2.30693933  2.30693933]\n [-0.6970415   0.6970415 ]]" fontsize=10];
      intercept [shape=box label="intercept\nfloat64((1, 2))\n[[ 0.28357965 -0.28357965]]" fontsize=10];

      multiplied [shape=box label="multiplied" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      X -> MatMul;
      coef -> MatMul;
      MatMul -> multiplied;

      raw_scores [shape=box label="raw_scores" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      multiplied -> Add;
      intercept -> Add;
      Add -> raw_scores;

      raw_scoressig [shape=box label="raw_scoressig" fontsize=10];
      Sigmoid [shape=box style="filled,rounded" color=orange label="Sigmoid\n(Sigmoid)" fontsize=10];
      raw_scores -> Sigmoid;
      Sigmoid -> raw_scoressig;

      label1 [shape=box label="label1" fontsize=10];
      ArgMax1 [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax1)\naxis=1" fontsize=10];
      raw_scores -> ArgMax1;
      ArgMax1 -> label1;

      array_feature_extractor_result1 [shape=box label="array_feature_extractor_result1" fontsize=10];
      ArrayFeatureExtractor1 [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor1)" fontsize=10];
      classes -> ArrayFeatureExtractor1;
      label1 -> ArrayFeatureExtractor1;
      ArrayFeatureExtractor1 -> array_feature_extractor_result1;

      norm_abs [shape=box label="norm_abs" fontsize=10];
      Abs [shape=box style="filled,rounded" color=orange label="Abs\n(Abs)" fontsize=10];
      raw_scoressig -> Abs;
      Abs -> norm_abs;

      cast2_result1 [shape=box label="cast2_result1" fontsize=10];
      Cast3 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast3)\nto=11" fontsize=10];
      array_feature_extractor_result1 -> Cast3;
      Cast3 -> cast2_result1;

      norm [shape=box label="norm" fontsize=10];
      ReduceSum [shape=box style="filled,rounded" color=orange label="ReduceSum\n(ReduceSum)\nkeepdims=1" fontsize=10];
      norm_abs -> ReduceSum;
      starts -> ReduceSum;
      ReduceSum -> norm;

      proba_0 [shape=box label="proba_0" fontsize=10];
      NormalizerNorm [shape=box style="filled,rounded" color=orange label="Div\n(NormalizerNorm)" fontsize=10];
      raw_scoressig -> NormalizerNorm;
      norm -> NormalizerNorm;
      NormalizerNorm -> proba_0;

      reshaped_result1 [shape=box label="reshaped_result1" fontsize=10];
      Reshape1 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape1)" fontsize=10];
      cast2_result1 -> Reshape1;
      shape_tensor -> Reshape1;
      Reshape1 -> reshaped_result1;

      label_0 [shape=box label="label_0" fontsize=10];
      Cast4 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast4)\nto=7" fontsize=10];
      reshaped_result1 -> Cast4;
      Cast4 -> label_0;

      probY_0 [shape=box label="probY_0" fontsize=10];
      Slice [shape=box style="filled,rounded" color=orange label="Slice\n(Slice)" fontsize=10];
      proba_0 -> Slice;
      starts -> Slice;
      ends -> Slice;
      starts -> Slice;
      Slice -> probY_0;

      concatenated [shape=box label="concatenated" fontsize=10];
      Concat [shape=box style="filled,rounded" color=orange label="Concat\n(Concat)\naxis=1" fontsize=10];
      probY_0 -> Concat;
      Concat -> concatenated;

      zeroth_col [shape=box label="zeroth_col" fontsize=10];
      Sub [shape=box style="filled,rounded" color=orange label="Sub\n(Sub)" fontsize=10];
      unit_float_tensor -> Sub;
      concatenated -> Sub;
      Sub -> zeroth_col;

      merged_prob [shape=box label="merged_prob" fontsize=10];
      Concat1 [shape=box style="filled,rounded" color=orange label="Concat\n(Concat1)\naxis=1" fontsize=10];
      zeroth_col -> Concat1;
      concatenated -> Concat1;
      Concat1 -> merged_prob;

      probabilities [shape=box label="probabilities" fontsize=10];
      LpNormalization [shape=box style="filled,rounded" color=orange label="LpNormalization\n(LpNormalization)\naxis=1\np=1" fontsize=10];
      merged_prob -> LpNormalization;
      LpNormalization -> probabilities;

      label_name [shape=box label="label_name" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      merged_prob -> ArgMax;
      ArgMax -> label_name;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      label_name -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> array_feature_extractor_result;

      cast2_result [shape=box label="cast2_result" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=11" fontsize=10];
      array_feature_extractor_result -> Cast;
      Cast -> cast2_result;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      cast2_result -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_result;

      label [shape=box label="label" fontsize=10];
      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=7" fontsize=10];
      reshaped_result -> Cast1;
      Cast1 -> label;

      Cast2 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast2)\nto=7" fontsize=10];
      label -> Cast2;
      Cast2 -> output_label;
    }