

.. _l-XGBRegressor-~b-reg-64-default--o15:

XGBRegressor - ~b-reg-64 - default - 
=====================================

Fitted on a problem type *~b-reg-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .


::

        XGBRegressor(base_score=0.5, booster='gbtree', colsample_bylevel=1,
                 colsample_bynode=1, colsample_bytree=1, enable_categorical=False,
                 gamma=0, gpu_id=-1, importance_type=None,
                 interaction_constraints='', learning_rate=0.300000012,
                 max_delta_step=0, max_depth=6, min_child_weight=1, missing=nan,
                 monotone_constraints='()', n_estimators=100, n_jobs=8,
                 num_parallel_tree=1, predictor='auto', random_state=0, reg_alpha=0,
                 reg_lambda=1, scale_pos_weight=1, subsample=1, tree_method='exact',
                 validate_parameters=1, verbosity=None)

+----------------------+------------------+
| index                | 0                |
+======================+==================+
| skl_nop              | 1                |
+----------------------+------------------+
| onx_size             | 81529            |
+----------------------+------------------+
| onx_nnodes           | 1                |
+----------------------+------------------+
| onx_ninits           | 0                |
+----------------------+------------------+
| onx_doc_string       |                  |
+----------------------+------------------+
| onx_ir_version       | 8                |
+----------------------+------------------+
| onx_domain           | ai.onnx          |
+----------------------+------------------+
| onx_model_version    | 0                |
+----------------------+------------------+
| onx_producer_name    | skl2onnx         |
+----------------------+------------------+
| onx_producer_version | 1.11.1           |
+----------------------+------------------+
| onx_mlprodict        | 1                |
+----------------------+------------------+
| onx_                 | 15               |
+----------------------+------------------+
| onx_size_optim       | 81529            |
+----------------------+------------------+
| onx_nnodes_optim     | 1                |
+----------------------+------------------+
| onx_ninits_optim     | 0                |
+----------------------+------------------+
| fit_objective        | reg:squarederror |
+----------------------+------------------+
| fit_estimators_.size | 100              |
+----------------------+------------------+
| fit_node_count       | 2602             |
+----------------------+------------------+
| fit_ntrees           | 100              |
+----------------------+------------------+
| fit_leave_count      | 1351             |
+----------------------+------------------+
| fit_mode_count       | 2                |
+----------------------+------------------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      variable [shape=box color=green label="variable\ndouble((0, 1))" fontsize=10];


      TreeEnsembleRegressorDouble [shape=box style="filled,rounded" color=orange label="TreeEnsembleRegressorDouble\n(TreeEnsembleRegressorDouble)\nbase_values=[0.5]\nn_targets=1\nnodes_falsenodeids=[16 13  4 .....\nnodes_featureids=[2 2 1 ... 0 0...\nnodes_missing_value_tracks_true=[1 1 1 ......\nnodes_modes=[b'BRANCH_LT' b'BRA...\nnodes_nodeids=[0 1 2 ... 0 0 0]\nnodes_treeids=[ 0  0  0 ... 97 ...\nnodes_truenodeids=[1 2 3 ... 0 ...\nnodes_values=[2.548984  1.73063...\npost_transform=b'NONE'\ntarget_ids=[0 0 0 ... 0 0 0]\ntarget_nodeids=[3 6 7 ... 0 0 0...\ntarget_treeids=[ 0  0  0 ... 97...\ntarget_weights=[-2.1000002e-02 ..." fontsize=10];
      X -> TreeEnsembleRegressorDouble;
      TreeEnsembleRegressorDouble -> variable;
    }