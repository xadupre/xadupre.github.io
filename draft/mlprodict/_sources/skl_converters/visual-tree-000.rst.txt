

.. _l-DecisionTreeClassifier-b-cl-default-zipmap:False-o15:

DecisionTreeClassifier - b-cl - default - {'zipmap': False}
===========================================================

Fitted on a problem type *b-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.tree._classes.DecisionTreeClassifier'>={'zipmap': False}``.

::

        DecisionTreeClassifier(random_state=0)

+-----------------------+----------+
| index                 | 0        |
+=======================+==========+
| skl_nop               | 1        |
+-----------------------+----------+
| skl_nnodes            | 3        |
+-----------------------+----------+
| skl_ntrees            | 1        |
+-----------------------+----------+
| skl_max_depth         | 1        |
+-----------------------+----------+
| onx_size              | 707      |
+-----------------------+----------+
| onx_nnodes            | 1        |
+-----------------------+----------+
| onx_ninits            | 0        |
+-----------------------+----------+
| onx_doc_string        |          |
+-----------------------+----------+
| onx_ir_version        | 8        |
+-----------------------+----------+
| onx_domain            | ai.onnx  |
+-----------------------+----------+
| onx_model_version     | 0        |
+-----------------------+----------+
| onx_producer_name     | skl2onnx |
+-----------------------+----------+
| onx_producer_version  | 1.11.1   |
+-----------------------+----------+
| onx_ai.onnx.ml        | 1        |
+-----------------------+----------+
| onx_                  | 15       |
+-----------------------+----------+
| onx_size_optim        | 707      |
+-----------------------+----------+
| onx_nnodes_optim      | 1        |
+-----------------------+----------+
| onx_ninits_optim      | 0        |
+-----------------------+----------+
| fit_classes_.shape    | 2        |
+-----------------------+----------+
| fit_n_classes_        | 2        |
+-----------------------+----------+
| fit_n_features_       | 4        |
+-----------------------+----------+
| fit_tree_.node_count  | 3        |
+-----------------------+----------+
| fit_tree_.leave_count | 2        |
+-----------------------+----------+
| fit_tree_.max_depth   | 1        |
+-----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 2))" fontsize=10];


      TreeEnsembleClassifier [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier)\nclass_ids=[0 0]\nclass_nodeids=[1 2]\nclass_treeids=[0 0]\nclass_weights=[0. 1.]\nclasslabels_int64s=[0 1]\nnodes_falsenodeids=[2 0 0]\nnodes_featureids=[2 0 0]\nnodes_hitrates=[1. 1. 1.]\nnodes_missing_value_tracks_true=[0 0 0]\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[0 1 2]\nnodes_treeids=[0 0 0]\nnodes_truenodeids=[1 0 0]\nnodes_values=[2.5489838 0.     ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifier;
      TreeEnsembleClassifier -> label;
      TreeEnsembleClassifier -> probabilities;
    }