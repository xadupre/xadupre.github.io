

.. _l-GaussianNB-m-cl-default--o15:

GaussianNB - m-cl - default - 
==============================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        GaussianNB()

+------------------------+----------+
| index                  | 0        |
+========================+==========+
| skl_nop                | 1        |
+------------------------+----------+
| onx_size               | 1805     |
+------------------------+----------+
| onx_nnodes             | 19       |
+------------------------+----------+
| onx_ninits             | 11       |
+------------------------+----------+
| onx_doc_string         |          |
+------------------------+----------+
| onx_ir_version         | 8        |
+------------------------+----------+
| onx_domain             | ai.onnx  |
+------------------------+----------+
| onx_model_version      | 0        |
+------------------------+----------+
| onx_producer_name      | skl2onnx |
+------------------------+----------+
| onx_producer_version   | 1.11.1   |
+------------------------+----------+
| onx_                   | 13       |
+------------------------+----------+
| onx_ai.onnx.ml         | 1        |
+------------------------+----------+
| onx_op_Cast            | 3        |
+------------------------+----------+
| onx_op_ZipMap          | 1        |
+------------------------+----------+
| onx_op_Reshape         | 3        |
+------------------------+----------+
| onx_size_optim         | 1805     |
+------------------------+----------+
| onx_nnodes_optim       | 19       |
+------------------------+----------+
| onx_ninits_optim       | 11       |
+------------------------+----------+
| fit_classes_.shape     | 3        |
+------------------------+----------+
| fit_epsilon_.shape     | 1        |
+------------------------+----------+
| fit_theta_.shape       | (3, 4)   |
+------------------------+----------+
| fit_var_.shape         | (3, 4)   |
+------------------------+----------+
| fit_class_count_.shape | 3        |
+------------------------+----------+
| fit_class_prior_.shape | 3        |
+------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'float', 'shape': }}]" fontsize=10];

      classes [shape=box label="classes\nint32((3,))\n[0 1 2]" fontsize=10];
      theta [shape=box label="theta\nfloat32((1, 3, 4))\n[[[5.0592794  3.3980393  1.3656081  0.36579275]\n  ..." fontsize=10];
      sigma [shape=box label="sigma\nfloat32((1, 3, 4))\n[[[0.19725956 0.2030348  0.12801166 0.06933402]\n  ..." fontsize=10];
      jointi [shape=box label="jointi\nfloat32((1, 3))\n[[-1.1631508 -1.0549372 -1.0809127]]" fontsize=10];
      sigma_sum_log [shape=box label="sigma_sum_log\nfloat32((1, 3))\n[[ 0.2952789  -0.88625735 -0.82548994]]" fontsize=10];
      exponent [shape=box label="exponent\nfloat32(())\n2.0" fontsize=10];
      prod_operand [shape=box label="prod_operand\nfloat32(())\n0.5" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((3,))\n[-1  1  4]" fontsize=10];
      axis [shape=box label="axis\nint64((1,))\n[2]" fontsize=10];
      shape_tensor1 [shape=box label="shape_tensor1\nint64((2,))\n[-1  1]" fontsize=10];
      shape_tensor2 [shape=box label="shape_tensor2\nint64((1,))\n[-1]" fontsize=10];

      reshaped_input [shape=box label="reshaped_input" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      X -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_input;

      subtracted_input [shape=box label="subtracted_input" fontsize=10];
      Sub [shape=box style="filled,rounded" color=orange label="Sub\n(Sub)" fontsize=10];
      reshaped_input -> Sub;
      theta -> Sub;
      Sub -> subtracted_input;

      pow_result [shape=box label="pow_result" fontsize=10];
      Pow [shape=box style="filled,rounded" color=orange label="Pow\n(Pow)" fontsize=10];
      subtracted_input -> Pow;
      exponent -> Pow;
      Pow -> pow_result;

      div_result [shape=box label="div_result" fontsize=10];
      Div [shape=box style="filled,rounded" color=orange label="Div\n(Div)" fontsize=10];
      pow_result -> Div;
      sigma -> Div;
      Div -> div_result;

      reduced_sum [shape=box label="reduced_sum" fontsize=10];
      ReduceSum [shape=box style="filled,rounded" color=orange label="ReduceSum\n(ReduceSum)\nkeepdims=0" fontsize=10];
      div_result -> ReduceSum;
      axis -> ReduceSum;
      ReduceSum -> reduced_sum;

      mul_result [shape=box label="mul_result" fontsize=10];
      Mul [shape=box style="filled,rounded" color=orange label="Mul\n(Mul)" fontsize=10];
      reduced_sum -> Mul;
      prod_operand -> Mul;
      Mul -> mul_result;

      part_log_likelihood [shape=box label="part_log_likelihood" fontsize=10];
      Sub1 [shape=box style="filled,rounded" color=orange label="Sub\n(Sub1)" fontsize=10];
      sigma_sum_log -> Sub1;
      mul_result -> Sub1;
      Sub1 -> part_log_likelihood;

      sum_result [shape=box label="sum_result" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      jointi -> Add;
      part_log_likelihood -> Add;
      Add -> sum_result;

      argmax_output [shape=box label="argmax_output" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      sum_result -> ArgMax;
      ArgMax -> argmax_output;

      reduce_log_sum_exp_result [shape=box label="reduce_log_sum_exp_result" fontsize=10];
      ReduceLogSumExp [shape=box style="filled,rounded" color=orange label="ReduceLogSumExp\n(ReduceLogSumExp)\naxes=[1]\nkeepdims=0" fontsize=10];
      sum_result -> ReduceLogSumExp;
      ReduceLogSumExp -> reduce_log_sum_exp_result;

      reshaped_log_prob [shape=box label="reshaped_log_prob" fontsize=10];
      Reshape1 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape1)" fontsize=10];
      reduce_log_sum_exp_result -> Reshape1;
      shape_tensor1 -> Reshape1;
      Reshape1 -> reshaped_log_prob;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      argmax_output -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> array_feature_extractor_result;

      cast2_result [shape=box label="cast2_result" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=1" fontsize=10];
      array_feature_extractor_result -> Cast;
      Cast -> cast2_result;

      log_prob [shape=box label="log_prob" fontsize=10];
      Sub2 [shape=box style="filled,rounded" color=orange label="Sub\n(Sub2)" fontsize=10];
      sum_result -> Sub2;
      reshaped_log_prob -> Sub2;
      Sub2 -> log_prob;

      probabilities [shape=box label="probabilities" fontsize=10];
      Exp [shape=box style="filled,rounded" color=orange label="Exp\n(Exp)" fontsize=10];
      log_prob -> Exp;
      Exp -> probabilities;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape2 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape2)" fontsize=10];
      cast2_result -> Reshape2;
      shape_tensor2 -> Reshape2;
      Reshape2 -> reshaped_result;

      label [shape=box label="label" fontsize=10];
      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=7" fontsize=10];
      reshaped_result -> Cast1;
      Cast1 -> label;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1 2]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;

      Cast2 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast2)\nto=7" fontsize=10];
      label -> Cast2;
      Cast2 -> output_label;
    }