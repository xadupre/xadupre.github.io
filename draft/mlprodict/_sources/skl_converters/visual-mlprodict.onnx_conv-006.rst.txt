

.. _l-XGBClassifier-m-cl-default--o15:

XGBClassifier - m-cl - default - 
=================================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        XGBClassifier(base_score=0.5, booster='gbtree', colsample_bylevel=1,
                  colsample_bynode=1, colsample_bytree=1, enable_categorical=False,
                  gamma=0, gpu_id=-1, importance_type=None,
                  interaction_constraints='', learning_rate=0.300000012,
                  max_delta_step=0, max_depth=6, min_child_weight=1, missing=nan,
                  monotone_constraints='()', n_estimators=100, n_jobs=8,
                  num_parallel_tree=1, objective='multi:softprob', predictor='auto',
                  random_state=0, reg_alpha=0, reg_lambda=1, scale_pos_weight=None,
                  subsample=1, tree_method='exact', validate_parameters=1,
                  verbosity=None)

+----------------------+----------------+
| index                | 0              |
+======================+================+
| skl_nop              | 1              |
+----------------------+----------------+
| onx_size             | 43871          |
+----------------------+----------------+
| onx_nnodes           | 3              |
+----------------------+----------------+
| onx_ninits           | 0              |
+----------------------+----------------+
| onx_doc_string       |                |
+----------------------+----------------+
| onx_ir_version       | 8              |
+----------------------+----------------+
| onx_domain           | ai.onnx        |
+----------------------+----------------+
| onx_model_version    | 0              |
+----------------------+----------------+
| onx_producer_name    | skl2onnx       |
+----------------------+----------------+
| onx_producer_version | 1.11           |
+----------------------+----------------+
| onx_ai.onnx.ml       | 1              |
+----------------------+----------------+
| onx_                 | 9              |
+----------------------+----------------+
| onx_op_Cast          | 1              |
+----------------------+----------------+
| onx_op_ZipMap        | 1              |
+----------------------+----------------+
| onx_size_optim       | 43871          |
+----------------------+----------------+
| onx_nnodes_optim     | 3              |
+----------------------+----------------+
| onx_ninits_optim     | 0              |
+----------------------+----------------+
| fit_classes_.shape   | 3              |
+----------------------+----------------+
| fit_n_classes_       | 3              |
+----------------------+----------------+
| fit_objective        | multi:softprob |
+----------------------+----------------+
| fit_estimators_.size | 300            |
+----------------------+----------------+
| fit_node_count       | 1336           |
+----------------------+----------------+
| fit_ntrees           | 300            |
+----------------------+----------------+
| fit_leave_count      | 818            |
+----------------------+----------------+
| fit_mode_count       | 2              |
+----------------------+----------------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'float', 'shape': }}]" fontsize=10];


      label [shape=box label="label" fontsize=10];
      probabilities [shape=box label="probabilities" fontsize=10];
      TreeEnsembleClassifier [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(TreeEnsembleClassifier)\nclass_ids=[0 0 1 1 1 1 1 1 1 1 ...\nclass_nodeids=[ 1  2  3  5  6  ...\nclass_treeids=[  0   0   1   1 ...\nclass_weights=[ 4.22818810e-01 ...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[2 0 0 ... 2...\nnodes_featureids=[2 0 0 ... 2 0...\nnodes_missing_value_tracks_true=[1 0 0 ......\nnodes_modes=[b'BRANCH_LT' b'LEA...\nnodes_nodeids=[0 1 2 ... 0 1 2]\nnodes_treeids=[  0   0   0 ... ...\nnodes_truenodeids=[1 0 0 ... 1 ...\nnodes_values=[2.548984 0.      ...\npost_transform=b'SOFTMAX'" fontsize=10];
      X -> TreeEnsembleClassifier;
      TreeEnsembleClassifier -> label;
      TreeEnsembleClassifier -> probabilities;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      label -> Cast;
      Cast -> output_label;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1 2]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;
    }