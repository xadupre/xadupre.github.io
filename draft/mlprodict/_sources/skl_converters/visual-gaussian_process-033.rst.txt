

.. _l-GaussianProcessRegressor-~b-reg-64-rational-cdist-o15:

GaussianProcessRegressor - ~b-reg-64 - rational - cdist
=======================================================

Fitted on a problem type *~b-reg-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .
Model was converted with additional parameter: ``<class 'sklearn.gaussian_process._gpr.GaussianProcessRegressor'>={'optim': 'cdist'}``.

::

        GaussianProcessRegressor(alpha=100.0,
                             kernel=RationalQuadratic(alpha=1, length_scale=1),
                             random_state=0)

+------------------------------------------+------------+
| index                                    | 0          |
+==========================================+============+
| skl_nop                                  | 1          |
+------------------------------------------+------------+
| onx_size                                 | 5248       |
+------------------------------------------+------------+
| onx_nnodes                               | 7          |
+------------------------------------------+------------+
| onx_ninits                               | 7          |
+------------------------------------------+------------+
| onx_doc_string                           |            |
+------------------------------------------+------------+
| onx_ir_version                           | 8          |
+------------------------------------------+------------+
| onx_domain                               | ai.onnx    |
+------------------------------------------+------------+
| onx_model_version                        | 0          |
+------------------------------------------+------------+
| onx_producer_name                        | skl2onnx   |
+------------------------------------------+------------+
| onx_producer_version                     | 1.11       |
+------------------------------------------+------------+
| onx_                                     | 15         |
+------------------------------------------+------------+
| onx_com.microsoft                        | 1          |
+------------------------------------------+------------+
| onx_op_Reshape                           | 1          |
+------------------------------------------+------------+
| onx_size_optim                           | 5248       |
+------------------------------------------+------------+
| onx_nnodes_optim                         | 7          |
+------------------------------------------+------------+
| onx_ninits_optim                         | 7          |
+------------------------------------------+------------+
| fit_X_train_.shape                       | (112, 4)   |
+------------------------------------------+------------+
| fit_y_train_.shape                       | 112        |
+------------------------------------------+------------+
| fit_log_marginal_likelihood_value_.shape | 1          |
+------------------------------------------+------------+
| fit_L_.shape                             | (112, 112) |
+------------------------------------------+------------+
| fit_alpha_.shape                         | 112        |
+------------------------------------------+------------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      GPmean [shape=box color=green label="GPmean\ndouble((0, 1))" fontsize=10];

      kgpd_CDistcst [shape=box label="kgpd_CDistcst\nfloat64((112, 4))\n[[ 4.30175021e+00  3.94531870e+00  9.21953113e-01 ..." fontsize=10];
      kgpd_Divcst [shape=box label="kgpd_Divcst\nfloat64((1,))\n[41850.37299622]" fontsize=10];
      kgpd_Addcst [shape=box label="kgpd_Addcst\nfloat64((1,))\n[1.]" fontsize=10];
      kgpd_Powcst [shape=box label="kgpd_Powcst\nfloat64((1,))\n[-246.43069933]" fontsize=10];
      gpr_MatMulcst [shape=box label="gpr_MatMulcst\nfloat64((112,))\n[-0.00757285 -0.00518277  0.02451008  0.00881667  ..." fontsize=10];
      gpr_Addcst [shape=box label="gpr_Addcst\nfloat64((1, 1))\n[[0.]]" fontsize=10];
      Re_Reshapecst [shape=box label="Re_Reshapecst\nint64((2,))\n[-1  1]" fontsize=10];

      kgpd_dist [shape=box label="kgpd_dist" fontsize=10];
      kgpd_CDist [shape=box style="filled,rounded" color=orange label="CDist\n(kgpd_CDist)\nmetric=b'sqeuclidean'" fontsize=10];
      X -> kgpd_CDist;
      kgpd_CDistcst -> kgpd_CDist;
      kgpd_CDist -> kgpd_dist;

      kgpd_C01 [shape=box label="kgpd_C01" fontsize=10];
      kgpd_Div [shape=box style="filled,rounded" color=orange label="Div\n(kgpd_Div)" fontsize=10];
      kgpd_dist -> kgpd_Div;
      kgpd_Divcst -> kgpd_Div;
      kgpd_Div -> kgpd_C01;

      kgpd_C0 [shape=box label="kgpd_C0" fontsize=10];
      kgpd_Add [shape=box style="filled,rounded" color=orange label="Add\n(kgpd_Add)" fontsize=10];
      kgpd_C01 -> kgpd_Add;
      kgpd_Addcst -> kgpd_Add;
      kgpd_Add -> kgpd_C0;

      kgpd_Z0 [shape=box label="kgpd_Z0" fontsize=10];
      kgpd_Pow [shape=box style="filled,rounded" color=orange label="Pow\n(kgpd_Pow)" fontsize=10];
      kgpd_C0 -> kgpd_Pow;
      kgpd_Powcst -> kgpd_Pow;
      kgpd_Pow -> kgpd_Z0;

      gpr_Y0 [shape=box label="gpr_Y0" fontsize=10];
      gpr_MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(gpr_MatMul)" fontsize=10];
      kgpd_Z0 -> gpr_MatMul;
      gpr_MatMulcst -> gpr_MatMul;
      gpr_MatMul -> gpr_Y0;

      gpr_C0 [shape=box label="gpr_C0" fontsize=10];
      gpr_Add [shape=box style="filled,rounded" color=orange label="Add\n(gpr_Add)" fontsize=10];
      gpr_Y0 -> gpr_Add;
      gpr_Addcst -> gpr_Add;
      gpr_Add -> gpr_C0;

      Re_Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Re_Reshape)\nallowzero=0" fontsize=10];
      gpr_C0 -> Re_Reshape;
      Re_Reshapecst -> Re_Reshape;
      Re_Reshape -> GPmean;
    }