

.. _l-Lars-~m-reg-64-default--o15:

Lars - ~m-reg-64 - default - 
=============================

Fitted on a problem type *~m-reg-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .


::

        Lars(random_state=0)

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| skl_ncoef            | 2        |
+----------------------+----------+
| skl_nlin             | 1        |
+----------------------+----------+
| onx_size             | 391      |
+----------------------+----------+
| onx_nnodes           | 3        |
+----------------------+----------+
| onx_ninits           | 3        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11     |
+----------------------+----------+
| onx_                 | 13       |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 391      |
+----------------------+----------+
| onx_nnodes_optim     | 3        |
+----------------------+----------+
| onx_ninits_optim     | 3        |
+----------------------+----------+
| fit_coef_.shape      | (2, 4)   |
+----------------------+----------+
| fit_intercept_.shape | 2        |
+----------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      variable [shape=box color=green label="variable\ndouble((0, 2))" fontsize=10];

      coef [shape=box label="coef\nfloat64((4, 2))\n[[-0.1947699  -0.1947699 ]\n [ 0.04866694  0.04866694]\n [ 0.50343211  0.50343211]\n [ 0.60207617  0.60207617]]" fontsize=10];
      intercept [shape=box label="intercept\nfloat64((2,))\n[0.17583265 0.67583265]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((2,))\n[-1  2]" fontsize=10];

      multiplied [shape=box label="multiplied" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      X -> MatMul;
      coef -> MatMul;
      MatMul -> multiplied;

      resh [shape=box label="resh" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      multiplied -> Add;
      intercept -> Add;
      Add -> resh;

      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      resh -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> variable;
    }