

.. _l-MiniBatchKMeans-~num-tr-clu-64-default--o15:

MiniBatchKMeans - ~num-tr-clu-64 - default - 
=============================================

Fitted on a problem type *~num-tr-clu-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `transform` matches output .


::

        MiniBatchKMeans(random_state=0)

+----------------------------+----------+
| index                      | 0        |
+============================+==========+
| skl_nop                    | 1        |
+----------------------------+----------+
| onx_size                   | 932      |
+----------------------------+----------+
| onx_nnodes                 | 7        |
+----------------------------+----------+
| onx_ninits                 | 3        |
+----------------------------+----------+
| onx_doc_string             |          |
+----------------------------+----------+
| onx_ir_version             | 8        |
+----------------------------+----------+
| onx_domain                 | ai.onnx  |
+----------------------------+----------+
| onx_model_version          | 0        |
+----------------------------+----------+
| onx_producer_name          | skl2onnx |
+----------------------------+----------+
| onx_producer_version       | 1.11.1   |
+----------------------------+----------+
| onx_                       | 14       |
+----------------------------+----------+
| onx_size_optim             | 932      |
+----------------------------+----------+
| onx_nnodes_optim           | 7        |
+----------------------------+----------+
| onx_ninits_optim           | 3        |
+----------------------------+----------+
| fit_cluster_centers_.shape | (8, 4)   |
+----------------------------+----------+
| fit_labels_.shape          | 112      |
+----------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      scores [shape=box color=green label="scores\ndouble((0, 8))" fontsize=10];

      Ad_Addcst [shape=box label="Ad_Addcst\nfloat64((8,))\n[ 30.47013832  69.55415246  42.72684982  88.0862794   51.69308273\n  70.44638848 113.20560697  34.86063024]" fontsize=10];
      Ge_Gemmcst [shape=box label="Ge_Gemmcst\nfloat64((8, 4))\n[[4.63245136 2.73841253 1.14624253 0.4446995 ]\n [5..." fontsize=10];
      Mu_Mulcst [shape=box label="Mu_Mulcst\nfloat64((1,))\n[0.]" fontsize=10];

      Re_reduced0 [shape=box label="Re_reduced0" fontsize=10];
      Re_ReduceSumSquare [shape=box style="filled,rounded" color=orange label="ReduceSumSquare\n(Re_ReduceSumSquare)\naxes=[1]\nkeepdims=1" fontsize=10];
      X -> Re_ReduceSumSquare;
      Re_ReduceSumSquare -> Re_reduced0;

      Mu_C0 [shape=box label="Mu_C0" fontsize=10];
      Mu_Mul [shape=box style="filled,rounded" color=orange label="Mul\n(Mu_Mul)" fontsize=10];
      Re_reduced0 -> Mu_Mul;
      Mu_Mulcst -> Mu_Mul;
      Mu_Mul -> Mu_C0;

      Ge_Y0 [shape=box label="Ge_Y0" fontsize=10];
      Ge_Gemm [shape=box style="filled,rounded" color=orange label="Gemm\n(Ge_Gemm)\nalpha=-2.0\ntransB=1" fontsize=10];
      X -> Ge_Gemm;
      Ge_Gemmcst -> Ge_Gemm;
      Mu_C0 -> Ge_Gemm;
      Ge_Gemm -> Ge_Y0;

      Ad_C01 [shape=box label="Ad_C01" fontsize=10];
      Ad_Add [shape=box style="filled,rounded" color=orange label="Add\n(Ad_Add)" fontsize=10];
      Re_reduced0 -> Ad_Add;
      Ge_Y0 -> Ad_Add;
      Ad_Add -> Ad_C01;

      Ad_C0 [shape=box label="Ad_C0" fontsize=10];
      Ad_Add1 [shape=box style="filled,rounded" color=orange label="Add\n(Ad_Add1)" fontsize=10];
      Ad_Addcst -> Ad_Add1;
      Ad_C01 -> Ad_Add1;
      Ad_Add1 -> Ad_C0;

      Ar_ArgMin [shape=box style="filled,rounded" color=orange label="ArgMin\n(Ar_ArgMin)\naxis=1\nkeepdims=0" fontsize=10];
      Ad_C0 -> Ar_ArgMin;
      Ar_ArgMin -> label;

      Sq_Sqrt [shape=box style="filled,rounded" color=orange label="Sqrt\n(Sq_Sqrt)" fontsize=10];
      Ad_C0 -> Sq_Sqrt;
      Sq_Sqrt -> scores;
    }