

.. _l-LGBMClassifier-~b-cl-64-default--o15:

LGBMClassifier - ~b-cl-64 - default - 
======================================

Fitted on a problem type *~b-cl-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        LGBMClassifier(n_jobs=8, random_state=0)

+----------------------+------------------+
| index                | 0                |
+======================+==================+
| skl_nop              | 1                |
+----------------------+------------------+
| onx_size             | 43604            |
+----------------------+------------------+
| onx_nnodes           | 3                |
+----------------------+------------------+
| onx_ninits           | 0                |
+----------------------+------------------+
| onx_doc_string       |                  |
+----------------------+------------------+
| onx_ir_version       | 8                |
+----------------------+------------------+
| onx_domain           | ai.onnx          |
+----------------------+------------------+
| onx_model_version    | 0                |
+----------------------+------------------+
| onx_producer_name    | skl2onnx         |
+----------------------+------------------+
| onx_producer_version | 1.11.1           |
+----------------------+------------------+
| onx_ai.onnx.ml       | 1                |
+----------------------+------------------+
| onx_                 | 14               |
+----------------------+------------------+
| onx_mlprodict        | 1                |
+----------------------+------------------+
| onx_op_Cast          | 1                |
+----------------------+------------------+
| onx_op_ZipMap        | 1                |
+----------------------+------------------+
| onx_size_optim       | 43604            |
+----------------------+------------------+
| onx_nnodes_optim     | 3                |
+----------------------+------------------+
| onx_ninits_optim     | 0                |
+----------------------+------------------+
| fit_n_classes_       | 2                |
+----------------------+------------------+
| fit_n_features_      | 4                |
+----------------------+------------------+
| fit_objective        | binary sigmoid:1 |
+----------------------+------------------+
| fit_n_classes        | 1                |
+----------------------+------------------+
| fit_estimators_.size | 100              |
+----------------------+------------------+
| fit_node_count       | 962              |
+----------------------+------------------+
| fit_ntrees           | 100              |
+----------------------+------------------+
| fit_leave_count      | 531              |
+----------------------+------------------+
| fit_mode_count       | 2                |
+----------------------+------------------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'double', 'shape': }}]" fontsize=10];


      label_tensor [shape=box label="label_tensor" fontsize=10];
      probability_tensor [shape=box label="probability_tensor" fontsize=10];
      LgbmClassifier [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifierDouble\n(LgbmClassifier)\nclass_ids=[0 0 0 0 0 0 0 0 0 0 ...\nclass_nodeids=[ 1  2  1  3  4  ...\nclass_treeids=[ 0  0  1  1  1  ...\nclass_weights=[ 4.81386653e-01 ...\nclasslabels_int64s=[0 1]\nnodes_falsenodeids=[ 2  0  0  2...\nnodes_featureids=[2 0 0 2 0 0 0...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[1 0 0 1 0...\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2  0  1  ...\nnodes_treeids=[ 0  0  0  1  1  ...\nnodes_truenodeids=[ 1  0  0  1 ...\nnodes_values=[3.10621595 0.    ...\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LgbmClassifier;
      LgbmClassifier -> label_tensor;
      LgbmClassifier -> probability_tensor;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1]" fontsize=10];
      probability_tensor -> ZipMap;
      ZipMap -> output_probability;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      label_tensor -> Cast;
      Cast -> output_label;
    }