

.. _l-GridSearchCV-b-cl-cl-zipmap:False-o15:

GridSearchCV - b-cl - cl - {'zipmap': False}
============================================

Fitted on a problem type *b-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.model_selection._search.GridSearchCV'>={'zipmap': False}``.

::

        GridSearchCV(estimator=LogisticRegression(random_state=0, solver='liblinear'),
                 n_jobs=1, param_grid={'fit_intercept': [False, True]})

+-----------------------+----------+
| index                 | 0        |
+=======================+==========+
| skl_nop               | 1        |
+-----------------------+----------+
| onx_size              | 585      |
+-----------------------+----------+
| onx_nnodes            | 4        |
+-----------------------+----------+
| onx_ninits            | 0        |
+-----------------------+----------+
| onx_doc_string        |          |
+-----------------------+----------+
| onx_ir_version        | 8        |
+-----------------------+----------+
| onx_domain            | ai.onnx  |
+-----------------------+----------+
| onx_model_version     | 0        |
+-----------------------+----------+
| onx_producer_name     | skl2onnx |
+-----------------------+----------+
| onx_producer_version  | 1.11     |
+-----------------------+----------+
| onx_ai.onnx.ml        | 1        |
+-----------------------+----------+
| onx_                  | 14       |
+-----------------------+----------+
| onx_op_Identity       | 2        |
+-----------------------+----------+
| onx_size_optim        | 488      |
+-----------------------+----------+
| onx_nnodes_optim      | 2        |
+-----------------------+----------+
| onx_ninits_optim      | 0        |
+-----------------------+----------+
| fit_best_score_.shape | 1        |
+-----------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 2))" fontsize=10];


      label1 [shape=box label="label1" fontsize=10];
      probability_tensor [shape=box label="probability_tensor" fontsize=10];
      LinearClassifier [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier)\nclasslabels_ints=[0 1]\ncoefficients=[ 0.49765062  1.31...\nintercepts=[-0.  0.]\nmulti_class=1\npost_transform=b'LOGISTIC'" fontsize=10];
      X -> LinearClassifier;
      LinearClassifier -> label1;
      LinearClassifier -> probability_tensor;

      probabilities1 [shape=box label="probabilities1" fontsize=10];
      Normalizer [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer)\nnorm=b'L1'" fontsize=10];
      probability_tensor -> Normalizer;
      Normalizer -> probabilities1;

      Identity [shape=box style="filled,rounded" color=orange label="Identity\n(Identity)" fontsize=10];
      label1 -> Identity;
      Identity -> label;

      Identity1 [shape=box style="filled,rounded" color=orange label="Identity\n(Identity1)" fontsize=10];
      probabilities1 -> Identity1;
      Identity1 -> probabilities;
    }