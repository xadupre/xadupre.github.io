

.. _l-MLPClassifier-m-cl-default-zipmap:False-o15:

MLPClassifier - m-cl - default - {'zipmap': False}
==================================================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>={'zipmap': False}``.

::

        MLPClassifier(random_state=0)

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| onx_size             | 4269     |
+----------------------+----------+
| onx_nnodes           | 12       |
+----------------------+----------+
| onx_ninits           | 6        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11     |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_                 | 14       |
+----------------------+----------+
| onx_op_Cast          | 2        |
+----------------------+----------+
| onx_op_Identity      | 1        |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 4197     |
+----------------------+----------+
| onx_nnodes_optim     | 11       |
+----------------------+----------+
| onx_ninits_optim     | 6        |
+----------------------+----------+
| fit_classes_.shape   | 3        |
+----------------------+----------+
| fit_best_loss_.shape | 1        |
+----------------------+----------+
| fit_loss_.shape      | 1        |
+----------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 3))" fontsize=10];

      coefficient [shape=box label="coefficient\nfloat32((4, 100))\n[[-2.13754438e-02  6.49984106e-02  9.18669328e-02 ..." fontsize=10];
      intercepts [shape=box label="intercepts\nfloat32((1, 100))\n[[-0.13958356  0.13559705 -0.10981847  0.30907068 ..." fontsize=10];
      coefficient1 [shape=box label="coefficient1\nfloat32((100, 3))\n[[-5.24393730e-02 -2.01424345e-01  8.18156376e-02]..." fontsize=10];
      intercepts1 [shape=box label="intercepts1\nfloat32((1, 3))\n[[-0.15697008  0.13119248 -0.11226577]]" fontsize=10];
      classes [shape=box label="classes\nint32((3,))\n[0 1 2]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((1,))\n[-1]" fontsize=10];

      cast_input [shape=box label="cast_input" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=1" fontsize=10];
      X -> Cast;
      Cast -> cast_input;

      mul_result [shape=box label="mul_result" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      cast_input -> MatMul;
      coefficient -> MatMul;
      MatMul -> mul_result;

      add_result [shape=box label="add_result" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      mul_result -> Add;
      intercepts -> Add;
      Add -> add_result;

      next_activations [shape=box label="next_activations" fontsize=10];
      Relu [shape=box style="filled,rounded" color=orange label="Relu\n(Relu)" fontsize=10];
      add_result -> Relu;
      Relu -> next_activations;

      mul_result1 [shape=box label="mul_result1" fontsize=10];
      MatMul1 [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul1)" fontsize=10];
      next_activations -> MatMul1;
      coefficient1 -> MatMul1;
      MatMul1 -> mul_result1;

      add_result1 [shape=box label="add_result1" fontsize=10];
      Add1 [shape=box style="filled,rounded" color=orange label="Add\n(Add1)" fontsize=10];
      mul_result1 -> Add1;
      intercepts1 -> Add1;
      Add1 -> add_result1;

      out_activations_result [shape=box label="out_activations_result" fontsize=10];
      Relu1 [shape=box style="filled,rounded" color=orange label="Softmax\n(Relu1)" fontsize=10];
      add_result1 -> Relu1;
      Relu1 -> out_activations_result;

      Identity [shape=box style="filled,rounded" color=orange label="Identity\n(Identity)" fontsize=10];
      out_activations_result -> Identity;
      Identity -> probabilities;

      argmax_output [shape=box label="argmax_output" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      probabilities -> ArgMax;
      ArgMax -> argmax_output;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      argmax_output -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> array_feature_extractor_result;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      array_feature_extractor_result -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_result;

      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=7" fontsize=10];
      reshaped_result -> Cast1;
      Cast1 -> label;
    }