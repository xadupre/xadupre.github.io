

.. _l-GaussianProcessRegressor-~b-reg-NF-std-64-rbf-cdist-o15:

GaussianProcessRegressor - ~b-reg-NF-std-64 - rbf - cdist
=========================================================

Fitted on a problem type *~b-reg-NF-std-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .
Model was converted with additional parameter: ``<class 'sklearn.gaussian_process._gpr.GaussianProcessRegressor'>={'optim': 'cdist'}``.

::

        GaussianProcessRegressor(alpha=100.0, kernel=RBF(length_scale=1),
                             random_state=42)

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| onx_size             | 714      |
+----------------------+----------+
| onx_nnodes           | 8        |
+----------------------+----------+
| onx_ninits           | 2        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11.1   |
+----------------------+----------+
| onx_                 | 15       |
+----------------------+----------+
| onx_size_optim       | 585      |
+----------------------+----------+
| onx_nnodes_optim     | 6        |
+----------------------+----------+
| onx_ninits_optim     | 2        |
+----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      GPmean [shape=box color=green label="GPmean\ndouble((0, 1))" fontsize=10];
      GPcovstd [shape=box color=green label="GPcovstd\ndouble(('?',))" fontsize=10];

      Re_ReduceSumcst [shape=box label="Re_ReduceSumcst\nint64((1,))\n[1]" fontsize=10];
      Ad_Addcst [shape=box label="Ad_Addcst\nfloat64((1,))\n[1.]" fontsize=10];

      Sh_shape0 [shape=box label="Sh_shape0" fontsize=10];
      Sh_Shape [shape=box style="filled,rounded" color=orange label="Shape\n(Sh_Shape)" fontsize=10];
      X -> Sh_Shape;
      Sh_Shape -> Sh_shape0;

      Sh_shape02 [shape=box label="Sh_shape02" fontsize=10];
      Sh_Shape1 [shape=box style="filled,rounded" color=orange label="Shape\n(Sh_Shape1)" fontsize=10];
      X -> Sh_Shape1;
      Sh_Shape1 -> Sh_shape02;

      Co_output02 [shape=box label="Co_output02" fontsize=10];
      Co_ConstantOfShape1 [shape=box style="filled,rounded" color=orange label="ConstantOfShape\n(Co_ConstantOfShape1)\nvalue=[0.]" fontsize=10];
      Sh_shape02 -> Co_ConstantOfShape1;
      Co_ConstantOfShape1 -> Co_output02;

      Co_output0 [shape=box label="Co_output0" fontsize=10];
      Co_ConstantOfShape [shape=box style="filled,rounded" color=orange label="ConstantOfShape\n(Co_ConstantOfShape)\nvalue=[0.]" fontsize=10];
      Sh_shape0 -> Co_ConstantOfShape;
      Co_ConstantOfShape -> Co_output0;

      Re_reduced0 [shape=box label="Re_reduced0" fontsize=10];
      Re_ReduceSum1 [shape=box style="filled,rounded" color=orange label="ReduceSum\n(Re_ReduceSum1)\nkeepdims=0" fontsize=10];
      Co_output02 -> Re_ReduceSum1;
      Re_ReduceSumcst -> Re_ReduceSum1;
      Re_ReduceSum1 -> Re_reduced0;

      Re_ReduceSum [shape=box style="filled,rounded" color=orange label="ReduceSum\n(Re_ReduceSum)\nkeepdims=1" fontsize=10];
      Co_output0 -> Re_ReduceSum;
      Re_ReduceSumcst -> Re_ReduceSum;
      Re_ReduceSum -> GPmean;

      Ad_C0 [shape=box label="Ad_C0" fontsize=10];
      Ad_Add [shape=box style="filled,rounded" color=orange label="Add\n(Ad_Add)" fontsize=10];
      Re_reduced0 -> Ad_Add;
      Ad_Addcst -> Ad_Add;
      Ad_Add -> Ad_C0;

      Sq_Sqrt [shape=box style="filled,rounded" color=orange label="Sqrt\n(Sq_Sqrt)" fontsize=10];
      Ad_C0 -> Sq_Sqrt;
      Sq_Sqrt -> GPcovstd;
    }