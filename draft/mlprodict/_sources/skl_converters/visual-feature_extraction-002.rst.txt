

.. _l-TfidfVectorizer-text-col-default--o15:

TfidfVectorizer - text-col - default - 
=======================================

Fitted on a problem type *text-col*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `transform` matches output .


::

        TfidfVectorizer()

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| onx_size             | 1283     |
+----------------------+----------+
| onx_nnodes           | 8        |
+----------------------+----------+
| onx_ninits           | 2        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11     |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_                 | 14       |
+----------------------+----------+
| onx_com.microsoft    | 1        |
+----------------------+----------+
| onx_op_Identity      | 1        |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 1231     |
+----------------------+----------+
| onx_nnodes_optim     | 7        |
+----------------------+----------+
| onx_ninits_optim     | 2        |
+----------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nstr((0,))" fontsize=10];

      variable [shape=box color=green label="variable\nfloat((0, 18))" fontsize=10];

      shape_tensor [shape=box label="shape_tensor\nint64((1,))\n[-1]" fontsize=10];
      idfcst [shape=box label="idfcst\nfloat32((18,))\n[3.442347 3.442347 3.442347 3.036882 3.442347 3.44..." fontsize=10];

      flattened [shape=box label="flattened" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      X -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> flattened;

      normalized [shape=box label="normalized" fontsize=10];
      StringNormalizer [shape=box style="filled,rounded" color=orange label="StringNormalizer\n(StringNormalizer)\ncase_change_action=b'LOWER'\nis_case_sensitive=0" fontsize=10];
      flattened -> StringNormalizer;
      StringNormalizer -> normalized;

      tokenized [shape=box label="tokenized" fontsize=10];
      Tokenizer [shape=box style="filled,rounded" color=orange label="Tokenizer\n(Tokenizer)\nmark=0\nmincharnum=1\npad_value=b'#'\ntokenexp=b'[a-zA-Z0-9_]+'" fontsize=10];
      normalized -> Tokenizer;
      Tokenizer -> tokenized;

      flattened1 [shape=box label="flattened1" fontsize=10];
      Flatten [shape=box style="filled,rounded" color=orange label="Flatten\n(Flatten)" fontsize=10];
      tokenized -> Flatten;
      Flatten -> flattened1;

      output [shape=box label="output" fontsize=10];
      TfIdfVectorizer [shape=box style="filled,rounded" color=orange label="TfIdfVectorizer\n(TfIdfVectorizer)\nmax_gram_length=1\nmax_skip_count=0\nmin_gram_length=1\nmode=b'TF'\nngram_counts=[0]\nngram_indexes=[ 0  1  2  3  4  ...\npool_strings=[b'dix' b'eighteen...\nweights=[1. 1. 1. 1. 1. 1. 1. 1..." fontsize=10];
      flattened1 -> TfIdfVectorizer;
      TfIdfVectorizer -> output;

      tfidftr_output [shape=box label="tfidftr_output" fontsize=10];
      Mul [shape=box style="filled,rounded" color=orange label="Mul\n(Mul)" fontsize=10];
      output -> Mul;
      idfcst -> Mul;
      Mul -> tfidftr_output;

      tfidftr_norm [shape=box label="tfidftr_norm" fontsize=10];
      Normalizer [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer)\nnorm=b'L2'" fontsize=10];
      tfidftr_output -> Normalizer;
      Normalizer -> tfidftr_norm;

      Identity [shape=box style="filled,rounded" color=orange label="Identity\n(Identity)" fontsize=10];
      tfidftr_norm -> Identity;
      Identity -> variable;
    }