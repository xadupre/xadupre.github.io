

.. _l-AdaBoostClassifier-~b-cl-64-default-zipmap:False-o15:

AdaBoostClassifier - ~b-cl-64 - default - {'zipmap': False}
===========================================================

Fitted on a problem type *~b-cl-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.ensemble._weight_boosting.AdaBoostClassifier'>={'zipmap': False}``.

::

        AdaBoostClassifier(n_estimators=10, random_state=0)

+---------------------------------------+----------+
| index                                 | 0        |
+=======================================+==========+
| skl_nop                               | 2        |
+---------------------------------------+----------+
| skl_nnodes                            | 3        |
+---------------------------------------+----------+
| skl_ntrees                            | 1        |
+---------------------------------------+----------+
| skl_max_depth                         | 1        |
+---------------------------------------+----------+
| onx_size                              | 2415     |
+---------------------------------------+----------+
| onx_nnodes                            | 23       |
+---------------------------------------+----------+
| onx_ninits                            | 8        |
+---------------------------------------+----------+
| onx_doc_string                        |          |
+---------------------------------------+----------+
| onx_ir_version                        | 8        |
+---------------------------------------+----------+
| onx_domain                            | ai.onnx  |
+---------------------------------------+----------+
| onx_model_version                     | 0        |
+---------------------------------------+----------+
| onx_producer_name                     | skl2onnx |
+---------------------------------------+----------+
| onx_producer_version                  | 1.11.1   |
+---------------------------------------+----------+
| onx_                                  | 15       |
+---------------------------------------+----------+
| onx_mlprodict                         | 1        |
+---------------------------------------+----------+
| onx_ai.onnx.ml                        | 1        |
+---------------------------------------+----------+
| onx_op_Cast                           | 3        |
+---------------------------------------+----------+
| onx_op_Reshape                        | 3        |
+---------------------------------------+----------+
| onx_size_optim                        | 2415     |
+---------------------------------------+----------+
| onx_nnodes_optim                      | 23       |
+---------------------------------------+----------+
| onx_ninits_optim                      | 8        |
+---------------------------------------+----------+
| fit_estimator_weights_.shape          | 10       |
+---------------------------------------+----------+
| fit_estimator_errors_.shape           | 10       |
+---------------------------------------+----------+
| fit_classes_.shape                    | 2        |
+---------------------------------------+----------+
| fit_n_classes_                        | 2        |
+---------------------------------------+----------+
| fit_estimators_.size                  | 1        |
+---------------------------------------+----------+
| fit_estimators_.sum|tree_.leave_count | 2        |
+---------------------------------------+----------+
| fit_estimators_.n_features_           | 4        |
+---------------------------------------+----------+
| fit_estimators_.n_classes_            | 2        |
+---------------------------------------+----------+
| fit_estimators_.max|tree_.max_depth   | 1        |
+---------------------------------------+----------+
| fit_estimators_.sum|tree_.node_count  | 3        |
+---------------------------------------+----------+
| fit_estimators_.classes_.shape        | 2        |
+---------------------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\ndouble((0, 2))" fontsize=10];

      classes [shape=box label="classes\nint32((2,))\n[0 1]" fontsize=10];
      inverted_n_classes [shape=box label="inverted_n_classes\nfloat64(())\n0.5" fontsize=10];
      n_classes_minus_one [shape=box label="n_classes_minus_one\nfloat64(())\n1.0" fontsize=10];
      clip_min [shape=box label="clip_min\nfloat64(())\n2.220446049250313e-16" fontsize=10];
      axis [shape=box label="axis\nint64((1,))\n[1]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((2,))\n[-1  1]" fontsize=10];
      zero_scalar [shape=box label="zero_scalar\nint32(())\n0" fontsize=10];
      shape_tensor2 [shape=box label="shape_tensor2\nint64((1,))\n[-1]" fontsize=10];

      elab_name_0 [shape=box label="elab_name_0" fontsize=10];
      eprob_name_0 [shape=box label="eprob_name_0" fontsize=10];
      TreeEnsembleClassifierDouble [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifierDouble\n(TreeEnsembleClassifierDouble)\nclass_ids=[0 0]\nclass_nodeids=[1 2]\nclass_treeids=[0 0]\nclass_weights=[0. 1.]\nclasslabels_int64s=[0 1]\nnodes_falsenodeids=[2 0 0]\nnodes_featureids=[2 0 0]\nnodes_hitrates=[1. 1. 1.]\nnodes_missing_value_tracks_true=[0 0 0]\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[0 1 2]\nnodes_treeids=[0 0 0]\nnodes_truenodeids=[1 0 0]\nnodes_values=[2.54898393 0.    ...\npost_transform=b'NONE'" fontsize=10];
      X -> TreeEnsembleClassifierDouble;
      TreeEnsembleClassifierDouble -> elab_name_0;
      TreeEnsembleClassifierDouble -> eprob_name_0;

      clipped_proba [shape=box label="clipped_proba" fontsize=10];
      ClipAda [shape=box style="filled,rounded" color=orange label="Clip\n(ClipAda)" fontsize=10];
      eprob_name_0 -> ClipAda;
      clip_min -> ClipAda;
      ClipAda -> clipped_proba;

      log_proba [shape=box label="log_proba" fontsize=10];
      Log [shape=box style="filled,rounded" color=orange label="Log\n(Log)" fontsize=10];
      clipped_proba -> Log;
      Log -> log_proba;

      reduced_proba [shape=box label="reduced_proba" fontsize=10];
      ReduceSum [shape=box style="filled,rounded" color=orange label="ReduceSum\n(ReduceSum)" fontsize=10];
      log_proba -> ReduceSum;
      axis -> ReduceSum;
      ReduceSum -> reduced_proba;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      reduced_proba -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_result;

      prod_result [shape=box label="prod_result" fontsize=10];
      Mul [shape=box style="filled,rounded" color=orange label="Mul\n(Mul)" fontsize=10];
      reshaped_result -> Mul;
      inverted_n_classes -> Mul;
      Mul -> prod_result;

      sub_result [shape=box label="sub_result" fontsize=10];
      Sub [shape=box style="filled,rounded" color=orange label="Sub\n(Sub)" fontsize=10];
      log_proba -> Sub;
      prod_result -> Sub;
      Sub -> sub_result;

      samme_proba [shape=box label="samme_proba" fontsize=10];
      Mul1 [shape=box style="filled,rounded" color=orange label="Mul\n(Mul1)" fontsize=10];
      sub_result -> Mul1;
      n_classes_minus_one -> Mul1;
      Mul1 -> samme_proba;

      summation_prob [shape=box label="summation_prob" fontsize=10];
      Sum [shape=box style="filled,rounded" color=orange label="Sum\n(Sum)" fontsize=10];
      samme_proba -> Sum;
      Sum -> summation_prob;

      div_result [shape=box label="div_result" fontsize=10];
      Div [shape=box style="filled,rounded" color=orange label="Div\n(Div)" fontsize=10];
      summation_prob -> Div;
      n_classes_minus_one -> Div;
      Div -> div_result;

      exp_operand [shape=box label="exp_operand" fontsize=10];
      Mul2 [shape=box style="filled,rounded" color=orange label="Mul\n(Mul2)" fontsize=10];
      div_result -> Mul2;
      n_classes_minus_one -> Mul2;
      Mul2 -> exp_operand;

      exp_result [shape=box label="exp_result" fontsize=10];
      Exp [shape=box style="filled,rounded" color=orange label="Exp\n(Exp)" fontsize=10];
      exp_operand -> Exp;
      Exp -> exp_result;

      reduced_exp_result [shape=box label="reduced_exp_result" fontsize=10];
      ReduceSum1 [shape=box style="filled,rounded" color=orange label="ReduceSum\n(ReduceSum1)" fontsize=10];
      exp_result -> ReduceSum1;
      axis -> ReduceSum1;
      ReduceSum1 -> reduced_exp_result;

      normaliser [shape=box label="normaliser" fontsize=10];
      Reshape1 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape1)" fontsize=10];
      reduced_exp_result -> Reshape1;
      shape_tensor -> Reshape1;
      Reshape1 -> normaliser;

      cast_normaliser [shape=box label="cast_normaliser" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=6" fontsize=10];
      normaliser -> Cast;
      Cast -> cast_normaliser;

      comparison_result [shape=box label="comparison_result" fontsize=10];
      Equal [shape=box style="filled,rounded" color=orange label="Equal\n(Equal)" fontsize=10];
      cast_normaliser -> Equal;
      zero_scalar -> Equal;
      Equal -> comparison_result;

      cast_output [shape=box label="cast_output" fontsize=10];
      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=11" fontsize=10];
      comparison_result -> Cast1;
      Cast1 -> cast_output;

      zero_filtered_normaliser [shape=box label="zero_filtered_normaliser" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      normaliser -> Add;
      cast_output -> Add;
      Add -> zero_filtered_normaliser;

      Div1 [shape=box style="filled,rounded" color=orange label="Div\n(Div1)" fontsize=10];
      exp_result -> Div1;
      zero_filtered_normaliser -> Div1;
      Div1 -> probabilities;

      argmax_output [shape=box label="argmax_output" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      probabilities -> ArgMax;
      ArgMax -> argmax_output;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      argmax_output -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> array_feature_extractor_result;

      reshaped_result1 [shape=box label="reshaped_result1" fontsize=10];
      Reshape2 [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape2)" fontsize=10];
      array_feature_extractor_result -> Reshape2;
      shape_tensor2 -> Reshape2;
      Reshape2 -> reshaped_result1;

      Cast2 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast2)\nto=7" fontsize=10];
      reshaped_result1 -> Cast2;
      Cast2 -> label;
    }