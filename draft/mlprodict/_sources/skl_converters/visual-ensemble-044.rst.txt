

.. _l-HistGradientBoostingRegressor-~b-reg-nan-64-default--o15:

HistGradientBoostingRegressor - ~b-reg-nan-64 - default - 
==========================================================

Fitted on a problem type *~b-reg-nan-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .


::

        HistGradientBoostingRegressor(random_state=0)

+---------------------------------------+----------+
| index                                 | 0        |
+=======================================+==========+
| skl_nop                               | 1        |
+---------------------------------------+----------+
| onx_size                              | 34724    |
+---------------------------------------+----------+
| onx_nnodes                            | 1        |
+---------------------------------------+----------+
| onx_ninits                            | 0        |
+---------------------------------------+----------+
| onx_doc_string                        |          |
+---------------------------------------+----------+
| onx_ir_version                        | 8        |
+---------------------------------------+----------+
| onx_domain                            | ai.onnx  |
+---------------------------------------+----------+
| onx_model_version                     | 0        |
+---------------------------------------+----------+
| onx_producer_name                     | skl2onnx |
+---------------------------------------+----------+
| onx_producer_version                  | 1.11.1   |
+---------------------------------------+----------+
| onx_mlprodict                         | 1        |
+---------------------------------------+----------+
| onx_                                  | 15       |
+---------------------------------------+----------+
| onx_size_optim                        | 34724    |
+---------------------------------------+----------+
| onx_nnodes_optim                      | 1        |
+---------------------------------------+----------+
| onx_ninits_optim                      | 0        |
+---------------------------------------+----------+
| fit_train_score_.shape                | 0        |
+---------------------------------------+----------+
| fit_validation_score_.shape           | 0        |
+---------------------------------------+----------+
| fit__predictors.size                  | 100      |
+---------------------------------------+----------+
| fit__predictors.sum|tree_.leave_count | 432      |
+---------------------------------------+----------+
| fit__predictors.sum|tree_.node_count  | 764      |
+---------------------------------------+----------+
| fit__predictors.max|tree_.max_depth   | 4        |
+---------------------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      variable [shape=box color=green label="variable\ndouble((0, 1))" fontsize=10];


      TreeEnsembleRegressorDouble [shape=box style="filled,rounded" color=orange label="TreeEnsembleRegressorDouble\n(TreeEnsembleRegressorDouble)\nbase_values=[1.78866071]\nn_targets=1\nnodes_falsenodeids=[4 3 0 0 6 0...\nnodes_featureids=[3 2 0 0 2 0 3...\nnodes_hitrates=[1. 1. 1. 1. 1. ...\nnodes_missing_value_tracks_true=[0 0 0 0 0...\nnodes_modes=[b'BRANCH_LEQ' b'BR...\nnodes_nodeids=[0 1 2 3 4 5 6 7 ...\nnodes_treeids=[ 0  0  0  0  0  ...\nnodes_truenodeids=[1 2 0 0 5 0 ...\nnodes_values=[0.82482387 1.5236...\npost_transform=b'NONE'\ntarget_ids=[0 0 0 0 0 0 0 0 0 0...\ntarget_nodeids=[2 3 5 7 8 2 3 5...\ntarget_treeids=[ 0  0  0  0  0 ...\ntarget_weights=[-1.56820616e-01..." fontsize=10];
      X -> TreeEnsembleRegressorDouble;
      TreeEnsembleRegressorDouble -> variable;
    }