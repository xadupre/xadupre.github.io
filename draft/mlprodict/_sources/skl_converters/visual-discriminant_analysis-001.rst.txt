

.. _l-LinearDiscriminantAnalysis-m-cl-default--o15:

LinearDiscriminantAnalysis - m-cl - default - 
==============================================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        LinearDiscriminantAnalysis()

+-------------------------------------+----------+
| index                               | 0        |
+=====================================+==========+
| skl_nop                             | 1        |
+-------------------------------------+----------+
| skl_ncoef                           | 3        |
+-------------------------------------+----------+
| skl_nlin                            | 1        |
+-------------------------------------+----------+
| onx_size                            | 595      |
+-------------------------------------+----------+
| onx_nnodes                          | 3        |
+-------------------------------------+----------+
| onx_ninits                          | 0        |
+-------------------------------------+----------+
| onx_doc_string                      |          |
+-------------------------------------+----------+
| onx_ir_version                      | 8        |
+-------------------------------------+----------+
| onx_domain                          | ai.onnx  |
+-------------------------------------+----------+
| onx_model_version                   | 0        |
+-------------------------------------+----------+
| onx_producer_name                   | skl2onnx |
+-------------------------------------+----------+
| onx_producer_version                | 1.11.1   |
+-------------------------------------+----------+
| onx_ai.onnx.ml                      | 1        |
+-------------------------------------+----------+
| onx_                                | 9        |
+-------------------------------------+----------+
| onx_op_Cast                         | 1        |
+-------------------------------------+----------+
| onx_op_ZipMap                       | 1        |
+-------------------------------------+----------+
| onx_size_optim                      | 595      |
+-------------------------------------+----------+
| onx_nnodes_optim                    | 3        |
+-------------------------------------+----------+
| onx_ninits_optim                    | 0        |
+-------------------------------------+----------+
| fit_classes_.shape                  | 3        |
+-------------------------------------+----------+
| fit_priors_.shape                   | 3        |
+-------------------------------------+----------+
| fit_means_.shape                    | (3, 4)   |
+-------------------------------------+----------+
| fit_xbar_.shape                     | 4        |
+-------------------------------------+----------+
| fit_explained_variance_ratio_.shape | 2        |
+-------------------------------------+----------+
| fit_scalings_.shape                 | (4, 2)   |
+-------------------------------------+----------+
| fit_intercept_.shape                | 3        |
+-------------------------------------+----------+
| fit_coef_.shape                     | (3, 4)   |
+-------------------------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'float', 'shape': }}]" fontsize=10];


      label [shape=box label="label" fontsize=10];
      probabilities [shape=box label="probabilities" fontsize=10];
      LinearClassifier [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier)\nclasslabels_ints=[0 1 2]\ncoefficients=[ 2.610924    3.72...\nintercepts=[  2.4400733  -1.598...\nmulti_class=0\npost_transform=b'SOFTMAX'" fontsize=10];
      X -> LinearClassifier;
      LinearClassifier -> label;
      LinearClassifier -> probabilities;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1 2]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      label -> Cast;
      Cast -> output_label;
    }