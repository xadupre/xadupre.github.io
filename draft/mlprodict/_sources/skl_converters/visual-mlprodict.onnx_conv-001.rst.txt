

.. _l-LGBMClassifier-m-cl-default--o15:

LGBMClassifier - m-cl - default - 
==================================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .


::

        LGBMClassifier(n_jobs=8, random_state=0)

+----------------------+------------------------+
| index                | 0                      |
+======================+========================+
| skl_nop              | 1                      |
+----------------------+------------------------+
| onx_size             | 119282                 |
+----------------------+------------------------+
| onx_nnodes           | 3                      |
+----------------------+------------------------+
| onx_ninits           | 0                      |
+----------------------+------------------------+
| onx_doc_string       |                        |
+----------------------+------------------------+
| onx_ir_version       | 8                      |
+----------------------+------------------------+
| onx_domain           | ai.onnx                |
+----------------------+------------------------+
| onx_model_version    | 0                      |
+----------------------+------------------------+
| onx_producer_name    | skl2onnx               |
+----------------------+------------------------+
| onx_producer_version | 1.11.1                 |
+----------------------+------------------------+
| onx_ai.onnx.ml       | 1                      |
+----------------------+------------------------+
| onx_                 | 14                     |
+----------------------+------------------------+
| onx_op_Cast          | 1                      |
+----------------------+------------------------+
| onx_op_ZipMap        | 1                      |
+----------------------+------------------------+
| onx_size_optim       | 119282                 |
+----------------------+------------------------+
| onx_nnodes_optim     | 3                      |
+----------------------+------------------------+
| onx_ninits_optim     | 0                      |
+----------------------+------------------------+
| fit_n_classes_       | 3                      |
+----------------------+------------------------+
| fit_n_features_      | 4                      |
+----------------------+------------------------+
| fit_objective        | multiclass num_class:3 |
+----------------------+------------------------+
| fit_n_classes        | 3                      |
+----------------------+------------------------+
| fit_estimators_.size | 300                    |
+----------------------+------------------------+
| fit_node_count       | 3140                   |
+----------------------+------------------------+
| fit_ntrees           | 300                    |
+----------------------+------------------------+
| fit_leave_count      | 1720                   |
+----------------------+------------------------+
| fit_mode_count       | 2                      |
+----------------------+------------------------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'float', 'shape': }}]" fontsize=10];


      label_tensor [shape=box label="label_tensor" fontsize=10];
      probability_tensor [shape=box label="probability_tensor" fontsize=10];
      LgbmClassifier [shape=box style="filled,rounded" color=orange label="TreeEnsembleClassifier\n(LgbmClassifier)\nclass_ids=[0 0 1 ... 2 2 2]\nclass_nodeids=[1 2 3 ... 6 4 2]\nclass_treeids=[  0   0   1 ... ...\nclass_weights=[-0.958437   -1.2...\nclasslabels_int64s=[0 1 2]\nnodes_falsenodeids=[2 0 0 ... 0...\nnodes_featureids=[2 0 0 ... 0 0...\nnodes_hitrates=[1. 1. 1. ... 1....\nnodes_missing_value_tracks_true=[1 0 0 ......\nnodes_modes=[b'BRANCH_LEQ' b'LE...\nnodes_nodeids=[ 0  1  2 ...  8 ...\nnodes_treeids=[  0   0   0 ... ...\nnodes_truenodeids=[1 0 0 ... 0 ...\nnodes_values=[3.106216 0.      ...\npost_transform=b'SOFTMAX'" fontsize=10];
      X -> LgbmClassifier;
      LgbmClassifier -> label_tensor;
      LgbmClassifier -> probability_tensor;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      label_tensor -> Cast;
      Cast -> output_label;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1 2]" fontsize=10];
      probability_tensor -> ZipMap;
      ZipMap -> output_probability;
    }