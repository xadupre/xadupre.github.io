

.. _l-Perceptron-~m-cl-nop-logreg-zipmap:False-o15:

Perceptron - ~m-cl-nop - logreg - {'zipmap': False}
===================================================

Fitted on a problem type *~m-cl-nop*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .
Model was converted with additional parameter: ``<class 'sklearn.linear_model._perceptron.Perceptron'>={'zipmap': False}``.

::

        Perceptron(n_jobs=8)

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| skl_ncoef            | 3        |
+----------------------+----------+
| skl_nlin             | 1        |
+----------------------+----------+
| onx_size             | 728      |
+----------------------+----------+
| onx_nnodes           | 7        |
+----------------------+----------+
| onx_ninits           | 4        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11     |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_                 | 14       |
+----------------------+----------+
| onx_op_Cast          | 1        |
+----------------------+----------+
| onx_op_Identity      | 1        |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 690      |
+----------------------+----------+
| onx_nnodes_optim     | 6        |
+----------------------+----------+
| onx_ninits_optim     | 4        |
+----------------------+----------+
| fit_coef_.shape      | (3, 4)   |
+----------------------+----------+
| fit_intercept_.shape | 3        |
+----------------------+----------+
| fit_classes_.shape   | 3        |
+----------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 3))" fontsize=10];

      classes [shape=box label="classes\nint32((3,))\n[0 1 2]" fontsize=10];
      coef [shape=box label="coef\nfloat32((4, 3))\n[[  0.76526785   8.838072   -29.584278  ]\n [  4.03..." fontsize=10];
      intercept [shape=box label="intercept\nfloat32((3,))\n[  1.  15. -16.]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((1,))\n[-1]" fontsize=10];

      matmul_result [shape=box label="matmul_result" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      X -> MatMul;
      coef -> MatMul;
      MatMul -> matmul_result;

      score [shape=box label="score" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      matmul_result -> Add;
      intercept -> Add;
      Add -> score;

      Identity [shape=box style="filled,rounded" color=orange label="Identity\n(Identity)" fontsize=10];
      score -> Identity;
      Identity -> probabilities;

      predicted_label [shape=box label="predicted_label" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      probabilities -> ArgMax;
      ArgMax -> predicted_label;

      final_label [shape=box label="final_label" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      predicted_label -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> final_label;

      reshaped_final_label [shape=box label="reshaped_final_label" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      final_label -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_final_label;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      reshaped_final_label -> Cast;
      Cast -> label;
    }