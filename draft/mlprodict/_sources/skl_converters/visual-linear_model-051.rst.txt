

.. _l-LogisticRegressionCV-m-cl-default-zipmap:False-o15:

LogisticRegressionCV - m-cl - default - {'zipmap': False}
=========================================================

Fitted on a problem type *m-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.linear_model._logistic.LogisticRegressionCV'>={'zipmap': False}``.

::

        LogisticRegressionCV(n_jobs=8, random_state=0)

+----------------------+------------+
| index                | 0          |
+======================+============+
| skl_nop              | 1          |
+----------------------+------------+
| skl_ncoef            | 3          |
+----------------------+------------+
| skl_nlin             | 1          |
+----------------------+------------+
| onx_size             | 522        |
+----------------------+------------+
| onx_nnodes           | 2          |
+----------------------+------------+
| onx_ninits           | 0          |
+----------------------+------------+
| onx_doc_string       |            |
+----------------------+------------+
| onx_ir_version       | 8          |
+----------------------+------------+
| onx_domain           | ai.onnx    |
+----------------------+------------+
| onx_model_version    | 0          |
+----------------------+------------+
| onx_producer_name    | skl2onnx   |
+----------------------+------------+
| onx_producer_version | 1.11       |
+----------------------+------------+
| onx_ai.onnx.ml       | 1          |
+----------------------+------------+
| onx_                 | 15         |
+----------------------+------------+
| onx_size_optim       | 522        |
+----------------------+------------+
| onx_nnodes_optim     | 2          |
+----------------------+------------+
| onx_ninits_optim     | 0          |
+----------------------+------------+
| fit_classes_.shape   | 3          |
+----------------------+------------+
| fit_Cs_.shape        | 10         |
+----------------------+------------+
| fit_n_iter_.shape    | (1, 5, 10) |
+----------------------+------------+
| fit_C_.shape         | 3          |
+----------------------+------------+
| fit_l1_ratio_.shape  | 3          |
+----------------------+------------+
| fit_coef_.shape      | (3, 4)     |
+----------------------+------------+
| fit_intercept_.shape | 3          |
+----------------------+------------+
| fit_l1_ratios_.shape | 1          |
+----------------------+------------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 3))" fontsize=10];


      probability_tensor [shape=box label="probability_tensor" fontsize=10];
      LinearClassifier [shape=box style="filled,rounded" color=orange label="LinearClassifier\n(LinearClassifier)\nclasslabels_ints=[0 1 2]\ncoefficients=[-0.26657495  0.94...\nintercepts=[ 10.118382    1.891...\nmulti_class=1\npost_transform=b'SOFTMAX'" fontsize=10];
      X -> LinearClassifier;
      LinearClassifier -> label;
      LinearClassifier -> probability_tensor;

      Normalizer [shape=box style="filled,rounded" color=orange label="Normalizer\n(Normalizer)\nnorm=b'L1'" fontsize=10];
      probability_tensor -> Normalizer;
      Normalizer -> probabilities;
    }