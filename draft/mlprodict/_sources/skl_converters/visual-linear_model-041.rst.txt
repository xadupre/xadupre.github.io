

.. _l-LogisticRegression-~b-cl-64-liblinear-onnx-o15:

LogisticRegression - ~b-cl-64 - liblinear - onnx
================================================

Fitted on a problem type *~b-cl-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``onnx``.

::

        LogisticRegression(n_jobs=8, random_state=0, solver='liblinear')

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| skl_ncoef            | 1        |
+----------------------+----------+
| skl_nlin             | 1        |
+----------------------+----------+
| onx_size             | 1161     |
+----------------------+----------+
| onx_nnodes           | 13       |
+----------------------+----------+
| onx_ninits           | 5        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11.1   |
+----------------------+----------+
| onx_                 | 13       |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_op_Cast          | 3        |
+----------------------+----------+
| onx_op_ZipMap        | 1        |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 1161     |
+----------------------+----------+
| onx_nnodes_optim     | 13       |
+----------------------+----------+
| onx_ninits_optim     | 5        |
+----------------------+----------+
| fit_classes_.shape   | 2        |
+----------------------+----------+
| fit_coef_.shape      | (1, 4)   |
+----------------------+----------+
| fit_intercept_.shape | 1        |
+----------------------+----------+
| fit_n_iter_.shape    | 1        |
+----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      output_label [shape=box color=green label="output_label\nint64((0,))" fontsize=10];
      output_probability [shape=box color=green label="output_probability\n[{int64, {'kind': 'tensor', 'elem': 'double', 'shape': }}]" fontsize=10];

      coef [shape=box label="coef\nfloat64((4, 2))\n[[ 0.45876741 -0.45876741]\n [ 1.29302622 -1.29302622]\n [-2.30693933  2.30693933]\n [-0.6970415   0.6970415 ]]" fontsize=10];
      intercept [shape=box label="intercept\nfloat64((1, 2))\n[[ 0.28357965 -0.28357965]]" fontsize=10];
      classes [shape=box label="classes\nint32((2,))\n[0 1]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((1,))\n[-1]" fontsize=10];
      axis [shape=box label="axis\nint64((1,))\n[1]" fontsize=10];

      multiplied [shape=box label="multiplied" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      X -> MatMul;
      coef -> MatMul;
      MatMul -> multiplied;

      raw_scores [shape=box label="raw_scores" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      multiplied -> Add;
      intercept -> Add;
      Add -> raw_scores;

      raw_scoressig [shape=box label="raw_scoressig" fontsize=10];
      Sigmoid [shape=box style="filled,rounded" color=orange label="Sigmoid\n(Sigmoid)" fontsize=10];
      raw_scores -> Sigmoid;
      Sigmoid -> raw_scoressig;

      label1 [shape=box label="label1" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      raw_scores -> ArgMax;
      ArgMax -> label1;

      array_feature_extractor_result [shape=box label="array_feature_extractor_result" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      label1 -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> array_feature_extractor_result;

      norm_abs [shape=box label="norm_abs" fontsize=10];
      Abs [shape=box style="filled,rounded" color=orange label="Abs\n(Abs)" fontsize=10];
      raw_scoressig -> Abs;
      Abs -> norm_abs;

      cast2_result [shape=box label="cast2_result" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=11" fontsize=10];
      array_feature_extractor_result -> Cast;
      Cast -> cast2_result;

      norm [shape=box label="norm" fontsize=10];
      ReduceSum [shape=box style="filled,rounded" color=orange label="ReduceSum\n(ReduceSum)\nkeepdims=1" fontsize=10];
      norm_abs -> ReduceSum;
      axis -> ReduceSum;
      ReduceSum -> norm;

      reshaped_result [shape=box label="reshaped_result" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      cast2_result -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_result;

      probabilities [shape=box label="probabilities" fontsize=10];
      NormalizerNorm [shape=box style="filled,rounded" color=orange label="Div\n(NormalizerNorm)" fontsize=10];
      raw_scoressig -> NormalizerNorm;
      norm -> NormalizerNorm;
      NormalizerNorm -> probabilities;

      ZipMap [shape=box style="filled,rounded" color=orange label="ZipMap\n(ZipMap)\nclasslabels_int64s=[0 1]" fontsize=10];
      probabilities -> ZipMap;
      ZipMap -> output_probability;

      label [shape=box label="label" fontsize=10];
      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=7" fontsize=10];
      reshaped_result -> Cast1;
      Cast1 -> label;

      Cast2 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast2)\nto=7" fontsize=10];
      label -> Cast2;
      Cast2 -> output_label;
    }