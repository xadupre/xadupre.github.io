

.. _l-PoissonRegressor-~b-reg-64-default--o15:

PoissonRegressor - ~b-reg-64 - default - 
=========================================

Fitted on a problem type *~b-reg-64*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict` matches output .


::

        PoissonRegressor()

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| skl_ncoef            | 4        |
+----------------------+----------+
| skl_nlin             | 1        |
+----------------------+----------+
| onx_size             | 423      |
+----------------------+----------+
| onx_nnodes           | 4        |
+----------------------+----------+
| onx_ninits           | 3        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11.1   |
+----------------------+----------+
| onx_                 | 14       |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 423      |
+----------------------+----------+
| onx_nnodes_optim     | 4        |
+----------------------+----------+
| onx_ninits_optim     | 3        |
+----------------------+----------+
| fit_intercept_.shape | 1        |
+----------------------+----------+
| fit_coef_.shape      | 4        |
+----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\ndouble((0, 4))" fontsize=10];

      variable [shape=box color=green label="variable\ndouble((0, 1))" fontsize=10];

      Ma_MatMulcst [shape=box label="Ma_MatMulcst\nfloat64((4,))\n[ 0.02152399 -0.0692994   0.29982017  0.14978441]" fontsize=10];
      Ad_Addcst [shape=box label="Ad_Addcst\nfloat64((1,))\n[-0.82928587]" fontsize=10];
      Re_Reshapecst [shape=box label="Re_Reshapecst\nint64((2,))\n[-1  1]" fontsize=10];

      Ma_Y0 [shape=box label="Ma_Y0" fontsize=10];
      Ma_MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(Ma_MatMul)" fontsize=10];
      X -> Ma_MatMul;
      Ma_MatMulcst -> Ma_MatMul;
      Ma_MatMul -> Ma_Y0;

      Ad_C0 [shape=box label="Ad_C0" fontsize=10];
      Ad_Add [shape=box style="filled,rounded" color=orange label="Add\n(Ad_Add)" fontsize=10];
      Ma_Y0 -> Ad_Add;
      Ad_Addcst -> Ad_Add;
      Ad_Add -> Ad_C0;

      Ex_output0 [shape=box label="Ex_output0" fontsize=10];
      Ex_Exp [shape=box style="filled,rounded" color=orange label="Exp\n(Ex_Exp)" fontsize=10];
      Ad_C0 -> Ex_Exp;
      Ex_Exp -> Ex_output0;

      Re_Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Re_Reshape)" fontsize=10];
      Ex_output0 -> Re_Reshape;
      Re_Reshapecst -> Re_Reshape;
      Re_Reshape -> variable;
    }