

.. _l-SGDClassifier-b-cl-log-zipmap:False-o15:

SGDClassifier - b-cl - log - {'zipmap': False}
==============================================

Fitted on a problem type *b-cl*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.linear_model._stochastic_gradient.SGDClassifier'>={'zipmap': False}``.

::

        SGDClassifier(loss='log', n_jobs=8, random_state=0)

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| skl_ncoef            | 1        |
+----------------------+----------+
| skl_nlin             | 1        |
+----------------------+----------+
| onx_size             | 808      |
+----------------------+----------+
| onx_nnodes           | 9        |
+----------------------+----------+
| onx_ninits           | 5        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11.1   |
+----------------------+----------+
| onx_                 | 14       |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_op_Cast          | 1        |
+----------------------+----------+
| onx_op_Reshape       | 1        |
+----------------------+----------+
| onx_size_optim       | 808      |
+----------------------+----------+
| onx_nnodes_optim     | 9        |
+----------------------+----------+
| onx_ninits_optim     | 5        |
+----------------------+----------+
| fit_coef_.shape      | (1, 4)   |
+----------------------+----------+
| fit_intercept_.shape | 1        |
+----------------------+----------+
| fit_classes_.shape   | 2        |
+----------------------+----------+


.. gdot::

        digraph{
      ranksep=0.25;
      nodesep=0.05;
      orientation=portrait;
      size=7;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 2))" fontsize=10];

      classes [shape=box label="classes\nint32((2,))\n[0 1]" fontsize=10];
      coef [shape=box label="coef\nfloat32((4, 1))\n[[ -9.825223]\n [-21.461554]\n [ 36.793617]\n [ 15.485822]]" fontsize=10];
      intercept [shape=box label="intercept\nfloat32((1,))\n[-4.980099]" fontsize=10];
      unity [shape=box label="unity\nfloat32((1,))\n[1.]" fontsize=10];
      shape_tensor [shape=box label="shape_tensor\nint64((1,))\n[-1]" fontsize=10];

      matmul_result [shape=box label="matmul_result" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      X -> MatMul;
      coef -> MatMul;
      MatMul -> matmul_result;

      score [shape=box label="score" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      matmul_result -> Add;
      intercept -> Add;
      Add -> score;

      sigmoid [shape=box label="sigmoid" fontsize=10];
      Sigmoid [shape=box style="filled,rounded" color=orange label="Sigmoid\n(Sigmoid)" fontsize=10];
      score -> Sigmoid;
      Sigmoid -> sigmoid;

      sigmo_0 [shape=box label="sigmo_0" fontsize=10];
      Sub [shape=box style="filled,rounded" color=orange label="Sub\n(Sub)" fontsize=10];
      unity -> Sub;
      sigmoid -> Sub;
      Sub -> sigmo_0;

      Concat [shape=box style="filled,rounded" color=orange label="Concat\n(Concat)\naxis=1" fontsize=10];
      sigmo_0 -> Concat;
      sigmoid -> Concat;
      Concat -> probabilities;

      predicted_label [shape=box label="predicted_label" fontsize=10];
      ArgMax [shape=box style="filled,rounded" color=orange label="ArgMax\n(ArgMax)\naxis=1" fontsize=10];
      probabilities -> ArgMax;
      ArgMax -> predicted_label;

      final_label [shape=box label="final_label" fontsize=10];
      ArrayFeatureExtractor [shape=box style="filled,rounded" color=orange label="ArrayFeatureExtractor\n(ArrayFeatureExtractor)" fontsize=10];
      classes -> ArrayFeatureExtractor;
      predicted_label -> ArrayFeatureExtractor;
      ArrayFeatureExtractor -> final_label;

      reshaped_final_label [shape=box label="reshaped_final_label" fontsize=10];
      Reshape [shape=box style="filled,rounded" color=orange label="Reshape\n(Reshape)" fontsize=10];
      final_label -> Reshape;
      shape_tensor -> Reshape;
      Reshape -> reshaped_final_label;

      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=7" fontsize=10];
      reshaped_final_label -> Cast;
      Cast -> label;
    }