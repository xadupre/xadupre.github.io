

.. _l-MLPClassifier-~m-label-default-zipmap:False-o15:

MLPClassifier - ~m-label - default - {'zipmap': False}
======================================================

Fitted on a problem type *~m-label*
(see :func:`find_suitable_problem
<mlprodict.onnxrt.validate.validate_problems.find_suitable_problem>`),
method `predict_proba` matches output .
Model was converted with additional parameter: ``<class 'sklearn.neural_network._multilayer_perceptron.MLPClassifier'>={'zipmap': False}``.

::

        MLPClassifier(random_state=0)

+----------------------+----------+
| index                | 0        |
+======================+==========+
| skl_nop              | 1        |
+----------------------+----------+
| onx_size             | 4046     |
+----------------------+----------+
| onx_nnodes           | 10       |
+----------------------+----------+
| onx_ninits           | 4        |
+----------------------+----------+
| onx_doc_string       |          |
+----------------------+----------+
| onx_ir_version       | 8        |
+----------------------+----------+
| onx_domain           | ai.onnx  |
+----------------------+----------+
| onx_model_version    | 0        |
+----------------------+----------+
| onx_producer_name    | skl2onnx |
+----------------------+----------+
| onx_producer_version | 1.11     |
+----------------------+----------+
| onx_ai.onnx.ml       | 1        |
+----------------------+----------+
| onx_                 | 14       |
+----------------------+----------+
| onx_op_Cast          | 2        |
+----------------------+----------+
| onx_op_Identity      | 1        |
+----------------------+----------+
| onx_size_optim       | 3965     |
+----------------------+----------+
| onx_nnodes_optim     | 9        |
+----------------------+----------+
| onx_ninits_optim     | 4        |
+----------------------+----------+
| fit_classes_.shape   | 3        |
+----------------------+----------+
| fit_best_loss_.shape | 1        |
+----------------------+----------+
| fit_loss_.shape      | 1        |
+----------------------+----------+


.. gdot::

        digraph{
      nodesep=0.05;
      ranksep=0.25;
      size=7;
      orientation=portrait;

      X [shape=box color=red label="X\nfloat((0, 4))" fontsize=10];

      label [shape=box color=green label="label\nint64((0,))" fontsize=10];
      probabilities [shape=box color=green label="probabilities\nfloat((0, 3))" fontsize=10];

      coefficient [shape=box label="coefficient\nfloat32((4, 100))\n[[-5.23032025e-02  5.47090434e-02  8.11574608e-02 ..." fontsize=10];
      intercepts [shape=box label="intercepts\nfloat32((1, 100))\n[[-0.1921233   0.12601851 -0.07710242  0.40619114 ..." fontsize=10];
      coefficient1 [shape=box label="coefficient1\nfloat32((100, 3))\n[[ 2.69775018e-02 -2.53212750e-01  1.10127583e-01]..." fontsize=10];
      intercepts1 [shape=box label="intercepts1\nfloat32((1, 3))\n[[-0.20008506  0.21500102 -0.1164256 ]]" fontsize=10];

      cast_input [shape=box label="cast_input" fontsize=10];
      Cast [shape=box style="filled,rounded" color=orange label="Cast\n(Cast)\nto=1" fontsize=10];
      X -> Cast;
      Cast -> cast_input;

      mul_result [shape=box label="mul_result" fontsize=10];
      MatMul [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul)" fontsize=10];
      cast_input -> MatMul;
      coefficient -> MatMul;
      MatMul -> mul_result;

      add_result [shape=box label="add_result" fontsize=10];
      Add [shape=box style="filled,rounded" color=orange label="Add\n(Add)" fontsize=10];
      mul_result -> Add;
      intercepts -> Add;
      Add -> add_result;

      next_activations [shape=box label="next_activations" fontsize=10];
      Relu [shape=box style="filled,rounded" color=orange label="Relu\n(Relu)" fontsize=10];
      add_result -> Relu;
      Relu -> next_activations;

      mul_result1 [shape=box label="mul_result1" fontsize=10];
      MatMul1 [shape=box style="filled,rounded" color=orange label="MatMul\n(MatMul1)" fontsize=10];
      next_activations -> MatMul1;
      coefficient1 -> MatMul1;
      MatMul1 -> mul_result1;

      add_result1 [shape=box label="add_result1" fontsize=10];
      Add1 [shape=box style="filled,rounded" color=orange label="Add\n(Add1)" fontsize=10];
      mul_result1 -> Add1;
      intercepts1 -> Add1;
      Add1 -> add_result1;

      out_activations_result [shape=box label="out_activations_result" fontsize=10];
      Relu1 [shape=box style="filled,rounded" color=orange label="Sigmoid\n(Relu1)" fontsize=10];
      add_result1 -> Relu1;
      Relu1 -> out_activations_result;

      Identity [shape=box style="filled,rounded" color=orange label="Identity\n(Identity)" fontsize=10];
      out_activations_result -> Identity;
      Identity -> probabilities;

      binariser_output [shape=box label="binariser_output" fontsize=10];
      N8 [shape=box style="filled,rounded" color=orange label="Binarizer\n(N8)\nthreshold=0.5" fontsize=10];
      out_activations_result -> N8;
      N8 -> binariser_output;

      Cast1 [shape=box style="filled,rounded" color=orange label="Cast\n(Cast1)\nto=7" fontsize=10];
      binariser_output -> Cast1;
      Cast1 -> label;
    }