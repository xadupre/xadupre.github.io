
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_reducesum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_reducesum.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_reducesum.py:


.. _l-b-reducesum:

Compares implementations of ReduceSum
=====================================

This example compares the :epkg:`numpy:sum` from numpy,
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.

.. GENERATED FROM PYTHON SOURCE LINES 20-32

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxReduceSumApi11
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import (
        code_optimisation, custom_reducesum_rk_float)
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 33-35

ReduceSum implementations
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 35-176

.. code-block:: default


    try:
        from tensorflow.math import reduce_sum as tf_reduce_sum
        from tensorflow import convert_to_tensor
    except ImportError:
        tf_reduce_sum = None
    try:
        from torch import sum as torch_sum, from_numpy
    except ImportError:
        torch_sum = None


    def build_ort_reducesum(axes, op_version=14):  # opset=13, 14, ...
        node = OnnxReduceSumApi11('x', axes=axes, op_version=op_version,
                                  output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(axes, repeat=5, number=5, name="ReduceSum", shape_fct=None,
                     custom_impl=False):
        if shape_fct is None:
            def shape_fct(dim):
                return (3, dim, 1, 128, 64)
        ort_fct = build_ort_reducesum(axes)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.array(axes, dtype=numpy.int64)
                  for _ in range(n_arrays)]
            info = dict(axes=axes, shape=shape)

            # numpy
            ctx = dict(
                xs=xs, ys=ys,
                fct=lambda x, y: numpy.sum(x, *y),
                loop_fct=loop_fct)
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            ctx['fct'] = ort_fct
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if custom_impl:
                if axes != (0, ):
                    raise RuntimeError(
                        "Unexpected axes=%r." % axes)
                ctx['fct'] = lambda x, y: custom_reducesum_rk_float(x)
                ctx['xs'] = [x.reshape((x.shape[0], -1)).copy() for x in xs]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'custom'
                obs.update(info)
                res.append(obs)

            if tf_reduce_sum is not None:
                # tensorflow
                ctx['fct'] = tf_reduce_sum
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = ys
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_sum is not None:
                def torch_sum1(x, y):
                    return torch_sum(x, y[0])

                def torch_sum2(x, y):
                    return torch_sum(torch_sum(x, y[1]), y[0])

                # torch
                ctx['fct'] = torch_sum1 if len(axes) == 1 else torch_sum2
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r"
                       " lower better" % (name, shape_name, axes))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r"
                      " higher better" % (name, shape_name, axes))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 177-186

Reduction on a particular case KR
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KR means kept axis - reduced axis

(8, 24, 48, N), axis=(3, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default


    axes = (3, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesum_001.png
   :alt: ReduceSum benchmark '(8, 24, 48, N)' - (3,) lower better, ReduceSum Speedup, baseline=numpy '(8, 24, 48, N)' - (3,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesum_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:03,  2.88it/s]     18%|#8        | 2/11 [00:00<00:03,  2.63it/s]     27%|##7       | 3/11 [00:01<00:03,  2.20it/s]     36%|###6      | 4/11 [00:02<00:04,  1.71it/s]     45%|####5     | 5/11 [00:03<00:04,  1.32it/s]     55%|#####4    | 6/11 [00:04<00:04,  1.07it/s]     64%|######3   | 7/11 [00:06<00:04,  1.20s/it]     73%|#######2  | 8/11 [00:08<00:04,  1.49s/it]     82%|########1 | 9/11 [00:11<00:04,  2.01s/it]     91%|######### | 10/11 [00:13<00:01,  1.89s/it]    100%|##########| 11/11 [00:16<00:00,  2.24s/it]    100%|##########| 11/11 [00:16<00:00,  1.47s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.004925</td>
          <td>0.005901</td>
          <td>0.007681</td>
          <td>0.009697</td>
          <td>0.012678</td>
          <td>0.015606</td>
          <td>0.019759</td>
          <td>0.024888</td>
          <td>0.038164</td>
          <td>0.019816</td>
          <td>0.038910</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001212</td>
          <td>0.001440</td>
          <td>0.002014</td>
          <td>0.003479</td>
          <td>0.004763</td>
          <td>0.006324</td>
          <td>0.008719</td>
          <td>0.008969</td>
          <td>0.013474</td>
          <td>0.007421</td>
          <td>0.011954</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.003062</td>
          <td>0.003310</td>
          <td>0.004042</td>
          <td>0.005465</td>
          <td>0.006649</td>
          <td>0.007520</td>
          <td>0.009237</td>
          <td>0.010413</td>
          <td>0.013356</td>
          <td>0.006457</td>
          <td>0.010750</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.003459</td>
          <td>0.003183</td>
          <td>0.003757</td>
          <td>0.004425</td>
          <td>0.005972</td>
          <td>0.006391</td>
          <td>0.007756</td>
          <td>0.008840</td>
          <td>0.011783</td>
          <td>0.006593</td>
          <td>0.011235</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 193-202

Reduction on a particular case RK
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
RK means reduced axis - kept axis

(8, 24, 48, N), axis=(0, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 202-209

.. code-block:: default


    axes = (0, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim),
                               custom_impl=True)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesum_002.png
   :alt: ReduceSum benchmark '(8, 24, 48, N)' - (0,) lower better, ReduceSum Speedup, baseline=numpy '(8, 24, 48, N)' - (0,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesum_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:03,  3.33it/s]     18%|#8        | 2/11 [00:00<00:03,  2.71it/s]     27%|##7       | 3/11 [00:01<00:04,  2.00it/s]     36%|###6      | 4/11 [00:02<00:05,  1.34it/s]     45%|####5     | 5/11 [00:04<00:06,  1.05s/it]     55%|#####4    | 6/11 [00:06<00:06,  1.39s/it]     64%|######3   | 7/11 [00:09<00:07,  1.89s/it]     73%|#######2  | 8/11 [00:12<00:07,  2.46s/it]     82%|########1 | 9/11 [00:18<00:06,  3.42s/it]     91%|######### | 10/11 [00:21<00:03,  3.23s/it]    100%|##########| 11/11 [00:26<00:00,  3.92s/it]    100%|##########| 11/11 [00:26<00:00,  2.41s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>custom</th>
          <td>0.003753</td>
          <td>0.004072</td>
          <td>0.005494</td>
          <td>0.008255</td>
          <td>0.010558</td>
          <td>0.012635</td>
          <td>0.015204</td>
          <td>0.018808</td>
          <td>0.026706</td>
          <td>0.013709</td>
          <td>0.025416</td>
        </tr>
        <tr>
          <th>numpy</th>
          <td>0.001469</td>
          <td>0.002694</td>
          <td>0.004790</td>
          <td>0.008072</td>
          <td>0.014165</td>
          <td>0.018634</td>
          <td>0.030315</td>
          <td>0.039596</td>
          <td>0.060020</td>
          <td>0.030999</td>
          <td>0.061201</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001666</td>
          <td>0.002657</td>
          <td>0.004878</td>
          <td>0.009642</td>
          <td>0.012272</td>
          <td>0.017972</td>
          <td>0.025850</td>
          <td>0.032970</td>
          <td>0.049801</td>
          <td>0.024931</td>
          <td>0.050296</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002810</td>
          <td>0.003377</td>
          <td>0.004221</td>
          <td>0.006125</td>
          <td>0.007706</td>
          <td>0.008922</td>
          <td>0.011169</td>
          <td>0.012753</td>
          <td>0.016965</td>
          <td>0.008138</td>
          <td>0.014343</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001003</td>
          <td>0.001393</td>
          <td>0.002515</td>
          <td>0.004233</td>
          <td>0.006117</td>
          <td>0.007420</td>
          <td>0.008889</td>
          <td>0.011199</td>
          <td>0.016789</td>
          <td>0.008523</td>
          <td>0.017294</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 210-219

Reduction on a particular case KRK
++++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(1, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 219-225

.. code-block:: default


    axes = (1, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesum_003.png
   :alt: ReduceSum benchmark '(8, 24, 48, N)' - (1, 2) lower better, ReduceSum Speedup, baseline=numpy '(8, 24, 48, N)' - (1, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesum_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:04,  2.44it/s]     18%|#8        | 2/11 [00:00<00:03,  2.54it/s]     27%|##7       | 3/11 [00:01<00:04,  1.93it/s]     36%|###6      | 4/11 [00:02<00:05,  1.26it/s]     45%|####5     | 5/11 [00:04<00:06,  1.17s/it]     55%|#####4    | 6/11 [00:06<00:07,  1.56s/it]     64%|######3   | 7/11 [00:10<00:08,  2.15s/it]     73%|#######2  | 8/11 [00:14<00:08,  2.96s/it]     82%|########1 | 9/11 [00:21<00:08,  4.08s/it]     91%|######### | 10/11 [00:25<00:04,  4.05s/it]    100%|##########| 11/11 [00:33<00:00,  5.40s/it]    100%|##########| 11/11 [00:33<00:00,  3.08s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.003595</td>
          <td>0.006656</td>
          <td>0.012415</td>
          <td>0.024650</td>
          <td>0.038252</td>
          <td>0.048243</td>
          <td>0.072700</td>
          <td>0.093094</td>
          <td>0.147466</td>
          <td>0.075167</td>
          <td>0.158731</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.007707</td>
          <td>0.001656</td>
          <td>0.002919</td>
          <td>0.005293</td>
          <td>0.007877</td>
          <td>0.009721</td>
          <td>0.014728</td>
          <td>0.018248</td>
          <td>0.027623</td>
          <td>0.014522</td>
          <td>0.030770</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002505</td>
          <td>0.003084</td>
          <td>0.004993</td>
          <td>0.006789</td>
          <td>0.008610</td>
          <td>0.011120</td>
          <td>0.011557</td>
          <td>0.031360</td>
          <td>0.016693</td>
          <td>0.034138</td>
          <td>0.074652</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001340</td>
          <td>0.001588</td>
          <td>0.001996</td>
          <td>0.003682</td>
          <td>0.005839</td>
          <td>0.008109</td>
          <td>0.010946</td>
          <td>0.013210</td>
          <td>0.022101</td>
          <td>0.010379</td>
          <td>0.024448</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 226-228

(8, 24 * 48, N), axis=1
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 228-234

.. code-block:: default


    axes = (1, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24 * 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesum_004.png
   :alt: ReduceSum benchmark '(8, 1152, N)' - (1,) lower better, ReduceSum Speedup, baseline=numpy '(8, 1152, N)' - (1,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesum_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:04,  2.33it/s]     18%|#8        | 2/11 [00:00<00:03,  2.61it/s]     27%|##7       | 3/11 [00:01<00:03,  2.24it/s]     36%|###6      | 4/11 [00:02<00:04,  1.65it/s]     45%|####5     | 5/11 [00:03<00:04,  1.21it/s]     55%|#####4    | 6/11 [00:04<00:05,  1.07s/it]     64%|######3   | 7/11 [00:07<00:05,  1.42s/it]     73%|#######2  | 8/11 [00:10<00:05,  1.98s/it]     82%|########1 | 9/11 [00:14<00:05,  2.59s/it]     91%|######### | 10/11 [00:16<00:02,  2.63s/it]    100%|##########| 11/11 [00:22<00:00,  3.50s/it]    100%|##########| 11/11 [00:22<00:00,  2.03s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005167</td>
          <td>0.005953</td>
          <td>0.007906</td>
          <td>0.011351</td>
          <td>0.014146</td>
          <td>0.016821</td>
          <td>0.022019</td>
          <td>0.026465</td>
          <td>0.037808</td>
          <td>0.018543</td>
          <td>0.034579</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.007703</td>
          <td>0.001655</td>
          <td>0.002899</td>
          <td>0.005241</td>
          <td>0.007893</td>
          <td>0.009286</td>
          <td>0.014722</td>
          <td>0.018199</td>
          <td>0.027649</td>
          <td>0.014070</td>
          <td>0.031713</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002458</td>
          <td>0.003098</td>
          <td>0.004549</td>
          <td>0.006618</td>
          <td>0.008637</td>
          <td>0.011267</td>
          <td>0.011610</td>
          <td>0.031106</td>
          <td>0.016566</td>
          <td>0.034262</td>
          <td>0.072294</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.000642</td>
          <td>0.000924</td>
          <td>0.001222</td>
          <td>0.002831</td>
          <td>0.005278</td>
          <td>0.008574</td>
          <td>0.013143</td>
          <td>0.019753</td>
          <td>0.025915</td>
          <td>0.016359</td>
          <td>0.031315</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 235-237

(2, 8, 12, 24, 2, N), axis=(2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 237-243

.. code-block:: default


    axes = (2, 3)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (2, 8, 12, 24, 2, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesum_005.png
   :alt: ReduceSum benchmark '(2, 8, 12, 24, 2, N)' - (2, 3) lower better, ReduceSum Speedup, baseline=numpy '(2, 8, 12, 24, 2, N)' - (2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesum_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  3.82it/s]     18%|#8        | 2/11 [00:00<00:03,  2.92it/s]     27%|##7       | 3/11 [00:01<00:04,  1.94it/s]     36%|###6      | 4/11 [00:02<00:05,  1.25it/s]     45%|####5     | 5/11 [00:04<00:07,  1.18s/it]     55%|#####4    | 6/11 [00:06<00:07,  1.55s/it]     64%|######3   | 7/11 [00:10<00:08,  2.18s/it]     73%|#######2  | 8/11 [00:14<00:08,  2.92s/it]     82%|########1 | 9/11 [00:21<00:08,  4.13s/it]     91%|######### | 10/11 [00:25<00:04,  4.07s/it]    100%|##########| 11/11 [00:33<00:00,  5.35s/it]    100%|##########| 11/11 [00:33<00:00,  3.06s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.003641</td>
          <td>0.006695</td>
          <td>0.014641</td>
          <td>0.025168</td>
          <td>0.039446</td>
          <td>0.048471</td>
          <td>0.077213</td>
          <td>0.097234</td>
          <td>0.152437</td>
          <td>0.075559</td>
          <td>0.163937</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001171</td>
          <td>0.001788</td>
          <td>0.002837</td>
          <td>0.005144</td>
          <td>0.007775</td>
          <td>0.009587</td>
          <td>0.013996</td>
          <td>0.018538</td>
          <td>0.026432</td>
          <td>0.016323</td>
          <td>0.031631</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.003168</td>
          <td>0.003211</td>
          <td>0.004870</td>
          <td>0.006091</td>
          <td>0.007719</td>
          <td>0.008421</td>
          <td>0.010410</td>
          <td>0.017201</td>
          <td>0.019647</td>
          <td>0.027536</td>
          <td>0.059746</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001271</td>
          <td>0.001960</td>
          <td>0.002348</td>
          <td>0.005056</td>
          <td>0.006509</td>
          <td>0.008804</td>
          <td>0.012946</td>
          <td>0.015722</td>
          <td>0.024234</td>
          <td>0.013042</td>
          <td>0.024881</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 244-249

Reduction on a particular case RKR
++++++++++++++++++++++++++++++++++

(N, 64, 16, 16), axis=(0, 2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 249-257

.. code-block:: default


    axes = (0, 2, 3)
    df, piv, ax = benchmark_op(
        axes, shape_fct=lambda dim: (dim, 64, 16, 16))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesum.py", line 251, in <module>
        df, piv, ax = benchmark_op(
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesum.py", line 83, in benchmark_op
        obs = measure_time(
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_venv/lib/python3.9/site-packages/cpyquickhelper/numbers/speed_measure.py", line 86, in measure_time
        res = numpy.array(tim.repeat(repeat=repeat, number=number))
      File "/usr/local/lib/python3.9/timeit.py", line 205, in repeat
        t = self.timeit(number)
      File "/usr/local/lib/python3.9/timeit.py", line 177, in timeit
        timing = self.inner(it, self.timer)
      File "<timeit-src>", line 6, in inner
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesum.py", line 58, in loop_fct
        fct(x, y)
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesum.py", line 81, in <lambda>
        fct=lambda x, y: numpy.sum(x, *y),
      File "<__array_function__ internals>", line 5, in sum
      File "/usr/local/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 2259, in sum
        return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,
      File "/usr/local/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 86, in _wrapreduction
        return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
    TypeError: output must be an array




.. GENERATED FROM PYTHON SOURCE LINES 258-263

Reduction on a particular case RKRK
+++++++++++++++++++++++++++++++++++

(8, 24, 48, N), axis=(0, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 263-269

.. code-block:: default


    axes = (0, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")


.. GENERATED FROM PYTHON SOURCE LINES 270-276

Conclusion
++++++++++

Some of the configurations should be investigated.
:ref:`l-reducesum-problem1`. The reduction on tensorflow
in one dimension seems to be lazy.

.. GENERATED FROM PYTHON SOURCE LINES 276-284

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "reducesum"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  25.264 seconds)


.. _sphx_glr_download_gyexamples_plot_op_reducesum.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_reducesum.py <plot_op_reducesum.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_reducesum.ipynb <plot_op_reducesum.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
