
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_add.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_add.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_add.py:


.. _l-b-add:

Compares implementations of Add
===============================

This example compares the addition of *numpy*
to :epkg:`onnxruntime` implementation.
Function :epkg:`numpy:add` is repeated 3 times. This minimizes the cost
of copying the data from python to an external library.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.
The numpy implementation is not the best,
it allocates more buffers than necessary because parameter *out*
is not used to reuse buffers.


.. contents::
    :local:

.. GENERATED FROM PYTHON SOURCE LINES 21-32

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxAdd
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 33-35

Add implementations
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 35-163

.. code-block:: default


    try:
        from tensorflow.math import add as tf_add
        from tensorflow import convert_to_tensor
    except ImportError:
        tf_add = None
    try:
        from torch import add as torch_add, from_numpy
    except ImportError:
        torch_add = None


    def build_ort_add(op_version=12):
        node1 = OnnxAdd('x', 'y', op_version=op_version)
        node2 = OnnxAdd(node1, 'y', op_version=op_version)
        node = OnnxAdd(node2, 'y', op_version=op_version, output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType()),
                                   ('y', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x, 'y': y})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(repeat=5, number=2, name="Add", shape_fcts=None):
        if shape_fcts is None:
            def shape_fct(dim):
                return (5, dim, dim)
            shape_fcts = (shape_fct, shape_fct)
        ort_fct = build_ort_add()
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024, 1536, 2048, 2560]):
            shape1 = shape_fcts[0](dim)
            shape2 = shape_fcts[1](dim)
            n_arrays = (16 if dim < 512 else 4) if dim < 2048 else 4
            if len(shape1) > 3:
                n_arrays = int(n_arrays / 4)
            xs = [numpy.random.rand(*shape1).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.random.rand(*shape2).astype(numpy.float32)
                  for _ in range(n_arrays)]
            info = dict(shape1=shape1, shape2=shape2)

            # numpy
            ctx = dict(
                xs=xs, ys=ys,
                fct=lambda x, y: numpy.add(numpy.add(numpy.add(x, y), y), y),
                loop_fct=loop_fct)
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            ctx['fct'] = ort_fct
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_add is not None:
                # tensorflow
                ctx['fct'] = lambda x, y: tf_add(tf_add(tf_add(x, y), y), y)
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = [convert_to_tensor(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_add is not None:
                # torch
                ctx['fct'] = lambda x, y: torch_add(
                    torch_add(torch_add(x, y), y), y)
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape1_name = str(shape1).replace(str(dim), "N")
        shape2_name = str(shape2).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%s + %s"
                       " lower better" % (name, shape1_name, shape2_name))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%s + %s"
                      " higher better" % (name, shape1_name, shape2_name))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 164-166

(5, N, N) + (5, N, N)
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 166-171

.. code-block:: default


    df, piv, ax = benchmark_op()
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_add_001.png
   :alt: Add benchmark (5, N, N) + (5, N, N) lower better, Add Speedup, baseline=numpy (5, N, N) + (5, N, N) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_add_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|7         | 1/14 [00:00<00:05,  2.46it/s]     21%|##1       | 3/14 [00:00<00:01,  6.17it/s]     29%|##8       | 4/14 [00:00<00:01,  6.19it/s]     36%|###5      | 5/14 [00:01<00:01,  4.94it/s]     43%|####2     | 6/14 [00:01<00:02,  3.33it/s]     50%|#####     | 7/14 [00:02<00:03,  2.07it/s]     57%|#####7    | 8/14 [00:03<00:04,  1.29it/s]     64%|######4   | 9/14 [00:07<00:07,  1.54s/it]     71%|#######1  | 10/14 [00:08<00:05,  1.46s/it]     79%|#######8  | 11/14 [00:13<00:07,  2.52s/it]     86%|########5 | 12/14 [00:27<00:12,  6.01s/it]     93%|#########2| 13/14 [01:16<00:18, 18.92s/it]    100%|##########| 14/14 [02:16<00:00, 31.36s/it]    100%|##########| 14/14 [02:16<00:00,  9.75s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
          <th>1536</th>
          <th>2048</th>
          <th>2560</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.000314</td>
          <td>0.000416</td>
          <td>0.000715</td>
          <td>0.001835</td>
          <td>0.003155</td>
          <td>0.007190</td>
          <td>0.021194</td>
          <td>0.034518</td>
          <td>0.081044</td>
          <td>0.033116</td>
          <td>0.130231</td>
          <td>0.287295</td>
          <td>0.565019</td>
          <td>1.573621</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001282</td>
          <td>0.001409</td>
          <td>0.001688</td>
          <td>0.002757</td>
          <td>0.006229</td>
          <td>0.011522</td>
          <td>0.015433</td>
          <td>0.025312</td>
          <td>0.058594</td>
          <td>0.022914</td>
          <td>0.088781</td>
          <td>0.199842</td>
          <td>0.374033</td>
          <td>0.709534</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.008739</td>
          <td>0.002773</td>
          <td>0.002990</td>
          <td>0.003850</td>
          <td>0.006986</td>
          <td>0.015822</td>
          <td>0.020658</td>
          <td>0.031541</td>
          <td>0.057738</td>
          <td>0.020350</td>
          <td>0.071768</td>
          <td>0.220724</td>
          <td>0.428405</td>
          <td>0.619630</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.013614</td>
          <td>0.001165</td>
          <td>0.001858</td>
          <td>0.004582</td>
          <td>0.005977</td>
          <td>0.006273</td>
          <td>0.008531</td>
          <td>0.014601</td>
          <td>0.044052</td>
          <td>0.017106</td>
          <td>0.064175</td>
          <td>0.143493</td>
          <td>0.281820</td>
          <td>0.481524</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 172-174

(5, N, N) + (5, N, 1)
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 174-182

.. code-block:: default


    shape_fcts = (lambda dim: (5, dim, dim),
                  lambda dim: (5, dim, 1))

    df, piv, ax = benchmark_op(shape_fcts=shape_fcts)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_add_002.png
   :alt: Add benchmark (5, N, N) + (5, N, 1) lower better, Add Speedup, baseline=numpy (5, N, N) + (5, N, 1) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_add_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|7         | 1/14 [00:00<00:02,  5.67it/s]     21%|##1       | 3/14 [00:00<00:01,  8.69it/s]     29%|##8       | 4/14 [00:00<00:01,  7.11it/s]     36%|###5      | 5/14 [00:00<00:01,  4.99it/s]     43%|####2     | 6/14 [00:01<00:02,  3.50it/s]     50%|#####     | 7/14 [00:02<00:03,  2.27it/s]     57%|#####7    | 8/14 [00:03<00:03,  1.55it/s]     64%|######4   | 9/14 [00:05<00:06,  1.23s/it]     71%|#######1  | 10/14 [00:06<00:04,  1.16s/it]     79%|#######8  | 11/14 [00:10<00:05,  1.98s/it]     86%|########5 | 12/14 [00:19<00:07,  3.96s/it]     93%|#########2| 13/14 [00:37<00:08,  8.24s/it]    100%|##########| 14/14 [01:18<00:00, 18.23s/it]    100%|##########| 14/14 [01:18<00:00,  5.62s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
          <th>1536</th>
          <th>2048</th>
          <th>2560</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.000856</td>
          <td>0.001009</td>
          <td>0.001453</td>
          <td>0.002779</td>
          <td>0.005096</td>
          <td>0.008437</td>
          <td>0.022131</td>
          <td>0.034717</td>
          <td>0.078231</td>
          <td>0.031491</td>
          <td>0.139114</td>
          <td>0.279091</td>
          <td>0.559810</td>
          <td>1.278485</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001494</td>
          <td>0.001701</td>
          <td>0.002150</td>
          <td>0.003674</td>
          <td>0.007313</td>
          <td>0.011122</td>
          <td>0.013241</td>
          <td>0.019968</td>
          <td>0.048523</td>
          <td>0.019240</td>
          <td>0.073530</td>
          <td>0.167862</td>
          <td>0.299486</td>
          <td>0.659207</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.013325</td>
          <td>0.003228</td>
          <td>0.003713</td>
          <td>0.005626</td>
          <td>0.009772</td>
          <td>0.015396</td>
          <td>0.022690</td>
          <td>0.026900</td>
          <td>0.049526</td>
          <td>0.017804</td>
          <td>0.055136</td>
          <td>0.137246</td>
          <td>0.268110</td>
          <td>0.573639</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001213</td>
          <td>0.001370</td>
          <td>0.002138</td>
          <td>0.004828</td>
          <td>0.006362</td>
          <td>0.006247</td>
          <td>0.007718</td>
          <td>0.009471</td>
          <td>0.034009</td>
          <td>0.013447</td>
          <td>0.050324</td>
          <td>0.113583</td>
          <td>0.275257</td>
          <td>0.593575</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 183-185

(5, N, N) + (5, 1, N)
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 185-193

.. code-block:: default


    shape_fcts = (lambda dim: (5, dim, dim),
                  lambda dim: (5, 1, dim))

    df, piv, ax = benchmark_op(shape_fcts=shape_fcts)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_add_003.png
   :alt: Add benchmark (5, N, N) + (5, 1, N) lower better, Add Speedup, baseline=numpy (5, N, N) + (5, 1, N) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_add_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]      7%|7         | 1/14 [00:00<00:01,  7.37it/s]     21%|##1       | 3/14 [00:00<00:01,  9.55it/s]     29%|##8       | 4/14 [00:00<00:01,  7.44it/s]     36%|###5      | 5/14 [00:00<00:01,  4.99it/s]     43%|####2     | 6/14 [00:01<00:02,  3.50it/s]     50%|#####     | 7/14 [00:02<00:03,  2.29it/s]     57%|#####7    | 8/14 [00:03<00:03,  1.54it/s]     64%|######4   | 9/14 [00:05<00:06,  1.22s/it]     71%|#######1  | 10/14 [00:06<00:04,  1.16s/it]     79%|#######8  | 11/14 [00:10<00:05,  1.94s/it]     86%|########5 | 12/14 [00:18<00:07,  3.90s/it]     93%|#########2| 13/14 [00:38<00:08,  8.75s/it]    100%|##########| 14/14 [01:13<00:00, 16.59s/it]    100%|##########| 14/14 [01:13<00:00,  5.26s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
          <th>1536</th>
          <th>2048</th>
          <th>2560</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.000844</td>
          <td>0.000998</td>
          <td>0.001299</td>
          <td>0.002496</td>
          <td>0.004806</td>
          <td>0.007907</td>
          <td>0.021391</td>
          <td>0.034351</td>
          <td>0.076592</td>
          <td>0.031535</td>
          <td>0.122271</td>
          <td>0.264473</td>
          <td>0.552337</td>
          <td>1.244747</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001502</td>
          <td>0.001699</td>
          <td>0.002155</td>
          <td>0.003780</td>
          <td>0.007574</td>
          <td>0.011310</td>
          <td>0.013246</td>
          <td>0.020848</td>
          <td>0.048536</td>
          <td>0.020048</td>
          <td>0.074279</td>
          <td>0.167172</td>
          <td>0.301683</td>
          <td>0.469339</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.009225</td>
          <td>0.003276</td>
          <td>0.003735</td>
          <td>0.005590</td>
          <td>0.009671</td>
          <td>0.015538</td>
          <td>0.022716</td>
          <td>0.028296</td>
          <td>0.051068</td>
          <td>0.017967</td>
          <td>0.056266</td>
          <td>0.134486</td>
          <td>0.391137</td>
          <td>0.593351</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001244</td>
          <td>0.001424</td>
          <td>0.002221</td>
          <td>0.005223</td>
          <td>0.007731</td>
          <td>0.006532</td>
          <td>0.007228</td>
          <td>0.010357</td>
          <td>0.032165</td>
          <td>0.014324</td>
          <td>0.050672</td>
          <td>0.113287</td>
          <td>0.389354</td>
          <td>0.307991</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 194-196

(5, N, 5, N) + (1, N, 1, 1)
+++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 196-204

.. code-block:: default


    shape_fcts = (lambda dim: (5, dim, 5, dim),
                  lambda dim: (1, dim, 1, 1))

    df, piv, ax = benchmark_op(shape_fcts=shape_fcts)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_add_004.png
   :alt: Add benchmark (5, N, 5, N) + (1, N, 1, 1) lower better, Add Speedup, baseline=numpy (5, N, 5, N) + (1, N, 1, 1) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_add_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/14 [00:00<?, ?it/s]     21%|##1       | 3/14 [00:00<00:00, 28.17it/s]     43%|####2     | 6/14 [00:00<00:01,  6.31it/s]     57%|#####7    | 8/14 [00:02<00:02,  2.15it/s]     64%|######4   | 9/14 [00:05<00:04,  1.05it/s]     71%|#######1  | 10/14 [00:06<00:04,  1.00s/it]     79%|#######8  | 11/14 [00:11<00:05,  1.97s/it]     86%|########5 | 12/14 [00:38<00:16,  8.30s/it]     93%|#########2| 13/14 [01:56<00:27, 27.16s/it]    100%|##########| 14/14 [04:00<00:00, 54.12s/it]    100%|##########| 14/14 [04:00<00:00, 17.19s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
          <th>1536</th>
          <th>2048</th>
          <th>2560</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.000259</td>
          <td>0.000356</td>
          <td>0.000760</td>
          <td>0.002601</td>
          <td>0.006725</td>
          <td>0.011637</td>
          <td>0.023858</td>
          <td>0.038951</td>
          <td>0.094634</td>
          <td>0.037877</td>
          <td>0.150494</td>
          <td>0.890345</td>
          <td>4.437272</td>
          <td>7.067374</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000410</td>
          <td>0.000502</td>
          <td>0.000873</td>
          <td>0.002132</td>
          <td>0.003883</td>
          <td>0.006446</td>
          <td>0.014863</td>
          <td>0.023863</td>
          <td>0.056299</td>
          <td>0.024370</td>
          <td>0.096515</td>
          <td>0.867989</td>
          <td>1.683101</td>
          <td>2.733781</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.000831</td>
          <td>0.000945</td>
          <td>0.001398</td>
          <td>0.004572</td>
          <td>0.006970</td>
          <td>0.008493</td>
          <td>0.014739</td>
          <td>0.020967</td>
          <td>0.043874</td>
          <td>0.017263</td>
          <td>0.082833</td>
          <td>0.261950</td>
          <td>0.454442</td>
          <td>0.684437</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.000374</td>
          <td>0.000571</td>
          <td>0.001395</td>
          <td>0.002823</td>
          <td>0.001855</td>
          <td>0.003240</td>
          <td>0.010237</td>
          <td>0.018430</td>
          <td>0.039048</td>
          <td>0.015718</td>
          <td>0.078010</td>
          <td>0.280639</td>
          <td>0.483365</td>
          <td>0.729247</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-214

Conclusion
++++++++++

It is difficult to have a final conclusion as the addition
of two vectors is of the same order of magnitude of a copy
between python and the C++ code of onnxruntime, pytorch or
tensorflow. numpy is much better of small vectors.
onnxruntime, pytorch and tensorflow are not optimized
on this case because it is not very common in deep learning.

.. GENERATED FROM PYTHON SOURCE LINES 214-222

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "add"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_op_add_005.png
   :alt: plot op add
   :srcset: /gyexamples/images/sphx_glr_plot_op_add_005.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 9 minutes  24.489 seconds)


.. _sphx_glr_download_gyexamples_plot_op_add.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_add.py <plot_op_add.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_add.ipynb <plot_op_add.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
