
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_transpose.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_transpose.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_transpose.py:


.. _l-b-transpose:

Compares implementations of Tranpose
====================================

This example compares the :epkg:`numpy:transpose` from numpy,
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.
Both :epkg:`numpy` and :epkg:`torch` have lazy implementations,
the function switches dimensions and strides but does not move
any data. That's why function *contiguous* was called in both cases.

.. GENERATED FROM PYTHON SOURCE LINES 23-34

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxTranspose
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 35-41

Transpose implementations
+++++++++++++++++++++++++

Function einsum is used from tensorflow and pytorch
instead of transpose. The equation reflects the required
transposition.

.. GENERATED FROM PYTHON SOURCE LINES 41-178

.. code-block:: default


    try:
        from tensorflow import transpose as tf_transpose, convert_to_tensor
    except ImportError:
        tf_transpose = None
    try:
        from torch import einsum as torch_einsum, from_numpy
    except ImportError:
        torch_einsum = None


    def build_ort_transpose(perm, op_version=12):
        node = OnnxTranspose('x', perm=perm, op_version=op_version,
                             output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def perm2eq(perm):
        first = "".join(chr(97 + i) for i in range(len(perm)))
        second = "".join(first[p] for p in perm)
        return "%s->%s" % (first, second)


    def benchmark_op(perm, repeat=5, number=5, name="Transpose", shape_fct=None):
        if shape_fct is None:
            def shape_fct(dim): return (3, dim, 1, 512)
        ort_fct = build_ort_transpose(perm)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [perm for _ in range(n_arrays)]
            equation = perm2eq(perm)
            info = dict(perm=perm, shape=shape)

            # numpy
            ctx = dict(
                xs=xs, ys=ys,
                fct=lambda x, y: numpy.ascontiguousarray(numpy.transpose(x, y)),
                loop_fct=loop_fct)
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            ctx['fct'] = ort_fct
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_transpose is not None:
                # tensorflow
                ctx['fct'] = tf_transpose
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = [convert_to_tensor(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

                # tensorflow with copy
                ctx['fct'] = lambda x, y: tf_transpose(
                    convert_to_tensor(x)).numpy()
                ctx['xs'] = xs
                ctx['ys'] = ys
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf_copy'
                obs.update(info)
                res.append(obs)

            if torch_einsum is not None:
                # torch
                ctx['fct'] = lambda x, y: torch_einsum(equation, x).contiguous()
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r - %s"
                       " lower better" % (name, shape_name, perm, equation))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r - %s"
                      " higher better" % (name, shape_name, perm, equation))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 179-181

First permutation: (1, 0, 2, 3)
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 181-187

.. code-block:: default


    perm = (1, 0, 2, 3)
    df, piv, ax = benchmark_op(perm)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_transpose_001.png
   :alt: Transpose benchmark '(3, N, 1, 512)' - (1, 0, 2, 3) - abcd->bacd lower better, Transpose Speedup, baseline=numpy '(3, N, 1, 512)' - (1, 0, 2, 3) - abcd->bacd higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_transpose_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:04,  2.04it/s]     18%|#8        | 2/11 [00:00<00:03,  2.70it/s]     27%|##7       | 3/11 [00:01<00:02,  2.68it/s]     36%|###6      | 4/11 [00:01<00:03,  2.10it/s]     45%|####5     | 5/11 [00:02<00:03,  1.66it/s]     55%|#####4    | 6/11 [00:03<00:03,  1.39it/s]     64%|######3   | 7/11 [00:04<00:03,  1.09it/s]     73%|#######2  | 8/11 [00:06<00:03,  1.13s/it]     82%|########1 | 9/11 [00:08<00:02,  1.50s/it]     91%|######### | 10/11 [00:09<00:01,  1.39s/it]    100%|##########| 11/11 [00:12<00:00,  1.61s/it]    100%|##########| 11/11 [00:12<00:00,  1.10s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.000357</td>
          <td>0.000526</td>
          <td>0.000842</td>
          <td>0.001994</td>
          <td>0.003562</td>
          <td>0.004095</td>
          <td>0.006170</td>
          <td>0.007491</td>
          <td>0.010601</td>
          <td>0.005855</td>
          <td>0.009999</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000845</td>
          <td>0.001023</td>
          <td>0.001655</td>
          <td>0.003994</td>
          <td>0.006357</td>
          <td>0.007611</td>
          <td>0.010882</td>
          <td>0.013314</td>
          <td>0.019811</td>
          <td>0.009842</td>
          <td>0.018903</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002422</td>
          <td>0.001396</td>
          <td>0.002036</td>
          <td>0.003954</td>
          <td>0.003769</td>
          <td>0.004206</td>
          <td>0.005586</td>
          <td>0.006545</td>
          <td>0.008913</td>
          <td>0.004275</td>
          <td>0.006767</td>
        </tr>
        <tr>
          <th>tf_copy</th>
          <td>0.005434</td>
          <td>0.006795</td>
          <td>0.008369</td>
          <td>0.012020</td>
          <td>0.015166</td>
          <td>0.016863</td>
          <td>0.023168</td>
          <td>0.027177</td>
          <td>0.037899</td>
          <td>0.018202</td>
          <td>0.034327</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.009206</td>
          <td>0.001045</td>
          <td>0.001146</td>
          <td>0.001661</td>
          <td>0.001896</td>
          <td>0.002169</td>
          <td>0.002533</td>
          <td>0.003626</td>
          <td>0.006061</td>
          <td>0.003498</td>
          <td>0.005973</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 188-190

Second permutation: (0, 1, 3, 2)
++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 190-196

.. code-block:: default


    perm = (1, 0, 3, 2)
    df, piv, ax = benchmark_op(perm)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_transpose_002.png
   :alt: Transpose benchmark '(3, N, 1, 512)' - (1, 0, 3, 2) - abcd->badc lower better, Transpose Speedup, baseline=numpy '(3, N, 1, 512)' - (1, 0, 3, 2) - abcd->badc higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_transpose_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  3.47it/s]     18%|#8        | 2/11 [00:00<00:03,  2.99it/s]     27%|##7       | 3/11 [00:01<00:03,  2.44it/s]     36%|###6      | 4/11 [00:01<00:03,  1.83it/s]     45%|####5     | 5/11 [00:02<00:04,  1.36it/s]     55%|#####4    | 6/11 [00:04<00:04,  1.08it/s]     64%|######3   | 7/11 [00:06<00:04,  1.21s/it]     73%|#######2  | 8/11 [00:08<00:04,  1.54s/it]     82%|########1 | 9/11 [00:11<00:04,  2.08s/it]     91%|######### | 10/11 [00:13<00:01,  1.94s/it]    100%|##########| 11/11 [00:16<00:00,  2.26s/it]    100%|##########| 11/11 [00:16<00:00,  1.47s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.000353</td>
          <td>0.000505</td>
          <td>0.000889</td>
          <td>0.001770</td>
          <td>0.003489</td>
          <td>0.004244</td>
          <td>0.005754</td>
          <td>0.006962</td>
          <td>0.010784</td>
          <td>0.006109</td>
          <td>0.010590</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001552</td>
          <td>0.002651</td>
          <td>0.004525</td>
          <td>0.009537</td>
          <td>0.014891</td>
          <td>0.018355</td>
          <td>0.027153</td>
          <td>0.033819</td>
          <td>0.051801</td>
          <td>0.026018</td>
          <td>0.051048</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002826</td>
          <td>0.003175</td>
          <td>0.003726</td>
          <td>0.004858</td>
          <td>0.006169</td>
          <td>0.007090</td>
          <td>0.009586</td>
          <td>0.011153</td>
          <td>0.015002</td>
          <td>0.007089</td>
          <td>0.012202</td>
        </tr>
        <tr>
          <th>tf_copy</th>
          <td>0.005412</td>
          <td>0.006589</td>
          <td>0.008354</td>
          <td>0.011009</td>
          <td>0.014238</td>
          <td>0.017256</td>
          <td>0.022497</td>
          <td>0.028733</td>
          <td>0.037815</td>
          <td>0.018009</td>
          <td>0.031856</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.000931</td>
          <td>0.001027</td>
          <td>0.001476</td>
          <td>0.001489</td>
          <td>0.001505</td>
          <td>0.001505</td>
          <td>0.002541</td>
          <td>0.003687</td>
          <td>0.006380</td>
          <td>0.003058</td>
          <td>0.005995</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 197-207

Third permutation: (0, 2, 1, 3)
++++++++++++++++++++++++++++++++

This transposition is equivalent to a reshape
because it only moves the empty axis.
The comparison is entirely fair as the cost
for onnxruntime includes a copy from numpy to
onnxruntime, a reshape = another copy, than a copy
back to numpy. Tensorflow and pytorch seems
to have a lazy implementation in this case.

.. GENERATED FROM PYTHON SOURCE LINES 207-213

.. code-block:: default


    perm = (0, 2, 1, 3)
    df, piv, ax = benchmark_op(perm)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_transpose_003.png
   :alt: Transpose benchmark '(3, N, 1, 512)' - (0, 2, 1, 3) - abcd->acbd lower better, Transpose Speedup, baseline=numpy '(3, N, 1, 512)' - (0, 2, 1, 3) - abcd->acbd higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_transpose_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:01,  5.03it/s]     18%|#8        | 2/11 [00:00<00:02,  4.49it/s]     27%|##7       | 3/11 [00:00<00:02,  3.80it/s]     36%|###6      | 4/11 [00:01<00:02,  2.95it/s]     45%|####5     | 5/11 [00:01<00:02,  2.26it/s]     55%|#####4    | 6/11 [00:02<00:02,  1.87it/s]     64%|######3   | 7/11 [00:03<00:02,  1.52it/s]     73%|#######2  | 8/11 [00:04<00:02,  1.24it/s]     82%|########1 | 9/11 [00:06<00:02,  1.04s/it]     91%|######### | 10/11 [00:06<00:00,  1.05it/s]    100%|##########| 11/11 [00:08<00:00,  1.08s/it]    100%|##########| 11/11 [00:08<00:00,  1.33it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.000114</td>
          <td>0.000115</td>
          <td>0.000117</td>
          <td>0.000114</td>
          <td>0.000116</td>
          <td>0.000115</td>
          <td>0.000113</td>
          <td>0.000115</td>
          <td>0.000113</td>
          <td>0.000051</td>
          <td>0.000049</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000772</td>
          <td>0.000921</td>
          <td>0.001526</td>
          <td>0.003835</td>
          <td>0.006448</td>
          <td>0.007261</td>
          <td>0.008411</td>
          <td>0.010223</td>
          <td>0.014919</td>
          <td>0.007362</td>
          <td>0.013944</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.000837</td>
          <td>0.000834</td>
          <td>0.000834</td>
          <td>0.000836</td>
          <td>0.000836</td>
          <td>0.000834</td>
          <td>0.000833</td>
          <td>0.000836</td>
          <td>0.000835</td>
          <td>0.000337</td>
          <td>0.000340</td>
        </tr>
        <tr>
          <th>tf_copy</th>
          <td>0.005259</td>
          <td>0.006523</td>
          <td>0.008454</td>
          <td>0.011194</td>
          <td>0.014780</td>
          <td>0.016690</td>
          <td>0.022029</td>
          <td>0.027612</td>
          <td>0.037140</td>
          <td>0.018311</td>
          <td>0.031004</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.000507</td>
          <td>0.000506</td>
          <td>0.000507</td>
          <td>0.000504</td>
          <td>0.000511</td>
          <td>0.000506</td>
          <td>0.000507</td>
          <td>0.000508</td>
          <td>0.000506</td>
          <td>0.000208</td>
          <td>0.000206</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 214-216

Fourth permutation: (3, 1, 2, 0)
++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 216-222

.. code-block:: default


    perm = (3, 1, 2, 0)
    df, piv, ax = benchmark_op(perm)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_transpose_004.png
   :alt: Transpose benchmark '(3, N, 1, 512)' - (3, 1, 2, 0) - abcd->dbca lower better, Transpose Speedup, baseline=numpy '(3, N, 1, 512)' - (3, 1, 2, 0) - abcd->dbca higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_transpose_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:03,  2.75it/s]     18%|#8        | 2/11 [00:00<00:03,  2.27it/s]     27%|##7       | 3/11 [00:01<00:04,  1.76it/s]     36%|###6      | 4/11 [00:02<00:05,  1.23it/s]     45%|####5     | 5/11 [00:04<00:07,  1.22s/it]     55%|#####4    | 6/11 [00:08<00:10,  2.06s/it]     64%|######3   | 7/11 [00:18<00:19,  4.79s/it]     73%|#######2  | 8/11 [00:33<00:23,  7.87s/it]     82%|########1 | 9/11 [00:55<00:24, 12.46s/it]     91%|######### | 10/11 [01:07<00:12, 12.20s/it]    100%|##########| 11/11 [01:30<00:00, 15.66s/it]    100%|##########| 11/11 [01:30<00:00,  8.27s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.001458</td>
          <td>0.002713</td>
          <td>0.005617</td>
          <td>0.011351</td>
          <td>0.022781</td>
          <td>0.050959</td>
          <td>0.145723</td>
          <td>0.196874</td>
          <td>0.305830</td>
          <td>0.158828</td>
          <td>0.336325</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001919</td>
          <td>0.003375</td>
          <td>0.006498</td>
          <td>0.013485</td>
          <td>0.026292</td>
          <td>0.057736</td>
          <td>0.206572</td>
          <td>0.301326</td>
          <td>0.474116</td>
          <td>0.244492</td>
          <td>0.483965</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002798</td>
          <td>0.002983</td>
          <td>0.003676</td>
          <td>0.004773</td>
          <td>0.006196</td>
          <td>0.007549</td>
          <td>0.012666</td>
          <td>0.015689</td>
          <td>0.022773</td>
          <td>0.011320</td>
          <td>0.020828</td>
        </tr>
        <tr>
          <th>tf_copy</th>
          <td>0.005283</td>
          <td>0.006392</td>
          <td>0.008444</td>
          <td>0.011509</td>
          <td>0.014433</td>
          <td>0.017925</td>
          <td>0.022307</td>
          <td>0.026571</td>
          <td>0.037739</td>
          <td>0.018033</td>
          <td>0.030867</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.002602</td>
          <td>0.003648</td>
          <td>0.003659</td>
          <td>0.004650</td>
          <td>0.005763</td>
          <td>0.010312</td>
          <td>0.023983</td>
          <td>0.032537</td>
          <td>0.053999</td>
          <td>0.027093</td>
          <td>0.059563</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 223-225

Fifth permutation: (1, 2, 3, 0)
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 225-231

.. code-block:: default


    perm = (1, 2, 3, 0)
    df, piv, ax = benchmark_op(perm)
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_transpose_005.png
   :alt: Transpose benchmark '(3, N, 1, 512)' - (1, 2, 3, 0) - abcd->bcda lower better, Transpose Speedup, baseline=numpy '(3, N, 1, 512)' - (1, 2, 3, 0) - abcd->bcda higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_transpose_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:03,  3.21it/s]     18%|#8        | 2/11 [00:00<00:03,  2.73it/s]     27%|##7       | 3/11 [00:01<00:03,  2.23it/s]     36%|###6      | 4/11 [00:02<00:04,  1.65it/s]     45%|####5     | 5/11 [00:03<00:04,  1.22it/s]     55%|#####4    | 6/11 [00:04<00:05,  1.01s/it]     64%|######3   | 7/11 [00:06<00:05,  1.30s/it]     73%|#######2  | 8/11 [00:08<00:04,  1.64s/it]     82%|########1 | 9/11 [00:12<00:04,  2.21s/it]     91%|######### | 10/11 [00:14<00:02,  2.06s/it]    100%|##########| 11/11 [00:17<00:00,  2.42s/it]    100%|##########| 11/11 [00:17<00:00,  1.58s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.001224</td>
          <td>0.002251</td>
          <td>0.004293</td>
          <td>0.008548</td>
          <td>0.013573</td>
          <td>0.017140</td>
          <td>0.026317</td>
          <td>0.033392</td>
          <td>0.051636</td>
          <td>0.026375</td>
          <td>0.052329</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000906</td>
          <td>0.001212</td>
          <td>0.002072</td>
          <td>0.004712</td>
          <td>0.007287</td>
          <td>0.008841</td>
          <td>0.011340</td>
          <td>0.014152</td>
          <td>0.021561</td>
          <td>0.010831</td>
          <td>0.020661</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002759</td>
          <td>0.002910</td>
          <td>0.003289</td>
          <td>0.004115</td>
          <td>0.005044</td>
          <td>0.005630</td>
          <td>0.007341</td>
          <td>0.008376</td>
          <td>0.010765</td>
          <td>0.004904</td>
          <td>0.007774</td>
        </tr>
        <tr>
          <th>tf_copy</th>
          <td>0.005368</td>
          <td>0.006490</td>
          <td>0.008392</td>
          <td>0.011268</td>
          <td>0.015537</td>
          <td>0.015920</td>
          <td>0.022425</td>
          <td>0.026665</td>
          <td>0.038203</td>
          <td>0.018141</td>
          <td>0.032687</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001721</td>
          <td>0.002660</td>
          <td>0.002783</td>
          <td>0.003705</td>
          <td>0.003609</td>
          <td>0.004378</td>
          <td>0.004566</td>
          <td>0.005766</td>
          <td>0.008470</td>
          <td>0.004219</td>
          <td>0.007534</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 232-234

Six th permutation: (1, 2, 4, 3, 0)
+++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 234-240

.. code-block:: default


    perm = (1, 2, 4, 3, 0)
    df, piv, ax = benchmark_op(perm, shape_fct=lambda dim: (3, dim, 1, 8, 512))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_transpose_006.png
   :alt: Transpose benchmark '(3, N, 1, 8, 512)' - (1, 2, 4, 3, 0) - abcde->bceda lower better, Transpose Speedup, baseline=numpy '(3, N, 1, 8, 512)' - (1, 2, 4, 3, 0) - abcde->bceda higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_transpose_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:12,  1.22s/it]     18%|#8        | 2/11 [00:03<00:15,  1.69s/it]     27%|##7       | 3/11 [00:06<00:20,  2.56s/it]     36%|###6      | 4/11 [00:13<00:29,  4.23s/it]     45%|####5     | 5/11 [00:23<00:38,  6.44s/it]     55%|#####4    | 6/11 [00:37<00:43,  8.68s/it]     64%|######3   | 7/11 [00:57<00:49, 12.48s/it]     73%|#######2  | 8/11 [01:23<00:50, 16.68s/it]     82%|########1 | 9/11 [02:02<00:47, 23.97s/it]     91%|######### | 10/11 [02:23<00:22, 22.80s/it]    100%|##########| 11/11 [03:03<00:00, 28.30s/it]    100%|##########| 11/11 [03:03<00:00, 16.72s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.010560</td>
          <td>0.021184</td>
          <td>0.041402</td>
          <td>0.082003</td>
          <td>0.127453</td>
          <td>0.162951</td>
          <td>0.253547</td>
          <td>0.324156</td>
          <td>0.505170</td>
          <td>0.258848</td>
          <td>0.517549</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.012844</td>
          <td>0.025028</td>
          <td>0.046537</td>
          <td>0.091659</td>
          <td>0.142005</td>
          <td>0.180976</td>
          <td>0.281606</td>
          <td>0.359628</td>
          <td>0.560323</td>
          <td>0.286472</td>
          <td>0.570864</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.005640</td>
          <td>0.006455</td>
          <td>0.009827</td>
          <td>0.015022</td>
          <td>0.020458</td>
          <td>0.024587</td>
          <td>0.035347</td>
          <td>0.043934</td>
          <td>0.065635</td>
          <td>0.033573</td>
          <td>0.063592</td>
        </tr>
        <tr>
          <th>tf_copy</th>
          <td>0.011896</td>
          <td>0.018628</td>
          <td>0.030878</td>
          <td>0.053628</td>
          <td>0.080479</td>
          <td>0.096955</td>
          <td>0.156031</td>
          <td>0.191495</td>
          <td>0.299872</td>
          <td>0.142751</td>
          <td>0.309307</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.006201</td>
          <td>0.006542</td>
          <td>0.009833</td>
          <td>0.018414</td>
          <td>0.027724</td>
          <td>0.034485</td>
          <td>0.052243</td>
          <td>0.066996</td>
          <td>0.103880</td>
          <td>0.051986</td>
          <td>0.103494</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 241-249

Conclusion
++++++++++

All libraries have similar implementations.
:epkg:`onnxruntime` measures includes 2 mores copies,
one to copy from numpy container to onnxruntime container,
another one to copy back from onnxruntime container to numpy.
Parallelisation should be investigated.

.. GENERATED FROM PYTHON SOURCE LINES 249-257

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "transpose"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_op_transpose_007.png
   :alt: plot op transpose
   :srcset: /gyexamples/images/sphx_glr_plot_op_transpose_007.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  45.280 seconds)


.. _sphx_glr_download_gyexamples_plot_op_transpose.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_transpose.py <plot_op_transpose.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_transpose.ipynb <plot_op_transpose.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
