
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_profile.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_profile.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_profile.py:


.. _l-example-profile:

Profile the execution of a runtime
==================================

The following example shows how to profile the execution
of a model with different runtime.

.. contents::
    :local:

Training and converting a model
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 16-37

.. code-block:: default


    import numpy
    import matplotlib.pyplot as plt
    from sklearn.datasets import load_boston
    from sklearn.ensemble import AdaBoostRegressor
    from sklearn.tree import DecisionTreeRegressor
    from pyquickhelper.pycode.profiling import profile
    from mlprodict.onnx_conv import to_onnx
    from mlprodict.onnxrt import OnnxInference
    from mlprodict.onnxrt import get_ir_version

    data = load_boston()
    X, y = data.data, data.target

    dt = DecisionTreeRegressor()
    dt.fit(X, y)
    onx = to_onnx(dt, X[:1].astype(numpy.float32), target_opset=11)
    oinf = OnnxInference(onx, runtime='python_compiled')
    print(oinf)




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_profile.py", line 25, in <module>
        from mlprodict.onnxrt import get_ir_version
    ImportError: cannot import name 'get_ir_version' from 'mlprodict.onnxrt' (/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/sphinxdoc/source/mlprodict/onnxrt/__init__.py)




.. GENERATED FROM PYTHON SOURCE LINES 38-40

Profiling and comparison with scikit-learn
++++++++++++++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 40-55

.. code-block:: default


    X32 = X.astype(numpy.float32)


    def runlocaldt():
        for i in range(0, 5000):
            oinf.run({'X': X32[:10]})
            dt.predict(X[:10])


    print("profiling...")
    txt = profile(runlocaldt, pyinst_format='text')
    print(txt[1])



.. GENERATED FROM PYTHON SOURCE LINES 56-61

Profiling for AdaBoostRegressor
+++++++++++++++++++++++++++++++

The next example shows how long the python runtime
spends in each operator.

.. GENERATED FROM PYTHON SOURCE LINES 61-68

.. code-block:: default


    ada = AdaBoostRegressor()
    ada.fit(X, y)
    onx = to_onnx(ada, X[:1].astype(numpy.float32), target_opset=11)
    oinf = OnnxInference(onx, runtime='python_compiled')
    print(oinf)


.. GENERATED FROM PYTHON SOURCE LINES 69-70

The profiling.

.. GENERATED FROM PYTHON SOURCE LINES 70-81

.. code-block:: default



    def runlocal():
        for i in range(0, 500):
            oinf.run({'X': X32})


    print("profiling...")
    txt = profile(runlocal, pyinst_format='text')
    print(txt[1])


.. GENERATED FROM PYTHON SOURCE LINES 82-86

With a different runtime
++++++++++++++++++++++++

Let's compare to :epkg:`onnxruntime`.

.. GENERATED FROM PYTHON SOURCE LINES 86-100

.. code-block:: default


    onx.ir_version = get_ir_version(11)
    oinf = OnnxInference(onx, runtime='onnxruntime1')


    def runlocalort():
        for i in range(0, 500):
            oinf.run({'X': X32})


    print("profiling with onnxruntime...")
    txt = profile(runlocalort, pyinst_format='text')
    print(txt[1])


.. GENERATED FROM PYTHON SOURCE LINES 101-112

py-spy
++++++

:epkg:`py-spy` may be used to dig into native
functions. An example can be found at:
`Profiling AdaBoostRegressor
<http://www.xavierdupre.fr/app/_benchmarks/
helpsphinx/onnx/onnx_profiling_reg_adaboost.html#
profiling-adaboostregressor>`_.
The last piece of code uses the standard
python profiler.

.. GENERATED FROM PYTHON SOURCE LINES 112-121

.. code-block:: default


    pr, df = profile(runlocal, as_df=True)

    ax = df[['namefct', 'cum_tall']].head(n=15).set_index(
        'namefct').plot(kind='bar', figsize=(8, 3), rot=15)
    ax.set_title("Simple profiling")
    for la in ax.get_xticklabels():
        la.set_horizontalalignment('right')
    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  0.034 seconds)


.. _sphx_glr_download_gyexamples_plot_profile.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_profile.py <plot_profile.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_profile.ipynb <plot_profile.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
