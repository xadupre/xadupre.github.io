
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_reducesumsquare.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_reducesumsquare.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_reducesumsquare.py:


.. _l-b-reducesumsquare:

Compares implementations of ReduceSumSquare
===========================================

This example compares the *numpy* for the operator *ReduceSumSquare*
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxReduceSumSquare
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 32-34

ReduceSumSquare implementations
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 34-160

.. code-block:: default


    try:
        from tensorflow.math import reduce_sum as tf_reduce_sum
        from tensorflow import convert_to_tensor
    except ImportError:
        tf_reduce_sum = None
    try:
        from torch import sum as torch_sum, from_numpy
    except ImportError:
        torch_sum = None


    def build_ort_reducesumsquare(axes, op_version=14):  # opset=13, 14, ...
        node = OnnxReduceSumSquare('x', axes=axes, op_version=op_version,
                                   output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(axes, repeat=2, number=5, name="ReduceSumSquare", shape_fct=None):
        if shape_fct is None:
            def shape_fct(dim):
                return (3, dim, 1, 128, 64)
        ort_fct = build_ort_reducesumsquare(axes)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.array(axes, dtype=numpy.int64)
                  for _ in range(n_arrays)]
            info = dict(axes=axes, shape=shape)

            # numpy
            ctx = dict(
                xs=xs, ys=ys,
                fct=lambda x, y: numpy.sum(x ** 2, *y),
                loop_fct=loop_fct)
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            ctx['fct'] = ort_fct
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_reduce_sum is not None:
                # tensorflow
                ctx['fct'] = lambda x, y: tf_reduce_sum(x ** 2, y)
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = ys
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_sum is not None:
                def torch_sum1(x, y):
                    return torch_sum(x ** 2, y[0])

                def torch_sum2(x, y):
                    return torch_sum(torch_sum(x ** 2, y[1]), y[0])

                # torch
                ctx['fct'] = torch_sum1 if len(axes) == 1 else torch_sum2
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r"
                       " lower better" % (name, shape_name, axes))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r"
                      " higher better" % (name, shape_name, axes))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 161-170

Reduction on a particular case KR
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(3, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 170-176

.. code-block:: default


    axes = (3, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_001.png
   :alt: ReduceSumSquare benchmark '(8, 24, 48, N)' - (3,) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 24, 48, N)' - (3,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:15,  1.58s/it]     18%|#8        | 2/11 [00:02<00:13,  1.45s/it]     27%|##7       | 3/11 [00:04<00:13,  1.67s/it]     36%|###6      | 4/11 [00:06<00:12,  1.74s/it]     45%|####5     | 5/11 [00:09<00:12,  2.01s/it]     55%|#####4    | 6/11 [00:11<00:10,  2.14s/it]     64%|######3   | 7/11 [00:14<00:09,  2.37s/it]     73%|#######2  | 8/11 [00:17<00:08,  2.74s/it]     82%|########1 | 9/11 [00:22<00:06,  3.27s/it]     91%|######### | 10/11 [00:24<00:02,  2.90s/it]    100%|##########| 11/11 [00:27<00:00,  3.07s/it]    100%|##########| 11/11 [00:27<00:00,  2.54s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.006181</td>
          <td>0.008826</td>
          <td>0.012483</td>
          <td>0.018670</td>
          <td>0.026495</td>
          <td>0.033579</td>
          <td>0.046562</td>
          <td>0.059994</td>
          <td>0.090614</td>
          <td>0.047537</td>
          <td>0.095109</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001538</td>
          <td>0.002176</td>
          <td>0.002677</td>
          <td>0.004899</td>
          <td>0.007955</td>
          <td>0.009179</td>
          <td>0.011474</td>
          <td>0.014128</td>
          <td>0.020230</td>
          <td>0.010900</td>
          <td>0.018956</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.147824</td>
          <td>0.118604</td>
          <td>0.167639</td>
          <td>0.141806</td>
          <td>0.183608</td>
          <td>0.157962</td>
          <td>0.163983</td>
          <td>0.203748</td>
          <td>0.210881</td>
          <td>0.087258</td>
          <td>0.109231</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 177-186

Reduction on a particular case RK
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(0, )
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default


    axes = (0, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_002.png
   :alt: ReduceSumSquare benchmark '(8, 24, 48, N)' - (0,) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 24, 48, N)' - (0,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:08,  1.12it/s]     18%|#8        | 2/11 [00:02<00:09,  1.11s/it]     27%|##7       | 3/11 [00:03<00:11,  1.42s/it]     36%|###6      | 4/11 [00:06<00:14,  2.03s/it]     45%|####5     | 5/11 [00:10<00:14,  2.45s/it]     55%|#####4    | 6/11 [00:13<00:13,  2.67s/it]     64%|######3   | 7/11 [00:17<00:12,  3.12s/it]     73%|#######2  | 8/11 [00:22<00:11,  3.70s/it]     82%|########1 | 9/11 [00:28<00:08,  4.42s/it]     91%|######### | 10/11 [00:30<00:03,  3.87s/it]    100%|##########| 11/11 [00:35<00:00,  4.01s/it]    100%|##########| 11/11 [00:35<00:00,  3.20s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.002677</td>
          <td>0.005719</td>
          <td>0.010070</td>
          <td>0.017688</td>
          <td>0.028340</td>
          <td>0.037166</td>
          <td>0.057435</td>
          <td>0.072518</td>
          <td>0.116120</td>
          <td>0.057836</td>
          <td>0.115867</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001700</td>
          <td>0.002711</td>
          <td>0.004898</td>
          <td>0.009925</td>
          <td>0.013652</td>
          <td>0.017818</td>
          <td>0.025793</td>
          <td>0.032996</td>
          <td>0.049789</td>
          <td>0.026137</td>
          <td>0.049646</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.081948</td>
          <td>0.111710</td>
          <td>0.154624</td>
          <td>0.247651</td>
          <td>0.247233</td>
          <td>0.214680</td>
          <td>0.262958</td>
          <td>0.311617</td>
          <td>0.313712</td>
          <td>0.115689</td>
          <td>0.144442</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 193-202

Reduction on a particular case KRK
++++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(1, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 202-208

.. code-block:: default


    axes = (1, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_003.png
   :alt: ReduceSumSquare benchmark '(8, 24, 48, N)' - (1, 2) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 24, 48, N)' - (1, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:07,  1.26it/s]     18%|#8        | 2/11 [00:01<00:08,  1.08it/s]     27%|##7       | 3/11 [00:03<00:09,  1.20s/it]     36%|###6      | 4/11 [00:05<00:11,  1.70s/it]     45%|####5     | 5/11 [00:08<00:12,  2.15s/it]     55%|#####4    | 6/11 [00:11<00:12,  2.44s/it]     64%|######3   | 7/11 [00:17<00:13,  3.44s/it]     73%|#######2  | 8/11 [00:24<00:14,  4.74s/it]     82%|########1 | 9/11 [00:32<00:11,  5.72s/it]     91%|######### | 10/11 [00:37<00:05,  5.41s/it]    100%|##########| 11/11 [00:45<00:00,  6.30s/it]    100%|##########| 11/11 [00:45<00:00,  4.15s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.004968</td>
          <td>0.009799</td>
          <td>0.017924</td>
          <td>0.034020</td>
          <td>0.052499</td>
          <td>0.066060</td>
          <td>0.102772</td>
          <td>0.130349</td>
          <td>0.199938</td>
          <td>0.103928</td>
          <td>0.210616</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001490</td>
          <td>0.002371</td>
          <td>0.005162</td>
          <td>0.010539</td>
          <td>0.012890</td>
          <td>0.029250</td>
          <td>0.028614</td>
          <td>0.170020</td>
          <td>0.061849</td>
          <td>0.136599</td>
          <td>0.302943</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.069996</td>
          <td>0.082852</td>
          <td>0.119642</td>
          <td>0.183246</td>
          <td>0.199402</td>
          <td>0.166115</td>
          <td>0.355614</td>
          <td>0.376059</td>
          <td>0.405998</td>
          <td>0.167439</td>
          <td>0.194333</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 209-211

(8, 24 * 48, N), axis=1
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 211-217

.. code-block:: default


    axes = (1, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24 * 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_004.png
   :alt: ReduceSumSquare benchmark '(8, 1152, N)' - (1,) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 1152, N)' - (1,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:18,  1.85s/it]     18%|#8        | 2/11 [00:03<00:16,  1.89s/it]     27%|##7       | 3/11 [00:05<00:12,  1.60s/it]     36%|###6      | 4/11 [00:07<00:13,  1.90s/it]     45%|####5     | 5/11 [00:10<00:13,  2.19s/it]     55%|#####4    | 6/11 [00:13<00:12,  2.47s/it]     64%|######3   | 7/11 [00:16<00:10,  2.74s/it]     73%|#######2  | 8/11 [00:21<00:10,  3.41s/it]     82%|########1 | 9/11 [00:26<00:07,  3.89s/it]     91%|######### | 10/11 [00:29<00:03,  3.73s/it]    100%|##########| 11/11 [00:36<00:00,  4.58s/it]    100%|##########| 11/11 [00:36<00:00,  3.28s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.006445</td>
          <td>0.008930</td>
          <td>0.012796</td>
          <td>0.020390</td>
          <td>0.028057</td>
          <td>0.035834</td>
          <td>0.049329</td>
          <td>0.061447</td>
          <td>0.091979</td>
          <td>0.045699</td>
          <td>0.089666</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001496</td>
          <td>0.002352</td>
          <td>0.004700</td>
          <td>0.008626</td>
          <td>0.013274</td>
          <td>0.026774</td>
          <td>0.027203</td>
          <td>0.148989</td>
          <td>0.063515</td>
          <td>0.137514</td>
          <td>0.302562</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.174241</td>
          <td>0.174849</td>
          <td>0.098034</td>
          <td>0.187555</td>
          <td>0.196886</td>
          <td>0.198943</td>
          <td>0.194237</td>
          <td>0.196828</td>
          <td>0.217066</td>
          <td>0.092444</td>
          <td>0.133390</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 218-220

(2, 8, 12, 24, 2, N), axis=(2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 220-226

.. code-block:: default


    axes = (2, 3)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (2, 8, 12, 24, 2, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_005.png
   :alt: ReduceSumSquare benchmark '(2, 8, 12, 24, 2, N)' - (2, 3) lower better, ReduceSumSquare Speedup, baseline=numpy '(2, 8, 12, 24, 2, N)' - (2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:18,  1.81s/it]     18%|#8        | 2/11 [00:03<00:16,  1.89s/it]     27%|##7       | 3/11 [00:05<00:15,  1.99s/it]     36%|###6      | 4/11 [00:08<00:15,  2.21s/it]     45%|####5     | 5/11 [00:12<00:18,  3.04s/it]     55%|#####4    | 6/11 [00:17<00:18,  3.71s/it]     64%|######3   | 7/11 [00:23<00:17,  4.28s/it]     73%|#######2  | 8/11 [00:29<00:14,  4.97s/it]     82%|########1 | 9/11 [00:37<00:11,  5.96s/it]     91%|######### | 10/11 [00:42<00:05,  5.55s/it]    100%|##########| 11/11 [00:50<00:00,  6.36s/it]    100%|##########| 11/11 [00:50<00:00,  4.62s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005047</td>
          <td>0.010037</td>
          <td>0.018026</td>
          <td>0.034599</td>
          <td>0.052939</td>
          <td>0.067618</td>
          <td>0.103806</td>
          <td>0.131711</td>
          <td>0.203364</td>
          <td>0.104909</td>
          <td>0.218271</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001299</td>
          <td>0.002757</td>
          <td>0.005273</td>
          <td>0.009501</td>
          <td>0.009586</td>
          <td>0.017647</td>
          <td>0.021785</td>
          <td>0.060642</td>
          <td>0.102327</td>
          <td>0.128796</td>
          <td>0.288689</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.172208</td>
          <td>0.175655</td>
          <td>0.177975</td>
          <td>0.191151</td>
          <td>0.357315</td>
          <td>0.377904</td>
          <td>0.357312</td>
          <td>0.376845</td>
          <td>0.387392</td>
          <td>0.167647</td>
          <td>0.187043</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 227-232

Reduction on a particular case RKR
++++++++++++++++++++++++++++++++++

(N, 64, 16, 16), axis=(0, 2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 232-240

.. code-block:: default


    axes = (0, 2, 3)
    df, piv, ax = benchmark_op(
        axes, shape_fct=lambda dim: (dim, 64, 16, 16))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 234, in <module>
        df, piv, ax = benchmark_op(
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 81, in benchmark_op
        obs = measure_time(
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_venv/lib/python3.9/site-packages/cpyquickhelper/numbers/speed_measure.py", line 86, in measure_time
        res = numpy.array(tim.repeat(repeat=repeat, number=number))
      File "/usr/local/lib/python3.9/timeit.py", line 205, in repeat
        t = self.timeit(number)
      File "/usr/local/lib/python3.9/timeit.py", line 177, in timeit
        timing = self.inner(it, self.timer)
      File "<timeit-src>", line 6, in inner
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 57, in loop_fct
        fct(x, y)
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 79, in <lambda>
        fct=lambda x, y: numpy.sum(x ** 2, *y),
      File "<__array_function__ internals>", line 5, in sum
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_venv/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 2259, in sum
        return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_venv/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 86, in _wrapreduction
        return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
    TypeError: output must be an array




.. GENERATED FROM PYTHON SOURCE LINES 241-246

Reduction on a particular case RKRK
+++++++++++++++++++++++++++++++++++

(8, 24, 48, N), axis=(0, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 246-252

.. code-block:: default


    axes = (0, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")


.. GENERATED FROM PYTHON SOURCE LINES 253-259

Conclusion
++++++++++

Some of the configurations should be investigated.
:ref:`l-reducesum-problem1`. The reduction on tensorflow
in one dimension seems to be lazy.

.. GENERATED FROM PYTHON SOURCE LINES 259-267

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "reducesumsquare"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  27.433 seconds)


.. _sphx_glr_download_gyexamples_plot_op_reducesumsquare.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_reducesumsquare.py <plot_op_reducesumsquare.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_reducesumsquare.ipynb <plot_op_reducesumsquare.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
