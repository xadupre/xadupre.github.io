
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_reducesumsquare.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_reducesumsquare.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_reducesumsquare.py:


.. _l-b-reducesumsquare:

Compares implementations of ReduceSumSquare
===========================================

This example compares the *numpy* for the operator *ReduceSumSquare*
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxReduceSumSquare
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 32-34

ReduceSumSquare implementations
+++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 34-160

.. code-block:: default


    try:
        from tensorflow.math import reduce_sum as tf_reduce_sum
        from tensorflow import convert_to_tensor
    except ImportError:
        reduce_sum = None
    try:
        from torch import sum as torch_sum, from_numpy
    except ImportError:
        torch_sum = None


    def build_ort_reducesumsquare(axes, op_version=14):  # opset=13, 14, ...
        node = OnnxReduceSumSquare('x', axes=axes, op_version=op_version,
                                   output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(axes, repeat=2, number=5, name="ReduceSumSquare", shape_fct=None):
        if shape_fct is None:
            def shape_fct(dim):
                return (3, dim, 1, 128, 64)
        ort_fct = build_ort_reducesumsquare(axes)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.array(axes, dtype=numpy.int64)
                  for _ in range(n_arrays)]
            info = dict(axes=axes, shape=shape)

            # numpy
            ctx = dict(
                xs=xs, ys=ys,
                fct=lambda x, y: numpy.sum(x ** 2, *y),
                loop_fct=loop_fct)
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            ctx['fct'] = ort_fct
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_reduce_sum is not None:
                # tensorflow
                ctx['fct'] = lambda x, y: tf_reduce_sum(x ** 2, y)
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = ys
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_sum is not None:
                def torch_sum1(x, y):
                    return torch_sum(x ** 2, y[0])

                def torch_sum2(x, y):
                    return torch_sum(torch_sum(x ** 2, y[1]), y[0])

                # torch
                ctx['fct'] = torch_sum1 if len(axes) == 1 else torch_sum2
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r"
                       " lower better" % (name, shape_name, axes))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r"
                      " higher better" % (name, shape_name, axes))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 161-170

Reduction on a particular case KR
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(3, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 170-176

.. code-block:: default


    axes = (3, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_001.png
   :alt: ReduceSumSquare benchmark '(8, 24, 48, N)' - (3,) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 24, 48, N)' - (3,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:06,  1.58it/s]     18%|#8        | 2/11 [00:01<00:04,  1.93it/s]     27%|##7       | 3/11 [00:01<00:04,  1.62it/s]     36%|###6      | 4/11 [00:02<00:05,  1.19it/s]     45%|####5     | 5/11 [00:04<00:06,  1.16s/it]     55%|#####4    | 6/11 [00:06<00:07,  1.51s/it]     64%|######3   | 7/11 [00:10<00:08,  2.07s/it]     73%|#######2  | 8/11 [00:14<00:08,  2.71s/it]     82%|########1 | 9/11 [00:20<00:07,  3.81s/it]     91%|######### | 10/11 [00:23<00:03,  3.62s/it]    100%|##########| 11/11 [00:29<00:00,  4.45s/it]    100%|##########| 11/11 [00:29<00:00,  2.73s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.006108</td>
          <td>0.008738</td>
          <td>0.012517</td>
          <td>0.018818</td>
          <td>0.026590</td>
          <td>0.033958</td>
          <td>0.046380</td>
          <td>0.059294</td>
          <td>0.092420</td>
          <td>0.046686</td>
          <td>0.094895</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001559</td>
          <td>0.002472</td>
          <td>0.003556</td>
          <td>0.006158</td>
          <td>0.009085</td>
          <td>0.011127</td>
          <td>0.018135</td>
          <td>0.019604</td>
          <td>0.029082</td>
          <td>0.014583</td>
          <td>0.029105</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.018379</td>
          <td>0.021819</td>
          <td>0.036241</td>
          <td>0.063732</td>
          <td>0.094481</td>
          <td>0.117300</td>
          <td>0.176388</td>
          <td>0.221984</td>
          <td>0.338907</td>
          <td>0.174207</td>
          <td>0.343015</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.034235</td>
          <td>0.005186</td>
          <td>0.010341</td>
          <td>0.008782</td>
          <td>0.012943</td>
          <td>0.015690</td>
          <td>0.021966</td>
          <td>0.027274</td>
          <td>0.042660</td>
          <td>0.021350</td>
          <td>0.040732</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 177-186

Reduction on a particular case RK
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(0, )
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default


    axes = (0, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_002.png
   :alt: ReduceSumSquare benchmark '(8, 24, 48, N)' - (0,) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 24, 48, N)' - (0,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  4.09it/s]     18%|#8        | 2/11 [00:00<00:03,  2.86it/s]     27%|##7       | 3/11 [00:01<00:04,  1.99it/s]     36%|###6      | 4/11 [00:02<00:05,  1.27it/s]     45%|####5     | 5/11 [00:04<00:06,  1.16s/it]     55%|#####4    | 6/11 [00:06<00:07,  1.55s/it]     64%|######3   | 7/11 [00:10<00:08,  2.18s/it]     73%|#######2  | 8/11 [00:14<00:08,  2.89s/it]     82%|########1 | 9/11 [00:21<00:08,  4.12s/it]     91%|######### | 10/11 [00:24<00:03,  3.92s/it]    100%|##########| 11/11 [00:31<00:00,  4.81s/it]    100%|##########| 11/11 [00:31<00:00,  2.88s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.002621</td>
          <td>0.005825</td>
          <td>0.010165</td>
          <td>0.017958</td>
          <td>0.027428</td>
          <td>0.036240</td>
          <td>0.057205</td>
          <td>0.074314</td>
          <td>0.116030</td>
          <td>0.057424</td>
          <td>0.114902</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001717</td>
          <td>0.005129</td>
          <td>0.005101</td>
          <td>0.010224</td>
          <td>0.012779</td>
          <td>0.018595</td>
          <td>0.026919</td>
          <td>0.033800</td>
          <td>0.052485</td>
          <td>0.027989</td>
          <td>0.052287</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.014480</td>
          <td>0.022072</td>
          <td>0.036708</td>
          <td>0.065137</td>
          <td>0.094952</td>
          <td>0.118414</td>
          <td>0.178414</td>
          <td>0.225017</td>
          <td>0.345231</td>
          <td>0.175846</td>
          <td>0.344243</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.002508</td>
          <td>0.003509</td>
          <td>0.005700</td>
          <td>0.009408</td>
          <td>0.014201</td>
          <td>0.017439</td>
          <td>0.024117</td>
          <td>0.030611</td>
          <td>0.046561</td>
          <td>0.024788</td>
          <td>0.046786</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 193-202

Reduction on a particular case KRK
++++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(1, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 202-208

.. code-block:: default


    axes = (1, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_003.png
   :alt: ReduceSumSquare benchmark '(8, 24, 48, N)' - (1, 2) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 24, 48, N)' - (1, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  3.71it/s]     18%|#8        | 2/11 [00:00<00:03,  2.76it/s]     27%|##7       | 3/11 [00:01<00:04,  1.88it/s]     36%|###6      | 4/11 [00:02<00:06,  1.16it/s]     45%|####5     | 5/11 [00:04<00:07,  1.30s/it]     55%|#####4    | 6/11 [00:07<00:09,  1.88s/it]     64%|######3   | 7/11 [00:11<00:10,  2.58s/it]     73%|#######2  | 8/11 [00:18<00:11,  3.77s/it]     82%|########1 | 9/11 [00:26<00:10,  5.03s/it]     91%|######### | 10/11 [00:31<00:05,  5.13s/it]    100%|##########| 11/11 [00:42<00:00,  6.93s/it]    100%|##########| 11/11 [00:42<00:00,  3.85s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.004984</td>
          <td>0.009850</td>
          <td>0.017938</td>
          <td>0.034677</td>
          <td>0.052332</td>
          <td>0.065907</td>
          <td>0.109991</td>
          <td>0.128703</td>
          <td>0.199778</td>
          <td>0.101810</td>
          <td>0.211301</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001509</td>
          <td>0.002379</td>
          <td>0.004645</td>
          <td>0.008953</td>
          <td>0.013345</td>
          <td>0.054438</td>
          <td>0.028202</td>
          <td>0.148409</td>
          <td>0.064938</td>
          <td>0.139976</td>
          <td>0.304840</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.015517</td>
          <td>0.022063</td>
          <td>0.037064</td>
          <td>0.065214</td>
          <td>0.096560</td>
          <td>0.120881</td>
          <td>0.178094</td>
          <td>0.243298</td>
          <td>0.341699</td>
          <td>0.203825</td>
          <td>0.405288</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001859</td>
          <td>0.002739</td>
          <td>0.003413</td>
          <td>0.007849</td>
          <td>0.013739</td>
          <td>0.019399</td>
          <td>0.025647</td>
          <td>0.033527</td>
          <td>0.052650</td>
          <td>0.027722</td>
          <td>0.053762</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 209-211

(8, 24 * 48, N), axis=1
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 211-217

.. code-block:: default


    axes = (1, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24 * 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_004.png
   :alt: ReduceSumSquare benchmark '(8, 1152, N)' - (1,) lower better, ReduceSumSquare Speedup, baseline=numpy '(8, 1152, N)' - (1,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  3.71it/s]     18%|#8        | 2/11 [00:00<00:03,  2.83it/s]     27%|##7       | 3/11 [00:01<00:04,  1.99it/s]     36%|###6      | 4/11 [00:02<00:05,  1.27it/s]     45%|####5     | 5/11 [00:04<00:06,  1.16s/it]     55%|#####4    | 6/11 [00:06<00:07,  1.58s/it]     64%|######3   | 7/11 [00:10<00:08,  2.19s/it]     73%|#######2  | 8/11 [00:15<00:09,  3.29s/it]     82%|########1 | 9/11 [00:22<00:08,  4.37s/it]     91%|######### | 10/11 [00:27<00:04,  4.53s/it]    100%|##########| 11/11 [00:37<00:00,  6.15s/it]    100%|##########| 11/11 [00:37<00:00,  3.40s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.006321</td>
          <td>0.008923</td>
          <td>0.012942</td>
          <td>0.020975</td>
          <td>0.027997</td>
          <td>0.033839</td>
          <td>0.049380</td>
          <td>0.060313</td>
          <td>0.091509</td>
          <td>0.046578</td>
          <td>0.089093</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001509</td>
          <td>0.002375</td>
          <td>0.004624</td>
          <td>0.008962</td>
          <td>0.013333</td>
          <td>0.026903</td>
          <td>0.028205</td>
          <td>0.147468</td>
          <td>0.064010</td>
          <td>0.150210</td>
          <td>0.309512</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.014290</td>
          <td>0.021790</td>
          <td>0.036867</td>
          <td>0.065366</td>
          <td>0.096230</td>
          <td>0.121440</td>
          <td>0.178266</td>
          <td>0.243723</td>
          <td>0.344852</td>
          <td>0.202402</td>
          <td>0.405149</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001776</td>
          <td>0.002308</td>
          <td>0.002745</td>
          <td>0.007345</td>
          <td>0.012964</td>
          <td>0.018769</td>
          <td>0.026989</td>
          <td>0.036071</td>
          <td>0.052662</td>
          <td>0.027603</td>
          <td>0.055181</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 218-220

(2, 8, 12, 24, 2, N), axis=(2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 220-226

.. code-block:: default


    axes = (2, 3)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (2, 8, 12, 24, 2, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_005.png
   :alt: ReduceSumSquare benchmark '(2, 8, 12, 24, 2, N)' - (2, 3) lower better, ReduceSumSquare Speedup, baseline=numpy '(2, 8, 12, 24, 2, N)' - (2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducesumsquare_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  3.77it/s]     18%|#8        | 2/11 [00:00<00:03,  2.70it/s]     27%|##7       | 3/11 [00:01<00:04,  1.84it/s]     36%|###6      | 4/11 [00:02<00:06,  1.13it/s]     45%|####5     | 5/11 [00:04<00:07,  1.30s/it]     55%|#####4    | 6/11 [00:07<00:08,  1.75s/it]     64%|######3   | 7/11 [00:11<00:09,  2.46s/it]     73%|#######2  | 8/11 [00:16<00:10,  3.38s/it]     82%|########1 | 9/11 [00:25<00:09,  4.91s/it]     91%|######### | 10/11 [00:30<00:05,  5.06s/it]    100%|##########| 11/11 [00:41<00:00,  6.78s/it]    100%|##########| 11/11 [00:41<00:00,  3.74s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005073</td>
          <td>0.009849</td>
          <td>0.018590</td>
          <td>0.035343</td>
          <td>0.052048</td>
          <td>0.067758</td>
          <td>0.102153</td>
          <td>0.128384</td>
          <td>0.203769</td>
          <td>0.106604</td>
          <td>0.216683</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001408</td>
          <td>0.003205</td>
          <td>0.004625</td>
          <td>0.008971</td>
          <td>0.012475</td>
          <td>0.017306</td>
          <td>0.020679</td>
          <td>0.066222</td>
          <td>0.102532</td>
          <td>0.145513</td>
          <td>0.281784</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.014516</td>
          <td>0.021916</td>
          <td>0.037118</td>
          <td>0.065154</td>
          <td>0.095254</td>
          <td>0.118218</td>
          <td>0.178103</td>
          <td>0.227227</td>
          <td>0.345025</td>
          <td>0.195024</td>
          <td>0.390323</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.002474</td>
          <td>0.003640</td>
          <td>0.004215</td>
          <td>0.009929</td>
          <td>0.014189</td>
          <td>0.019206</td>
          <td>0.028581</td>
          <td>0.035958</td>
          <td>0.054973</td>
          <td>0.029432</td>
          <td>0.056566</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 227-232

Reduction on a particular case RKR
++++++++++++++++++++++++++++++++++

(N, 64, 16, 16), axis=(0, 2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 232-240

.. code-block:: default


    axes = (0, 2, 3)
    df, piv, ax = benchmark_op(
        axes, shape_fct=lambda dim: (dim, 64, 16, 16))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. rst-class:: sphx-glr-script-out

.. code-block:: pytb

    Traceback (most recent call last):
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 234, in <module>
        df, piv, ax = benchmark_op(
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 81, in benchmark_op
        obs = measure_time(
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_venv/lib/python3.9/site-packages/cpyquickhelper/numbers/speed_measure.py", line 86, in measure_time
        res = numpy.array(tim.repeat(repeat=repeat, number=number))
      File "/usr/local/lib/python3.9/timeit.py", line 205, in repeat
        t = self.timeit(number)
      File "/usr/local/lib/python3.9/timeit.py", line 177, in timeit
        timing = self.inner(it, self.timer)
      File "<timeit-src>", line 6, in inner
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 57, in loop_fct
        fct(x, y)
      File "/var/lib/jenkins/workspace/mlprodict/mlprodict_UT_39_std/_doc/examples/plot_op_reducesumsquare.py", line 79, in <lambda>
        fct=lambda x, y: numpy.sum(x ** 2, *y),
      File "<__array_function__ internals>", line 5, in sum
      File "/usr/local/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 2259, in sum
        return _wrapreduction(a, np.add, 'sum', axis, dtype, out, keepdims=keepdims,
      File "/usr/local/lib/python3.9/site-packages/numpy/core/fromnumeric.py", line 86, in _wrapreduction
        return ufunc.reduce(obj, axis, dtype, out, **passkwargs)
    TypeError: output must be an array




.. GENERATED FROM PYTHON SOURCE LINES 241-246

Reduction on a particular case RKRK
+++++++++++++++++++++++++++++++++++

(8, 24, 48, N), axis=(0, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 246-252

.. code-block:: default


    axes = (0, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")


.. GENERATED FROM PYTHON SOURCE LINES 253-259

Conclusion
++++++++++

Some of the configurations should be investigated.
:ref:`l-reducesum-problem1`. The reduction on tensorflow
in one dimension seems to be lazy.

.. GENERATED FROM PYTHON SOURCE LINES 259-267

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "reducesumsquare"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()


.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  15.142 seconds)


.. _sphx_glr_download_gyexamples_plot_op_reducesumsquare.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_reducesumsquare.py <plot_op_reducesumsquare.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_reducesumsquare.ipynb <plot_op_reducesumsquare.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
