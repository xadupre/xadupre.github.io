
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_einsum.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_einsum.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_einsum.py:


.. _l-einsum:

Compares implementations of Einsum
==================================

This example compares different equations for function :epkg:`numpy:einsum`.
It compares *numpy* implementation to a custom implementation,
:epkg:`onnxruntime` implementation and :epkg:`opt-einsum` optimisation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.
The custom implementation does not do any transpose.
It uses parallelisation and SIMD optimization when the summation
happens on the last axis of both matrices. It only implements
matrix multiplication. We also measure the improvment made with
function :func:`einsum <mlprodict.testing.einsum.einsum_fct.einsum>`.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which optimisation is used for the custom
implementation, *AVX* or *SSE* and the number of available processors,
equal to the default number of used threads to parallelize.

.. GENERATED FROM PYTHON SOURCE LINES 27-41

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxEinsum
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from opt_einsum import contract
    from mlprodict.testing.experimental_c_impl.experimental_c import (
        custom_einsum_float, code_optimisation)
    from mlprodict.testing.einsum.einsum_fct import _einsum
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 42-44

Einsum: common code
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 44-227

.. code-block:: default


    try:
        from tensorflow import einsum as tf_einsum, convert_to_tensor
    except ImportError:
        tf_einsum = None
    try:
        from torch import einsum as torch_einsum, from_numpy
    except ImportError:
        torch_einsum = None


    def build_ort_einsum(equation, op_version=14):  # opset=13, 14, ...
        node = OnnxEinsum('x', 'y', equation=equation,
                          op_version=op_version,
                          output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType()),
                                   ('y', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x, 'y': y})


    def build_ort_decomposed(equation, op_version=14):  # opset=13, 14, ...
        cache = _einsum(equation, numpy.float32, opset=op_version,
                        optimize=True, verbose=True, runtime="python")
        if not hasattr(cache, 'onnx_'):
            cache.build()
        sess = InferenceSession(cache.onnx_.SerializeToString())
        return lambda x, y: sess.run(None, {'X0': x, 'X1': y})


    def loop_einsum_eq(fct, equation, xs, ys):
        for x, y in zip(xs, ys):
            fct(equation, x, y)


    def loop_einsum_eq_th(fct, equation, xs, ys):
        for x, y in zip(xs, ys):
            fct(equation, x, y, nthread=-1)


    def loop_einsum(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def custom_einsum_float_tr(eq, x, y):
        if eq == "bshn,bthn->bnts":
            x = x.transpose((0, 1, 3, 2))
            y = y.transpose((0, 1, 3, 2))
            return custom_einsum_float("bsnh,btnh->bnts", x, y, nthread=-1)
        if eq == "bhsn,bhtn->bnts":
            x = x.transpose((0, 2, 3, 1))
            y = y.transpose((0, 2, 3, 1))
            return custom_einsum_float("bsnh,btnh->bnts", x, y, nthread=-1)
        return custom_einsum_float(eq, x, y, nthread=-1)


    def benchmark_equation(equation):
        # equations
        ort_einsum = build_ort_einsum(equation)
        ort_einsum_decomposed = build_ort_decomposed(equation)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 500, 512]):
            xs = [numpy.random.rand(2, dim, 12, 64).astype(numpy.float32)
                  for _ in range(5)]
            ys = [numpy.random.rand(2, dim, 12, 64).astype(numpy.float32)
                  for _ in range(5)]

            # numpy
            ctx = dict(equation=equation, xs=xs, ys=ys, einsum=numpy.einsum,
                       loop_einsum=loop_einsum, loop_einsum_eq=loop_einsum_eq,
                       loop_einsum_eq_th=loop_einsum_eq_th)
            obs = measure_time(
                "loop_einsum_eq(einsum, equation, xs, ys)",
                div_by_number=True, context=ctx, repeat=5, number=1)
            obs['dim'] = dim
            obs['fct'] = 'numpy.einsum'
            res.append(obs)

            # opt-einsum
            ctx['einsum'] = contract
            obs = measure_time(
                "loop_einsum_eq(einsum, equation, xs, ys)",
                div_by_number=True, context=ctx, repeat=5, number=1)
            obs['dim'] = dim
            obs['fct'] = 'opt-einsum'
            res.append(obs)

            # onnxruntime
            ctx['einsum'] = ort_einsum
            obs = measure_time(
                "loop_einsum(einsum, xs, ys)",
                div_by_number=True, context=ctx, repeat=5, number=1)
            obs['dim'] = dim
            obs['fct'] = 'ort_einsum'
            res.append(obs)

            # onnxruntime decomposed
            ctx['einsum'] = ort_einsum_decomposed
            obs = measure_time(
                "loop_einsum(einsum, xs, ys)",
                div_by_number=True, context=ctx, repeat=5, number=1)
            obs['dim'] = dim
            obs['fct'] = 'ort_dec'
            res.append(obs)

            # custom implementation
            ctx['einsum'] = custom_einsum_float
            obs = measure_time(
                "loop_einsum_eq_th(einsum, equation, xs, ys)",
                div_by_number=True, context=ctx, repeat=5, number=1)
            obs['dim'] = dim
            obs['fct'] = 'c_einsum'
            res.append(obs)

            # transpose + custom implementation
            ctx['einsum'] = custom_einsum_float_tr
            obs = measure_time(
                "loop_einsum_eq(einsum, equation, xs, ys)",
                div_by_number=True, context=ctx, repeat=5, number=1)
            obs['dim'] = dim
            obs['fct'] = 'c_einsum_tr'
            res.append(obs)

            if tf_einsum is not None:
                # tensorflow
                ctx['einsum'] = tf_einsum
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = [convert_to_tensor(y) for y in ys]
                obs = measure_time(
                    "loop_einsum_eq(einsum, equation, xs, ys)",
                    div_by_number=True, context=ctx, repeat=5, number=1)
                obs['dim'] = dim
                obs['fct'] = 'tf_einsum'
                res.append(obs)

            if torch_einsum is not None:
                # torch
                ctx['einsum'] = torch_einsum
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_einsum_eq(einsum, equation, xs, ys)",
                    div_by_number=True, context=ctx, repeat=5, number=1)
                obs['dim'] = dim
                obs['fct'] = 'torch_einsum'
                res.append(obs)

        # Dataframes
        df = pandas.DataFrame(res)
        piv = df.pivot('dim', 'fct', 'average')

        rs = piv.copy()
        rs['c_einsum'] = rs['numpy.einsum'] / rs['c_einsum']
        rs['ort_einsum'] = rs['numpy.einsum'] / rs['ort_einsum']
        rs['ort_dec'] = rs['numpy.einsum'] / rs['ort_dec']
        rs['opt-einsum'] = rs['numpy.einsum'] / rs['opt-einsum']
        if 'c_einsum_tr' in rs.columns:
            rs['c_einsum_tr'] = rs['numpy.einsum'] / rs['c_einsum_tr']
        if 'tf_einsum' in rs.columns:
            rs['tf_einsum'] = rs['numpy.einsum'] / rs['tf_einsum']
        if 'torch_einsum' in rs.columns:
            rs['torch_einsum'] = rs['numpy.einsum'] / rs['torch_einsum']
        rs['numpy.einsum'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(14, 5))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="Einsum benchmark\n%s -- (2, N, 12, 64)"
                       " lower better" % equation)
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="Einsum Speedup, baseline=numpy\n%s -- (2, N, 12, 64)"
                      " higher better" % equation)
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})

        return df, rs, ax









.. GENERATED FROM PYTHON SOURCE LINES 228-241

First equation: bsnh,btnh->bnts
+++++++++++++++++++++++++++++++

The decomposition of this equation without einsum function gives
the following.

 .. gdot::
      :script:

      from mlprodict.testing.einsum import decompose_einsum_equation
      dec = decompose_einsum_equation(
          'bsnh,btnh->bnts', strategy='numpy', clean=True)
      print(dec.to_dot())

.. GENERATED FROM PYTHON SOURCE LINES 241-248

.. code-block:: default


    dfs = []
    equation = "bsnh,btnh->bnts"
    df, piv, ax = benchmark_equation(equation)
    df.pivot("fct", "dim", "average")
    dfs.append(df)




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_einsum_001.png
   :alt: Einsum benchmark bsnh,btnh->bnts -- (2, N, 12, 64) lower better, Einsum Speedup, baseline=numpy bsnh,btnh->bnts -- (2, N, 12, 64) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_einsum_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/121 [00:00<?, ?it/s]    0.033 rtbest='bsnh,btnh->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.033 rtbest='bsnh,btnh->bnts':   1%|          | 1/121 [00:00<00:14,  8.13it/s]    0.033 rtbest='bsnh,btnh->bnts':   1%|          | 1/121 [00:00<00:14,  8.13it/s]    0.033 rtbest='bsnh,btnh->bnts':   2%|2         | 3/121 [00:00<00:09, 13.06it/s]    0.033 rtbest='bsnh,btnh->bnts':   4%|4         | 5/121 [00:00<00:07, 14.71it/s]    0.033 rtbest='bsnh,btnh->bnts':   6%|5         | 7/121 [00:00<00:07, 15.49it/s]    0.033 rtbest='bsnh,btnh->bnts':   7%|7         | 9/121 [00:00<00:07, 15.95it/s]    0.033 rtbest='bsnh,btnh->bnts':   9%|9         | 11/121 [00:00<00:06, 16.28it/s]    0.033 rtbest='bths,bnhs->bhnt':   9%|9         | 11/121 [00:00<00:06, 16.28it/s]    0.032 rtbest='bsht,bnht->bhns':   9%|9         | 11/121 [00:00<00:06, 16.28it/s]    0.032 rtbest='bsht,bnht->bhns':  11%|#         | 13/121 [00:00<00:06, 16.02it/s]    0.032 rtbest='bsht,bnht->bhns':  12%|#2        | 15/121 [00:00<00:06, 16.24it/s]    0.032 rtbest='bsht,bnht->bhns':  14%|#4        | 17/121 [00:01<00:06, 16.41it/s]    0.032 rtbest='bsht,bnht->bhns':  16%|#5        | 19/121 [00:01<00:06, 16.53it/s]    0.032 rtbest='bsht,bnht->bhns':  17%|#7        | 21/121 [00:01<00:06, 16.59it/s]    0.032 rtbest='bsht,bnht->bhns':  19%|#9        | 23/121 [00:01<00:05, 16.67it/s]    0.032 rtbest='bsht,bnht->bhns':  21%|##        | 25/121 [00:01<00:05, 16.68it/s]    0.032 rtbest='bsht,bnht->bhns':  22%|##2       | 27/121 [00:01<00:05, 16.35it/s]    0.032 rtbest='bsht,bnht->bhns':  24%|##3       | 29/121 [00:01<00:05, 16.45it/s]    0.032 rtbest='bsht,bnht->bhns':  26%|##5       | 31/121 [00:01<00:05, 16.51it/s]    0.032 rtbest='nshb,nthb->nhts':  26%|##5       | 31/121 [00:01<00:05, 16.51it/s]    0.032 rtbest='nthb,nshb->nhst':  26%|##5       | 31/121 [00:02<00:05, 16.51it/s]    0.032 rtbest='nthb,nshb->nhst':  27%|##7       | 33/121 [00:02<00:05, 16.51it/s]    0.032 rtbest='tnhb,tshb->thsn':  27%|##7       | 33/121 [00:02<00:05, 16.51it/s]    0.032 rtbest='tnhb,tshb->thsn':  29%|##8       | 35/121 [00:02<00:05, 16.56it/s]    0.032 rtbest='tnhb,tshb->thsn':  31%|###       | 37/121 [00:02<00:05, 16.67it/s]    0.032 rtbest='tnhb,tshb->thsn':  32%|###2      | 39/121 [00:02<00:04, 16.69it/s]    0.032 rtbest='tnhb,tshb->thsn':  34%|###3      | 41/121 [00:02<00:04, 16.37it/s]    0.032 rtbest='tnhb,tshb->thsn':  36%|###5      | 43/121 [00:02<00:04, 16.48it/s]    0.032 rtbest='tnhb,tshb->thsn':  37%|###7      | 45/121 [00:02<00:04, 16.55it/s]    0.032 rtbest='tnhb,tshb->thsn':  39%|###8      | 47/121 [00:02<00:04, 16.63it/s]    0.032 rtbest='tnsb,thsb->tshn':  39%|###8      | 47/121 [00:03<00:04, 16.63it/s]    0.032 rtbest='tnsb,thsb->tshn':  40%|####      | 49/121 [00:03<00:04, 16.63it/s]    0.032 rtbest='hsbn,htbn->hbts':  40%|####      | 49/121 [00:03<00:04, 16.63it/s]    0.032 rtbest='hsbn,htbn->hbts':  42%|####2     | 51/121 [00:03<00:04, 16.67it/s]    0.032 rtbest='hsbn,htbn->hbts':  44%|####3     | 53/121 [00:03<00:04, 16.79it/s]    0.032 rtbest='hsbn,htbn->hbts':  45%|####5     | 55/121 [00:03<00:04, 16.44it/s]    0.032 rtbest='hsbn,htbn->hbts':  47%|####7     | 57/121 [00:03<00:03, 16.54it/s]    0.032 rtbest='tnbh,tsbh->tbsn':  47%|####7     | 57/121 [00:03<00:03, 16.54it/s]    0.032 rtbest='tnbh,tsbh->tbsn':  49%|####8     | 59/121 [00:03<00:03, 16.58it/s]    0.032 rtbest='tnbh,tsbh->tbsn':  50%|#####     | 61/121 [00:03<00:03, 16.65it/s]    0.032 rtbest='tnbh,tsbh->tbsn':  52%|#####2    | 63/121 [00:03<00:03, 16.72it/s]    0.032 rtbest='tnbh,tsbh->tbsn':  54%|#####3    | 65/121 [00:03<00:03, 16.76it/s]    0.032 rtbest='tnbh,tsbh->tbsn':  55%|#####5    | 67/121 [00:04<00:03, 16.79it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  55%|#####5    | 67/121 [00:04<00:03, 16.79it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  57%|#####7    | 69/121 [00:04<00:03, 16.38it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  59%|#####8    | 71/121 [00:04<00:03, 16.51it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  60%|######    | 73/121 [00:04<00:02, 16.62it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  62%|######1   | 75/121 [00:04<00:02, 16.66it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  64%|######3   | 77/121 [00:04<00:02, 16.69it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  65%|######5   | 79/121 [00:04<00:02, 16.71it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  67%|######6   | 81/121 [00:04<00:02, 16.74it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  69%|######8   | 83/121 [00:05<00:02, 16.40it/s]    0.032 rtbest='nsbt,nhbt->nbhs':  70%|#######   | 85/121 [00:05<00:02, 16.47it/s]    0.032 rtbest='nbhs,nths->nhtb':  70%|#######   | 85/121 [00:05<00:02, 16.47it/s]    0.032 rtbest='nbhs,nths->nhtb':  72%|#######1  | 87/121 [00:05<00:02, 16.53it/s]    0.032 rtbest='nbhs,nths->nhtb':  74%|#######3  | 89/121 [00:05<00:01, 16.63it/s]    0.032 rtbest='nbhs,nths->nhtb':  75%|#######5  | 91/121 [00:05<00:01, 16.70it/s]    0.032 rtbest='nbhs,nths->nhtb':  77%|#######6  | 93/121 [00:05<00:01, 16.72it/s]    0.032 rtbest='nbhs,nths->nhtb':  79%|#######8  | 95/121 [00:05<00:01, 16.74it/s]    0.032 rtbest='nbhs,nths->nhtb':  80%|########  | 97/121 [00:05<00:01, 16.37it/s]    0.032 rtbest='nbhs,nths->nhtb':  82%|########1 | 99/121 [00:06<00:01, 16.46it/s]    0.032 rtbest='nbhs,nths->nhtb':  83%|########3 | 101/121 [00:06<00:01, 16.55it/s]    0.032 rtbest='nbhs,nths->nhtb':  85%|########5 | 103/121 [00:06<00:01, 16.62it/s]    0.032 rtbest='nbhs,nths->nhtb':  87%|########6 | 105/121 [00:06<00:00, 16.67it/s]    0.032 rtbest='nbhs,nths->nhtb':  88%|########8 | 107/121 [00:06<00:00, 16.70it/s]    0.032 rtbest='nbhs,nths->nhtb':  90%|######### | 109/121 [00:06<00:00, 16.74it/s]    0.032 rtbest='nths,nbhs->nhbt':  90%|######### | 109/121 [00:06<00:00, 16.74it/s]    0.032 rtbest='nths,nbhs->nhbt':  92%|#########1| 111/121 [00:06<00:00, 16.34it/s]    0.032 rtbest='nths,nbhs->nhbt':  93%|#########3| 113/121 [00:06<00:00, 16.44it/s]    0.032 rtbest='nths,nbhs->nhbt':  95%|#########5| 115/121 [00:06<00:00, 16.56it/s]    0.032 rtbest='nths,nbhs->nhbt':  97%|#########6| 117/121 [00:07<00:00, 16.62it/s]    0.032 rtbest='nths,nbhs->nhbt':  98%|#########8| 119/121 [00:07<00:00, 16.67it/s]    0.032 rtbest='nths,nbhs->nhbt': 100%|##########| 121/121 [00:07<00:00, 16.72it/s]    0.032 rtbest='nths,nbhs->nhbt': 100%|##########| 121/121 [00:07<00:00, 16.46it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:06,  1.48it/s]     20%|##        | 2/10 [00:00<00:03,  2.52it/s]     30%|###       | 3/10 [00:01<00:03,  1.92it/s]     40%|####      | 4/10 [00:03<00:05,  1.01it/s]     50%|#####     | 5/10 [00:07<00:10,  2.04s/it]     60%|######    | 6/10 [00:11<00:11,  2.88s/it]     70%|#######   | 7/10 [00:20<00:14,  4.67s/it]     80%|########  | 8/10 [00:33<00:14,  7.46s/it]     90%|######### | 9/10 [01:28<00:22, 22.37s/it]    100%|##########| 10/10 [02:30<00:00, 34.59s/it]    100%|##########| 10/10 [02:30<00:00, 15.06s/it]




.. GENERATED FROM PYTHON SOURCE LINES 249-265

Second equation: bshn,bthn->bnts
++++++++++++++++++++++++++++++++

The summation does not happen on the last axis but
on the previous one.
Is it worth transposing before doing the summation...
The decomposition of this equation without einsum function gives
the following.

 .. gdot::
      :script:

      from mlprodict.testing.einsum import decompose_einsum_equation
      dec = decompose_einsum_equation(
          'bshn,bthn->bnts', strategy='numpy', clean=True)
      print(dec.to_dot())

.. GENERATED FROM PYTHON SOURCE LINES 265-271

.. code-block:: default


    equation = "bshn,bthn->bnts"
    df, piv, ax = benchmark_equation(equation)
    df.pivot("fct", "dim", "average")
    dfs.append(df)




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_einsum_002.png
   :alt: Einsum benchmark bshn,bthn->bnts -- (2, N, 12, 64) lower better, Einsum Speedup, baseline=numpy bshn,bthn->bnts -- (2, N, 12, 64) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_einsum_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/121 [00:00<?, ?it/s]    0.031 rtbest='bshn,bthn->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.031 rtbest='bshn,bthn->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.031 rtbest='bshn,bthn->bnts':   2%|1         | 2/121 [00:00<00:07, 16.50it/s]    0.031 rtbest='bnhs,bths->bstn':   2%|1         | 2/121 [00:00<00:07, 16.50it/s]    0.031 rtbest='bnhs,bths->bstn':   3%|3         | 4/121 [00:00<00:06, 16.93it/s]    0.031 rtbest='bths,bnhs->bsnt':   3%|3         | 4/121 [00:00<00:06, 16.93it/s]    0.031 rtbest='bths,bnhs->bsnt':   5%|4         | 6/121 [00:00<00:06, 17.08it/s]    0.031 rtbest='bths,bnhs->bsnt':   7%|6         | 8/121 [00:00<00:06, 17.22it/s]    0.031 rtbest='bths,bnhs->bsnt':   8%|8         | 10/121 [00:00<00:06, 17.29it/s]    0.031 rtbest='bths,bnhs->bsnt':  10%|9         | 12/121 [00:00<00:06, 17.43it/s]    0.031 rtbest='bhns,btns->bsth':  10%|9         | 12/121 [00:00<00:06, 17.43it/s]    0.031 rtbest='bhns,btns->bsth':  12%|#1        | 14/121 [00:00<00:06, 17.10it/s]    0.031 rtbest='bhns,btns->bsth':  13%|#3        | 16/121 [00:00<00:06, 17.21it/s]    0.031 rtbest='bhns,btns->bsth':  15%|#4        | 18/121 [00:01<00:05, 17.26it/s]    0.031 rtbest='bhns,btns->bsth':  17%|#6        | 20/121 [00:01<00:05, 17.30it/s]    0.031 rtbest='bhns,btns->bsth':  18%|#8        | 22/121 [00:01<00:05, 17.34it/s]    0.031 rtbest='bhns,btns->bsth':  20%|#9        | 24/121 [00:01<00:05, 17.39it/s]    0.031 rtbest='bhns,btns->bsth':  21%|##1       | 26/121 [00:01<00:05, 17.39it/s]    0.03 rtbest='hnbs,htbs->hstn':  21%|##1       | 26/121 [00:01<00:05, 17.39it/s]     0.03 rtbest='hnbs,htbs->hstn':  23%|##3       | 28/121 [00:01<00:05, 17.04it/s]    0.03 rtbest='hnbs,htbs->hstn':  25%|##4       | 30/121 [00:01<00:05, 17.13it/s]    0.03 rtbest='hnbs,htbs->hstn':  26%|##6       | 32/121 [00:01<00:05, 17.13it/s]    0.03 rtbest='hnbs,htbs->hstn':  28%|##8       | 34/121 [00:01<00:05, 17.08it/s]    0.03 rtbest='hnbs,htbs->hstn':  30%|##9       | 36/121 [00:02<00:04, 17.06it/s]    0.03 rtbest='hnbs,htbs->hstn':  31%|###1      | 38/121 [00:02<00:04, 17.07it/s]    0.03 rtbest='hnbs,htbs->hstn':  33%|###3      | 40/121 [00:02<00:04, 17.11it/s]    0.03 rtbest='shbt,snbt->stnh':  33%|###3      | 40/121 [00:02<00:04, 17.11it/s]    0.03 rtbest='shbt,snbt->stnh':  35%|###4      | 42/121 [00:02<00:04, 16.80it/s]    0.03 rtbest='shbt,snbt->stnh':  36%|###6      | 44/121 [00:02<00:04, 16.90it/s]    0.03 rtbest='shbt,snbt->stnh':  38%|###8      | 46/121 [00:02<00:04, 16.95it/s]    0.03 rtbest='shbt,snbt->stnh':  40%|###9      | 48/121 [00:02<00:04, 17.00it/s]    0.03 rtbest='shbt,snbt->stnh':  41%|####1     | 50/121 [00:02<00:04, 16.99it/s]    0.03 rtbest='shbt,snbt->stnh':  43%|####2     | 52/121 [00:03<00:04, 16.95it/s]    0.03 rtbest='shbt,snbt->stnh':  45%|####4     | 54/121 [00:03<00:03, 17.02it/s]    0.03 rtbest='shbt,snbt->stnh':  46%|####6     | 56/121 [00:03<00:03, 16.74it/s]    0.03 rtbest='shbt,snbt->stnh':  48%|####7     | 58/121 [00:03<00:03, 16.80it/s]    0.03 rtbest='shbt,snbt->stnh':  50%|####9     | 60/121 [00:03<00:03, 16.83it/s]    0.03 rtbest='shbt,snbt->stnh':  51%|#####1    | 62/121 [00:03<00:03, 16.86it/s]    0.03 rtbest='shbt,snbt->stnh':  53%|#####2    | 64/121 [00:03<00:03, 16.87it/s]    0.03 rtbest='shbt,snbt->stnh':  55%|#####4    | 66/121 [00:03<00:03, 16.90it/s]    0.03 rtbest='shbt,snbt->stnh':  56%|#####6    | 68/121 [00:03<00:03, 16.92it/s]    0.03 rtbest='shbt,snbt->stnh':  58%|#####7    | 70/121 [00:04<00:03, 16.94it/s]    0.03 rtbest='shbt,snbt->stnh':  60%|#####9    | 72/121 [00:04<00:02, 16.62it/s]    0.03 rtbest='shbt,snbt->stnh':  61%|######1   | 74/121 [00:04<00:02, 16.77it/s]    0.03 rtbest='shbt,snbt->stnh':  63%|######2   | 76/121 [00:04<00:02, 16.91it/s]    0.03 rtbest='shbt,snbt->stnh':  64%|######4   | 78/121 [00:04<00:02, 17.05it/s]    0.03 rtbest='shbt,snbt->stnh':  66%|######6   | 80/121 [00:04<00:02, 17.15it/s]    0.03 rtbest='shbt,snbt->stnh':  68%|######7   | 82/121 [00:04<00:02, 17.12it/s]    0.03 rtbest='shbt,snbt->stnh':  69%|######9   | 84/121 [00:04<00:02, 17.14it/s]    0.03 rtbest='shbt,snbt->stnh':  71%|#######1  | 86/121 [00:05<00:02, 16.76it/s]    0.03 rtbest='shbt,snbt->stnh':  73%|#######2  | 88/121 [00:05<00:01, 16.77it/s]    0.03 rtbest='shbt,snbt->stnh':  74%|#######4  | 90/121 [00:05<00:01, 16.81it/s]    0.03 rtbest='shbt,snbt->stnh':  76%|#######6  | 92/121 [00:05<00:01, 16.91it/s]    0.03 rtbest='shbt,snbt->stnh':  78%|#######7  | 94/121 [00:05<00:01, 17.00it/s]    0.03 rtbest='shbt,snbt->stnh':  79%|#######9  | 96/121 [00:05<00:01, 16.99it/s]    0.03 rtbest='shbt,snbt->stnh':  81%|########  | 98/121 [00:05<00:01, 17.06it/s]    0.03 rtbest='shbt,snbt->stnh':  83%|########2 | 100/121 [00:05<00:01, 16.80it/s]    0.03 rtbest='shbt,snbt->stnh':  84%|########4 | 102/121 [00:05<00:01, 16.95it/s]    0.03 rtbest='shbt,snbt->stnh':  86%|########5 | 104/121 [00:06<00:00, 17.05it/s]    0.03 rtbest='shbt,snbt->stnh':  88%|########7 | 106/121 [00:06<00:00, 17.06it/s]    0.03 rtbest='shbt,snbt->stnh':  89%|########9 | 108/121 [00:06<00:00, 17.05it/s]    0.03 rtbest='shbt,snbt->stnh':  91%|######### | 110/121 [00:06<00:00, 16.88it/s]    0.03 rtbest='shbt,snbt->stnh':  93%|#########2| 112/121 [00:06<00:00, 16.90it/s]    0.03 rtbest='shbt,snbt->stnh':  94%|#########4| 114/121 [00:06<00:00, 16.58it/s]    0.03 rtbest='shbt,snbt->stnh':  96%|#########5| 116/121 [00:06<00:00, 16.71it/s]    0.03 rtbest='shbt,snbt->stnh':  98%|#########7| 118/121 [00:06<00:00, 16.87it/s]    0.03 rtbest='shbt,snbt->stnh':  99%|#########9| 120/121 [00:07<00:00, 16.88it/s]    0.03 rtbest='shbt,snbt->stnh': 100%|##########| 121/121 [00:07<00:00, 16.98it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:01,  6.23it/s]     20%|##        | 2/10 [00:00<00:01,  4.68it/s]     30%|###       | 3/10 [00:00<00:02,  2.93it/s]     40%|####      | 4/10 [00:03<00:06,  1.09s/it]     50%|#####     | 5/10 [00:08<00:12,  2.53s/it]     60%|######    | 6/10 [00:16<00:17,  4.47s/it]     70%|#######   | 7/10 [00:36<00:29,  9.71s/it]     80%|########  | 8/10 [01:06<00:31, 15.98s/it]     90%|######### | 9/10 [03:56<01:04, 64.14s/it]    100%|##########| 10/10 [07:37<00:00, 112.52s/it]    100%|##########| 10/10 [07:37<00:00, 45.73s/it] 




.. GENERATED FROM PYTHON SOURCE LINES 272-287

Third equation: bhsn,bhtn->bnts
+++++++++++++++++++++++++++++++

The summation does not happen on the last axis but
on the second one. It is worth transposing before multiplying.
The decomposition of this equation without einsum function gives
the following.

 .. gdot::
      :script:

      from mlprodict.testing.einsum import decompose_einsum_equation
      dec = decompose_einsum_equation(
          'bhsn,bhtn->bnts', strategy='numpy', clean=True)
      print(dec.to_dot())

.. GENERATED FROM PYTHON SOURCE LINES 287-293

.. code-block:: default


    equation = "bhsn,bhtn->bnts"
    df, piv, ax = benchmark_equation(equation)
    df.pivot("fct", "dim", "average")
    dfs.append(df)




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_einsum_003.png
   :alt: Einsum benchmark bhsn,bhtn->bnts -- (2, N, 12, 64) lower better, Einsum Speedup, baseline=numpy bhsn,bhtn->bnts -- (2, N, 12, 64) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_einsum_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/121 [00:00<?, ?it/s]    0.032 rtbest='bhsn,bhtn->bnts':   0%|          | 0/121 [00:00<?, ?it/s]    0.032 rtbest='bhsn,bhtn->bnts':   2%|1         | 2/121 [00:00<00:09, 12.96it/s]    0.032 rtbest='bhsn,bhtn->bnts':   3%|3         | 4/121 [00:00<00:07, 15.09it/s]    0.032 rtbest='bhsn,bhtn->bnts':   5%|4         | 6/121 [00:00<00:07, 15.96it/s]    0.032 rtbest='bnsh,bnth->bhts':   5%|4         | 6/121 [00:00<00:07, 15.96it/s]    0.032 rtbest='bnsh,bnth->bhts':   7%|6         | 8/121 [00:00<00:06, 16.35it/s]    0.032 rtbest='bnsh,bnth->bhts':   8%|8         | 10/121 [00:00<00:06, 16.62it/s]    0.032 rtbest='bnsh,bnth->bhts':  10%|9         | 12/121 [00:00<00:06, 16.84it/s]    0.032 rtbest='bnhs,bnts->bsth':  10%|9         | 12/121 [00:00<00:06, 16.84it/s]    0.032 rtbest='bnhs,bnts->bsth':  12%|#1        | 14/121 [00:00<00:06, 16.58it/s]    0.032 rtbest='bnhs,bnts->bsth':  13%|#3        | 16/121 [00:00<00:06, 16.73it/s]    0.032 rtbest='bnhs,bnts->bsth':  15%|#4        | 18/121 [00:01<00:06, 16.78it/s]    0.032 rtbest='bnhs,bnts->bsth':  17%|#6        | 20/121 [00:01<00:06, 16.83it/s]    0.032 rtbest='bnhs,bnts->bsth':  18%|#8        | 22/121 [00:01<00:05, 16.91it/s]    0.032 rtbest='bnhs,bnts->bsth':  20%|#9        | 24/121 [00:01<00:05, 16.92it/s]    0.032 rtbest='bnhs,bnts->bsth':  21%|##1       | 26/121 [00:01<00:05, 16.96it/s]    0.032 rtbest='bnhs,bnts->bsth':  23%|##3       | 28/121 [00:01<00:05, 16.71it/s]    0.032 rtbest='bnhs,bnts->bsth':  25%|##4       | 30/121 [00:01<00:05, 16.76it/s]    0.032 rtbest='bnhs,bnts->bsth':  26%|##6       | 32/121 [00:01<00:05, 16.76it/s]    0.032 rtbest='bnhs,bnts->bsth':  28%|##8       | 34/121 [00:02<00:05, 16.72it/s]    0.032 rtbest='bnhs,bnts->bsth':  30%|##9       | 36/121 [00:02<00:05, 16.70it/s]    0.032 rtbest='bnhs,bnts->bsth':  31%|###1      | 38/121 [00:02<00:04, 16.76it/s]    0.032 rtbest='bnhs,bnts->bsth':  33%|###3      | 40/121 [00:02<00:04, 16.80it/s]    0.032 rtbest='bnhs,bnts->bsth':  35%|###4      | 42/121 [00:02<00:04, 16.80it/s]    0.032 rtbest='bnhs,bnts->bsth':  36%|###6      | 44/121 [00:02<00:04, 16.53it/s]    0.032 rtbest='bnhs,bnts->bsth':  38%|###8      | 46/121 [00:02<00:04, 16.58it/s]    0.032 rtbest='bnhs,bnts->bsth':  40%|###9      | 48/121 [00:02<00:04, 16.64it/s]    0.032 rtbest='bnhs,bnts->bsth':  41%|####1     | 50/121 [00:03<00:04, 16.66it/s]    0.032 rtbest='bnhs,bnts->bsth':  43%|####2     | 52/121 [00:03<00:04, 16.64it/s]    0.032 rtbest='bnhs,bnts->bsth':  45%|####4     | 54/121 [00:03<00:04, 16.70it/s]    0.032 rtbest='bnhs,bnts->bsth':  46%|####6     | 56/121 [00:03<00:03, 16.73it/s]    0.032 rtbest='bnhs,bnts->bsth':  48%|####7     | 58/121 [00:03<00:03, 16.41it/s]    0.032 rtbest='bnhs,bnts->bsth':  50%|####9     | 60/121 [00:03<00:03, 16.46it/s]    0.032 rtbest='bnhs,bnts->bsth':  51%|#####1    | 62/121 [00:03<00:03, 16.51it/s]    0.032 rtbest='bnhs,bnts->bsth':  53%|#####2    | 64/121 [00:03<00:03, 16.54it/s]    0.032 rtbest='bnhs,bnts->bsth':  55%|#####4    | 66/121 [00:03<00:03, 16.55it/s]    0.032 rtbest='bnhs,bnts->bsth':  56%|#####6    | 68/121 [00:04<00:03, 16.59it/s]    0.032 rtbest='bnhs,bnts->bsth':  58%|#####7    | 70/121 [00:04<00:03, 16.65it/s]    0.032 rtbest='bnhs,bnts->bsth':  60%|#####9    | 72/121 [00:04<00:03, 16.33it/s]    0.032 rtbest='bnhs,bnts->bsth':  61%|######1   | 74/121 [00:04<00:02, 16.46it/s]    0.032 rtbest='bnhs,bnts->bsth':  63%|######2   | 76/121 [00:04<00:02, 16.58it/s]    0.032 rtbest='bnhs,bnts->bsth':  64%|######4   | 78/121 [00:04<00:02, 16.68it/s]    0.032 rtbest='bnhs,bnts->bsth':  66%|######6   | 80/121 [00:04<00:02, 16.75it/s]    0.032 rtbest='bnhs,bnts->bsth':  68%|######7   | 82/121 [00:04<00:02, 16.76it/s]    0.032 rtbest='bnhs,bnts->bsth':  69%|######9   | 84/121 [00:05<00:02, 16.77it/s]    0.032 rtbest='bnhs,bnts->bsth':  71%|#######1  | 86/121 [00:05<00:02, 16.43it/s]    0.032 rtbest='bnhs,bnts->bsth':  73%|#######2  | 88/121 [00:05<00:02, 16.48it/s]    0.032 rtbest='bnhs,bnts->bsth':  74%|#######4  | 90/121 [00:05<00:01, 16.51it/s]    0.032 rtbest='bnhs,bnts->bsth':  76%|#######6  | 92/121 [00:05<00:01, 16.59it/s]    0.032 rtbest='bnhs,bnts->bsth':  78%|#######7  | 94/121 [00:05<00:01, 16.68it/s]    0.032 rtbest='bnhs,bnts->bsth':  79%|#######9  | 96/121 [00:05<00:01, 16.66it/s]    0.032 rtbest='bnhs,bnts->bsth':  81%|########  | 98/121 [00:05<00:01, 16.71it/s]    0.032 rtbest='bnhs,bnts->bsth':  83%|########2 | 100/121 [00:06<00:01, 16.81it/s]    0.032 rtbest='bnhs,bnts->bsth':  84%|########4 | 102/121 [00:06<00:01, 16.52it/s]    0.032 rtbest='bnhs,bnts->bsth':  86%|########5 | 104/121 [00:06<00:01, 16.64it/s]    0.032 rtbest='bnhs,bnts->bsth':  88%|########7 | 106/121 [00:06<00:00, 16.65it/s]    0.032 rtbest='bnhs,bnts->bsth':  89%|########9 | 108/121 [00:06<00:00, 16.69it/s]    0.032 rtbest='bnhs,bnts->bsth':  91%|######### | 110/121 [00:06<00:00, 16.68it/s]    0.032 rtbest='bnhs,bnts->bsth':  93%|#########2| 112/121 [00:06<00:00, 16.65it/s]    0.032 rtbest='bnhs,bnts->bsth':  94%|#########4| 114/121 [00:06<00:00, 16.66it/s]    0.032 rtbest='bnhs,bnts->bsth':  96%|#########5| 116/121 [00:06<00:00, 16.38it/s]    0.032 rtbest='bnhs,bnts->bsth':  98%|#########7| 118/121 [00:07<00:00, 16.51it/s]    0.032 rtbest='bnhs,bnts->bsth':  99%|#########9| 120/121 [00:07<00:00, 16.53it/s]    0.032 rtbest='bnhs,bnts->bsth': 100%|##########| 121/121 [00:07<00:00, 16.59it/s]
      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:04,  2.00it/s]     20%|##        | 2/10 [00:00<00:03,  2.67it/s]     30%|###       | 3/10 [00:01<00:02,  2.39it/s]     40%|####      | 4/10 [00:02<00:03,  1.78it/s]     50%|#####     | 5/10 [00:03<00:03,  1.28it/s]     60%|######    | 6/10 [00:04<00:04,  1.09s/it]     70%|#######   | 7/10 [00:07<00:04,  1.62s/it]     80%|########  | 8/10 [00:11<00:04,  2.35s/it]     90%|######### | 9/10 [00:21<00:04,  4.73s/it]    100%|##########| 10/10 [00:31<00:00,  6.45s/it]    100%|##########| 10/10 [00:31<00:00,  3.18s/it]




.. GENERATED FROM PYTHON SOURCE LINES 294-300

Conclusion
++++++++++

pytorch seems quite efficient on these examples.
The custom implementation was a way to investigate
the implementation of einsum and find some ways to optimize it.

.. GENERATED FROM PYTHON SOURCE LINES 300-308

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "einsum"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_op_einsum_004.png
   :alt: plot op einsum
   :srcset: /gyexamples/images/sphx_glr_plot_op_einsum_004.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 11 minutes  12.774 seconds)


.. _sphx_glr_download_gyexamples_plot_op_einsum.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_einsum.py <plot_op_einsum.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_einsum.ipynb <plot_op_einsum.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
