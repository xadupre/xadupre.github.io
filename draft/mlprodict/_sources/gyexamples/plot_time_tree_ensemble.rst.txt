
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_time_tree_ensemble.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_time_tree_ensemble.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_time_tree_ensemble.py:


.. _l-example-tree-ensemble:

Benchmark Random Forests, Tree Ensemble
=======================================

The following script benchmarks different libraries
implementing random forests and boosting trees.
This benchmark can be replicated by installing the
following packages:

::

    python -m virtualenv env
    cd env
    pip install -i https://test.pypi.org/simple/ ort-nightly
    pip install git+https://github.com/microsoft/onnxconverter-common.git@jenkins
    pip install git+https://https://github.com/xadupre/sklearn-onnx.git@jenkins
    pip install mlprodict matplotlib scikit-learn pandas threadpoolctl
    pip install mlprodict lightgbm xgboost jinja2

.. contents::
    :local:

Import
++++++

.. GENERATED FROM PYTHON SOURCE LINES 28-45

.. code-block:: default

    import os
    import pickle
    from pprint import pprint
    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from xgboost import XGBClassifier
    from lightgbm import LGBMClassifier
    from onnxruntime import InferenceSession
    from sklearn.ensemble import HistGradientBoostingClassifier
    from sklearn.ensemble import RandomForestClassifier
    from sklearn.datasets import make_classification
    from skl2onnx import to_onnx
    from mlprodict.onnx_conv import register_converters
    from mlprodict.onnxrt.validate.validate_helper import measure_time
    from mlprodict.onnxrt import OnnxInference








.. GENERATED FROM PYTHON SOURCE LINES 46-47

Registers new converters for :epkg:`sklearn-onnx`.

.. GENERATED FROM PYTHON SOURCE LINES 47-49

.. code-block:: default

    register_converters()





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    [<class 'lightgbm.sklearn.LGBMClassifier'>, <class 'lightgbm.sklearn.LGBMRegressor'>, <class 'lightgbm.basic.Booster'>, <class 'mlprodict.onnx_conv.operator_converters.parse_lightgbm.WrappedLightGbmBooster'>, <class 'mlprodict.onnx_conv.operator_converters.parse_lightgbm.WrappedLightGbmBoosterClassifier'>, <class 'xgboost.sklearn.XGBClassifier'>, <class 'xgboost.sklearn.XGBRegressor'>, <class 'mlinsights.mlmodel.transfer_transformer.TransferTransformer'>, <class 'skl2onnx.sklapi.woe_transformer.WOETransformer'>, <class 'mlprodict.onnx_conv.scorers.register.CustomScorerTransform'>]



.. GENERATED FROM PYTHON SOURCE LINES 50-52

Problem
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 52-86

.. code-block:: default


    max_depth = 7
    n_classes = 20
    n_estimators = 500
    n_features = 100
    REPEAT = 3
    NUMBER = 1
    train, test = 1000, 10000

    print('dataset')
    X_, y_ = make_classification(n_samples=train + test, n_features=n_features,
                                 n_classes=n_classes, n_informative=n_features - 3)
    X_ = X_.astype(numpy.float32)
    y_ = y_.astype(numpy.int64)
    X_train, X_test = X_[:train], X_[train:]
    y_train, y_test = y_[:train], y_[train:]

    compilation = []


    def train_cache(model, X_train, y_train, max_depth, n_estimators, n_classes):
        name = "cache-{}-N{}-f{}-d{}-e{}-cl{}.pkl".format(
            model.__class__.__name__, X_train.shape[0], X_train.shape[1],
            max_depth, n_estimators, n_classes)
        if os.path.exists(name):
            with open(name, 'rb') as f:
                return pickle.load(f)
        else:
            model.fit(X_train, y_train)
            with open(name, 'wb') as f:
                pickle.dump(model, f)
            return model






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    dataset




.. GENERATED FROM PYTHON SOURCE LINES 87-89

RandomForestClassifier
++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 89-100

.. code-block:: default


    rf = RandomForestClassifier(n_estimators=n_estimators, max_depth=max_depth)
    print('train')
    rf = train_cache(rf, X_train, y_train, max_depth, n_estimators, n_classes)

    res = measure_time(rf.predict_proba, X_test[:10],
                       repeat=REPEAT, number=NUMBER,
                       div_by_number=True, first_run=True)
    res['model'], res['runtime'] = rf.__class__.__name__, 'INNER'
    pprint(res)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    train
    {'average': 0.2426420465732614,
     'context_size': 64,
     'deviation': 0.0004913346410526906,
     'max_exec': 0.24330749921500683,
     'min_exec': 0.2421361319720745,
     'model': 'RandomForestClassifier',
     'number': 1,
     'repeat': 3,
     'runtime': 'INNER',
     'ttime': 0.7279261397197843}




.. GENERATED FROM PYTHON SOURCE LINES 101-103

ONNX
++++

.. GENERATED FROM PYTHON SOURCE LINES 103-156

.. code-block:: default



    def measure_onnx_runtime(model, xt, repeat=REPEAT, number=NUMBER,
                             verbose=True):
        if verbose:
            print(model.__class__.__name__)

        res = measure_time(model.predict_proba, xt,
                           repeat=repeat, number=number,
                           div_by_number=True, first_run=True)
        res['model'], res['runtime'] = model.__class__.__name__, 'INNER'
        res['N'] = X_test.shape[0]
        res["max_depth"] = max_depth
        res["n_estimators"] = n_estimators
        res["n_features"] = n_features
        if verbose:
            pprint(res)
        yield res

        onx = to_onnx(model, X_train[:1], options={id(model): {'zipmap': False}})

        oinf = OnnxInference(onx)
        res = measure_time(lambda x: oinf.run({'X': x}), xt,
                           repeat=repeat, number=number,
                           div_by_number=True, first_run=True)
        res['model'], res['runtime'] = model.__class__.__name__, 'NPY/C++'
        res['N'] = X_test.shape[0]
        res['size'] = len(onx.SerializeToString())
        res["max_depth"] = max_depth
        res["n_estimators"] = n_estimators
        res["n_features"] = n_features
        if verbose:
            pprint(res)
        yield res

        sess = InferenceSession(onx.SerializeToString())
        res = measure_time(lambda x: sess.run(None, {'X': x}), xt,
                           repeat=repeat, number=number,
                           div_by_number=True, first_run=True)
        res['model'], res['runtime'] = model.__class__.__name__, 'ORT'
        res['N'] = X_test.shape[0]
        res['size'] = len(onx.SerializeToString())
        res["max_depth"] = max_depth
        res["n_estimators"] = n_estimators
        res["n_features"] = n_features
        if verbose:
            pprint(res)
        yield res


    compilation.extend(list(measure_onnx_runtime(rf, X_test)))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    RandomForestClassifier
    {'N': 10000,
     'average': 3.751256236806512,
     'context_size': 64,
     'deviation': 0.0003897546286210051,
     'max_depth': 7,
     'max_exec': 3.7517941808328032,
     'min_exec': 3.750883220694959,
     'model': 'RandomForestClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'INNER',
     'ttime': 11.253768710419536}
    /usr/local/lib/python3.9/site-packages/sklearn/utils/deprecation.py:103: FutureWarning: The attribute `n_features_` is deprecated in 1.0 and will be removed in 1.2. Use `n_features_in_` instead.
      warnings.warn(msg, category=FutureWarning)
    /usr/local/lib/python3.9/site-packages/sklearn/utils/deprecation.py:103: FutureWarning: Attribute `n_features_` was deprecated in version 1.0 and will be removed in 1.2. Use `n_features_in_` instead.
      warnings.warn(msg, category=FutureWarning)
    {'N': 10000,
     'average': 0.19747232428441444,
     'context_size': 64,
     'deviation': 0.003505813876041318,
     'max_depth': 7,
     'max_exec': 0.20172523148357868,
     'min_exec': 0.19313890859484673,
     'model': 'RandomForestClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'NPY/C++',
     'size': 7060222,
     'ttime': 0.5924169728532434}
    {'N': 10000,
     'average': 0.2885774476453662,
     'context_size': 64,
     'deviation': 0.00019767587972399547,
     'max_depth': 7,
     'max_exec': 0.288856977596879,
     'min_exec': 0.2884343834593892,
     'model': 'RandomForestClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'ORT',
     'size': 7060222,
     'ttime': 0.8657323429360986}




.. GENERATED FROM PYTHON SOURCE LINES 157-159

HistGradientBoostingClassifier
++++++++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 159-167

.. code-block:: default


    hist = HistGradientBoostingClassifier(
        max_iter=n_estimators, max_depth=max_depth)
    print('train')
    hist = train_cache(hist, X_train, y_train, max_depth, n_estimators, n_classes)

    compilation.extend(list(measure_onnx_runtime(hist, X_test)))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    train
    HistGradientBoostingClassifier
    {'N': 10000,
     'average': 4.3135191621258855,
     'context_size': 64,
     'deviation': 0.018579890559543514,
     'max_depth': 7,
     'max_exec': 4.333229667507112,
     'min_exec': 4.28861596994102,
     'model': 'HistGradientBoostingClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'INNER',
     'ttime': 12.940557486377656}
    {'N': 10000,
     'average': 2.5625203251838684,
     'context_size': 64,
     'deviation': 0.0405338848810828,
     'max_depth': 7,
     'max_exec': 2.6040689181536436,
     'min_exec': 2.5075439885258675,
     'model': 'HistGradientBoostingClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'NPY/C++',
     'size': 4338428,
     'ttime': 7.687560975551605}
    {'N': 10000,
     'average': 3.69159205040584,
     'context_size': 64,
     'deviation': 0.0015146685231977866,
     'max_depth': 7,
     'max_exec': 3.693401474505663,
     'min_exec': 3.6896944539621472,
     'model': 'HistGradientBoostingClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'ORT',
     'size': 4338428,
     'ttime': 11.07477615121752}




.. GENERATED FROM PYTHON SOURCE LINES 168-170

LightGBM
++++++++

.. GENERATED FROM PYTHON SOURCE LINES 170-178

.. code-block:: default


    lgb = LGBMClassifier(n_estimators=n_estimators,
                         max_depth=max_depth, pred_early_stop=False)
    print('train')
    lgb = train_cache(lgb, X_train, y_train, max_depth, n_estimators, n_classes)

    compilation.extend(list(measure_onnx_runtime(lgb, X_test)))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    train
    LGBMClassifier
    {'N': 10000,
     'average': 4.164386607085665,
     'context_size': 64,
     'deviation': 0.2689837860541771,
     'max_depth': 7,
     'max_exec': 4.4157339334487915,
     'min_exec': 3.791434139944613,
     'model': 'LGBMClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'INNER',
     'ttime': 12.493159821256995}
    {'N': 10000,
     'average': 2.4779106747979918,
     'context_size': 64,
     'deviation': 0.004159532975458321,
     'max_depth': 7,
     'max_exec': 2.483534086495638,
     'min_exec': 2.4736038092523813,
     'model': 'LGBMClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'NPY/C++',
     'size': 4557201,
     'ttime': 7.433732024393976}
    {'N': 10000,
     'average': 3.7041157241910696,
     'context_size': 64,
     'deviation': 0.00387562874416513,
     'max_depth': 7,
     'max_exec': 3.7073550894856453,
     'min_exec': 3.6986671211197972,
     'model': 'LGBMClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'ORT',
     'size': 4557201,
     'ttime': 11.112347172573209}




.. GENERATED FROM PYTHON SOURCE LINES 179-181

XGBoost
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 181-188

.. code-block:: default


    xgb = XGBClassifier(n_estimators=n_estimators, max_depth=max_depth)
    print('train')
    xgb = train_cache(xgb, X_train, y_train, max_depth, n_estimators, n_classes)

    compilation.extend(list(measure_onnx_runtime(xgb, X_test)))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    train
    /usr/local/lib/python3.9/site-packages/xgboost/sklearn.py:1224: UserWarning: The use of label encoder in XGBClassifier is deprecated and will be removed in a future release. To remove this warning, do the following: 1) Pass option use_label_encoder=False when constructing XGBClassifier object; and 2) Encode your labels (y) as integers starting with 0, i.e. 0, 1, 2, ..., [num_class - 1].
      warnings.warn(label_encoder_deprecation_msg, UserWarning)
    [08:47:02] WARNING: ../src/learner.cc:1115: Starting in XGBoost 1.3.0, the default evaluation metric used with the objective 'multi:softprob' was changed from 'merror' to 'mlogloss'. Explicitly set eval_metric if you'd like to restore the old behavior.
    XGBClassifier
    {'N': 10000,
     'average': 0.31481738574802876,
     'context_size': 64,
     'deviation': 0.0011621590940756913,
     'max_depth': 7,
     'max_exec': 0.31645443197339773,
     'min_exec': 0.31387244910001755,
     'model': 'XGBClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'INNER',
     'ttime': 0.9444521572440863}
    {'N': 10000,
     'average': 2.463824221243461,
     'context_size': 64,
     'deviation': 0.00021320209841200078,
     'max_depth': 7,
     'max_exec': 2.4639765797182918,
     'min_exec': 2.4635227136313915,
     'model': 'XGBClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'NPY/C++',
     'size': 1544072,
     'ttime': 7.391472663730383}
    {'N': 10000,
     'average': 3.602356265609463,
     'context_size': 64,
     'deviation': 0.002382524799511373,
     'max_depth': 7,
     'max_exec': 3.6042395690456033,
     'min_exec': 3.598995003849268,
     'model': 'XGBClassifier',
     'n_estimators': 500,
     'n_features': 100,
     'number': 1,
     'repeat': 3,
     'runtime': 'ORT',
     'size': 1544072,
     'ttime': 10.80706879682839}




.. GENERATED FROM PYTHON SOURCE LINES 189-193

Summary
+++++++

All data

.. GENERATED FROM PYTHON SOURCE LINES 193-199

.. code-block:: default

    name = 'plot_time_tree_ensemble'
    df = pandas.DataFrame(compilation)
    df.to_csv('%s.csv' % name, index=False)
    df.to_excel('%s.xlsx' % name, index=False)
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>average</th>
          <th>deviation</th>
          <th>min_exec</th>
          <th>max_exec</th>
          <th>repeat</th>
          <th>number</th>
          <th>ttime</th>
          <th>context_size</th>
          <th>model</th>
          <th>runtime</th>
          <th>N</th>
          <th>max_depth</th>
          <th>n_estimators</th>
          <th>n_features</th>
          <th>size</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>3.751256</td>
          <td>0.000390</td>
          <td>3.750883</td>
          <td>3.751794</td>
          <td>3</td>
          <td>1</td>
          <td>11.253769</td>
          <td>64</td>
          <td>RandomForestClassifier</td>
          <td>INNER</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.197472</td>
          <td>0.003506</td>
          <td>0.193139</td>
          <td>0.201725</td>
          <td>3</td>
          <td>1</td>
          <td>0.592417</td>
          <td>64</td>
          <td>RandomForestClassifier</td>
          <td>NPY/C++</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>7060222.0</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.288577</td>
          <td>0.000198</td>
          <td>0.288434</td>
          <td>0.288857</td>
          <td>3</td>
          <td>1</td>
          <td>0.865732</td>
          <td>64</td>
          <td>RandomForestClassifier</td>
          <td>ORT</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>7060222.0</td>
        </tr>
        <tr>
          <th>3</th>
          <td>4.313519</td>
          <td>0.018580</td>
          <td>4.288616</td>
          <td>4.333230</td>
          <td>3</td>
          <td>1</td>
          <td>12.940557</td>
          <td>64</td>
          <td>HistGradientBoostingClassifier</td>
          <td>INNER</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>4</th>
          <td>2.562520</td>
          <td>0.040534</td>
          <td>2.507544</td>
          <td>2.604069</td>
          <td>3</td>
          <td>1</td>
          <td>7.687561</td>
          <td>64</td>
          <td>HistGradientBoostingClassifier</td>
          <td>NPY/C++</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>4338428.0</td>
        </tr>
        <tr>
          <th>5</th>
          <td>3.691592</td>
          <td>0.001515</td>
          <td>3.689694</td>
          <td>3.693401</td>
          <td>3</td>
          <td>1</td>
          <td>11.074776</td>
          <td>64</td>
          <td>HistGradientBoostingClassifier</td>
          <td>ORT</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>4338428.0</td>
        </tr>
        <tr>
          <th>6</th>
          <td>4.164387</td>
          <td>0.268984</td>
          <td>3.791434</td>
          <td>4.415734</td>
          <td>3</td>
          <td>1</td>
          <td>12.493160</td>
          <td>64</td>
          <td>LGBMClassifier</td>
          <td>INNER</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>7</th>
          <td>2.477911</td>
          <td>0.004160</td>
          <td>2.473604</td>
          <td>2.483534</td>
          <td>3</td>
          <td>1</td>
          <td>7.433732</td>
          <td>64</td>
          <td>LGBMClassifier</td>
          <td>NPY/C++</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>4557201.0</td>
        </tr>
        <tr>
          <th>8</th>
          <td>3.704116</td>
          <td>0.003876</td>
          <td>3.698667</td>
          <td>3.707355</td>
          <td>3</td>
          <td>1</td>
          <td>11.112347</td>
          <td>64</td>
          <td>LGBMClassifier</td>
          <td>ORT</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>4557201.0</td>
        </tr>
        <tr>
          <th>9</th>
          <td>0.314817</td>
          <td>0.001162</td>
          <td>0.313872</td>
          <td>0.316454</td>
          <td>3</td>
          <td>1</td>
          <td>0.944452</td>
          <td>64</td>
          <td>XGBClassifier</td>
          <td>INNER</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>10</th>
          <td>2.463824</td>
          <td>0.000213</td>
          <td>2.463523</td>
          <td>2.463977</td>
          <td>3</td>
          <td>1</td>
          <td>7.391473</td>
          <td>64</td>
          <td>XGBClassifier</td>
          <td>NPY/C++</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>1544072.0</td>
        </tr>
        <tr>
          <th>11</th>
          <td>3.602356</td>
          <td>0.002383</td>
          <td>3.598995</td>
          <td>3.604240</td>
          <td>3</td>
          <td>1</td>
          <td>10.807069</td>
          <td>64</td>
          <td>XGBClassifier</td>
          <td>ORT</td>
          <td>10000</td>
          <td>7</td>
          <td>500</td>
          <td>100</td>
          <td>1544072.0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 200-201

Time per model and runtime.

.. GENERATED FROM PYTHON SOURCE LINES 201-204

.. code-block:: default

    piv = df.pivot("model", "runtime", "average")
    piv






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>runtime</th>
          <th>INNER</th>
          <th>NPY/C++</th>
          <th>ORT</th>
        </tr>
        <tr>
          <th>model</th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>HistGradientBoostingClassifier</th>
          <td>4.313519</td>
          <td>2.562520</td>
          <td>3.691592</td>
        </tr>
        <tr>
          <th>LGBMClassifier</th>
          <td>4.164387</td>
          <td>2.477911</td>
          <td>3.704116</td>
        </tr>
        <tr>
          <th>RandomForestClassifier</th>
          <td>3.751256</td>
          <td>0.197472</td>
          <td>0.288577</td>
        </tr>
        <tr>
          <th>XGBClassifier</th>
          <td>0.314817</td>
          <td>2.463824</td>
          <td>3.602356</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 205-206

Graphs.

.. GENERATED FROM PYTHON SOURCE LINES 206-211

.. code-block:: default

    ax = piv.T.plot(kind="bar")
    ax.set_title("Computation time ratio for %d observations and %d features\n"
                 "lower is better for onnx runtimes" % X_test.shape)
    plt.savefig('%s.png' % name)




.. image-sg:: /gyexamples/images/sphx_glr_plot_time_tree_ensemble_001.png
   :alt: Computation time ratio for 10000 observations and 100 features lower is better for onnx runtimes
   :srcset: /gyexamples/images/sphx_glr_plot_time_tree_ensemble_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 212-213

Available optimisation on this machine:

.. GENERATED FROM PYTHON SOURCE LINES 213-218

.. code-block:: default


    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())

    plt.show()




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 5 minutes  11.404 seconds)


.. _sphx_glr_download_gyexamples_plot_time_tree_ensemble.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_time_tree_ensemble.py <plot_time_tree_ensemble.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_time_tree_ensemble.ipynb <plot_time_tree_ensemble.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
