
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_reducemean.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_reducemean.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_reducemean.py:


.. _l-b-reducesummean:

Compares implementations of ReduceMean
======================================

This example compares the *numpy* for the operator *ReduceMean*
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxReduceMean
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 32-34

ReduceMean implementations
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 34-163

.. code-block:: default


    try:
        from tensorflow.math import reduce_mean as tf_reduce_mean
        from tensorflow import convert_to_tensor
    except ImportError:
        tf_reduce_mean = None
    try:
        from torch import mean as torch_mean, from_numpy
    except ImportError:
        torch_mean = None


    def build_ort_reducemean(axes, op_version=14):  # opset=13, 14, ...
        node = OnnxReduceMean('x', axes=axes, op_version=op_version,
                              output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(axes, repeat=2, number=5, name="ReduceMean",
                     shape_fct=None, max_dim=None):
        if shape_fct is None:
            def shape_fct(dim):
                return (3, dim, 1, 128, 64)
        ort_fct = build_ort_reducemean(axes)
        res = []
        for dim in tqdm([4, 8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            if max_dim is not None and dim > max_dim:
                continue
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.array(axes, dtype=numpy.int64)
                  for _ in range(n_arrays)]
            info = dict(axes=axes, shape=shape)

            # numpy
            fct = lambda x, y: numpy.mean(x, axis=tuple(y))
            ctx = dict(
                xs=xs, ys=ys,
                loop_fct=loop_fct)
            obs = measure_time(
                lambda: loop_fct(fct, xs, ys),
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            fct = ort_fct
            obs = measure_time(
                lambda: loop_fct(fct, xs, ys),
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_reduce_mean is not None:
                # tensorflow
                fct = tf_reduce_mean
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = ys
                obs = measure_time(
                    lambda: loop_fct(fct, ctx['xs'], ctx['ys']),
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_mean is not None:
                def torch_mean1(x, y):
                    return torch_mean(x, y[0])

                def torch_mean2(x, y):
                    return torch_mean(torch_mean(x, y[1]), y[0])

                # torch
                fct = torch_mean1 if len(axes) == 1 else torch_mean2
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    lambda: loop_fct(fct, ctx['xs'], ctx['ys']),
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r"
                       " lower better" % (name, shape_name, axes))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r"
                      " higher better" % (name, shape_name, axes))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 164-173

Reduction on a particular case KR
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KR means kept axis - reduced axis

(8, 24, 48, N), axis=(3, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: default


    axes = (3, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_001.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (3,) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (3,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:01<00:11,  1.05s/it]     17%|#6        | 2/12 [00:02<00:10,  1.08s/it]     25%|##5       | 3/12 [00:03<00:09,  1.10s/it]     33%|###3      | 4/12 [00:04<00:09,  1.14s/it]     42%|####1     | 5/12 [00:05<00:08,  1.20s/it]     50%|#####     | 6/12 [00:07<00:07,  1.31s/it]     58%|#####8    | 7/12 [00:08<00:07,  1.41s/it]     67%|######6   | 8/12 [00:10<00:06,  1.58s/it]     75%|#######5  | 9/12 [00:13<00:05,  1.77s/it]     83%|########3 | 10/12 [00:15<00:04,  2.09s/it]     92%|#########1| 11/12 [00:17<00:01,  1.87s/it]    100%|##########| 12/12 [00:19<00:00,  1.98s/it]    100%|##########| 12/12 [00:19<00:00,  1.62s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005250</td>
          <td>0.005936</td>
          <td>0.007138</td>
          <td>0.008883</td>
          <td>0.010977</td>
          <td>0.013939</td>
          <td>0.016843</td>
          <td>0.020975</td>
          <td>0.025859</td>
          <td>0.039186</td>
          <td>0.020295</td>
          <td>0.039581</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001735</td>
          <td>0.002064</td>
          <td>0.002815</td>
          <td>0.002725</td>
          <td>0.004195</td>
          <td>0.005668</td>
          <td>0.006194</td>
          <td>0.008099</td>
          <td>0.009913</td>
          <td>0.015901</td>
          <td>0.006448</td>
          <td>0.011842</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.096752</td>
          <td>0.098519</td>
          <td>0.097425</td>
          <td>0.098018</td>
          <td>0.095185</td>
          <td>0.101653</td>
          <td>0.100556</td>
          <td>0.103768</td>
          <td>0.104353</td>
          <td>0.107269</td>
          <td>0.046290</td>
          <td>0.050245</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 180-189

Reduction on a particular case RK
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
RK means reduced axis - kept axis

(8, 24, 48, N), axis=(0, )
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 189-195

.. code-block:: default


    axes = (0, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_002.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (0,) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (0,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:09,  1.11it/s]     17%|#6        | 2/12 [00:01<00:09,  1.06it/s]     25%|##5       | 3/12 [00:02<00:08,  1.02it/s]     33%|###3      | 4/12 [00:05<00:11,  1.42s/it]     42%|####1     | 5/12 [00:08<00:14,  2.05s/it]     50%|#####     | 6/12 [00:11<00:14,  2.37s/it]     58%|#####8    | 7/12 [00:14<00:13,  2.68s/it]     67%|######6   | 8/12 [00:18<00:12,  3.09s/it]     75%|#######5  | 9/12 [00:22<00:09,  3.27s/it]     83%|########3 | 10/12 [00:27<00:08,  4.01s/it]     92%|#########1| 11/12 [00:30<00:03,  3.57s/it]    100%|##########| 12/12 [00:34<00:00,  3.71s/it]    100%|##########| 12/12 [00:34<00:00,  2.86s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.001822</td>
          <td>0.002499</td>
          <td>0.004362</td>
          <td>0.007497</td>
          <td>0.013902</td>
          <td>0.020801</td>
          <td>0.028685</td>
          <td>0.044102</td>
          <td>0.058816</td>
          <td>0.087648</td>
          <td>0.044360</td>
          <td>0.094852</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001220</td>
          <td>0.002980</td>
          <td>0.003107</td>
          <td>0.005234</td>
          <td>0.011832</td>
          <td>0.014126</td>
          <td>0.018739</td>
          <td>0.027379</td>
          <td>0.034409</td>
          <td>0.051938</td>
          <td>0.026700</td>
          <td>0.052839</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.085861</td>
          <td>0.088730</td>
          <td>0.090265</td>
          <td>0.186813</td>
          <td>0.270201</td>
          <td>0.233663</td>
          <td>0.244172</td>
          <td>0.264116</td>
          <td>0.198005</td>
          <td>0.305209</td>
          <td>0.124955</td>
          <td>0.131681</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 196-205

Reduction on a particular case KRK
++++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(1, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 205-211

.. code-block:: default


    axes = (1, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_003.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (1, 2) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (1, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:10,  1.06it/s]     17%|#6        | 2/12 [00:01<00:10,  1.00s/it]     25%|##5       | 3/12 [00:02<00:07,  1.26it/s]     33%|###3      | 4/12 [00:03<00:07,  1.08it/s]     42%|####1     | 5/12 [00:04<00:07,  1.07s/it]     50%|#####     | 6/12 [00:06<00:07,  1.23s/it]     58%|#####8    | 7/12 [00:08<00:06,  1.37s/it]     67%|######6   | 8/12 [00:12<00:09,  2.33s/it]     75%|#######5  | 9/12 [00:16<00:08,  2.89s/it]     83%|########3 | 10/12 [00:22<00:07,  3.67s/it]     92%|#########1| 11/12 [00:24<00:03,  3.32s/it]    100%|##########| 12/12 [00:28<00:00,  3.40s/it]    100%|##########| 12/12 [00:28<00:00,  2.35s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005359</td>
          <td>0.005713</td>
          <td>0.006710</td>
          <td>0.008671</td>
          <td>0.012293</td>
          <td>0.014961</td>
          <td>0.017101</td>
          <td>0.022878</td>
          <td>0.027222</td>
          <td>0.038827</td>
          <td>0.018957</td>
          <td>0.035353</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.009541</td>
          <td>0.008113</td>
          <td>0.001715</td>
          <td>0.002966</td>
          <td>0.005379</td>
          <td>0.007951</td>
          <td>0.010492</td>
          <td>0.015985</td>
          <td>0.019872</td>
          <td>0.027983</td>
          <td>0.014768</td>
          <td>0.032070</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.078247</td>
          <td>0.087355</td>
          <td>0.041193</td>
          <td>0.091218</td>
          <td>0.093541</td>
          <td>0.100807</td>
          <td>0.100111</td>
          <td>0.337551</td>
          <td>0.286967</td>
          <td>0.356549</td>
          <td>0.154748</td>
          <td>0.166918</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 212-214

(8, 24 * 48, N), axis=1
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 214-220

.. code-block:: default


    axes = (1, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24 * 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_004.png
   :alt: ReduceMean benchmark '(8, 1152, N)' - (1,) lower better, ReduceMean Speedup, baseline=numpy '(8, 1152, N)' - (1,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:01<00:11,  1.02s/it]     17%|#6        | 2/12 [00:02<00:10,  1.05s/it]     25%|##5       | 3/12 [00:03<00:09,  1.04s/it]     33%|###3      | 4/12 [00:04<00:08,  1.06s/it]     42%|####1     | 5/12 [00:05<00:07,  1.10s/it]     50%|#####     | 6/12 [00:06<00:07,  1.17s/it]     58%|#####8    | 7/12 [00:08<00:06,  1.30s/it]     67%|######6   | 8/12 [00:10<00:06,  1.52s/it]     75%|#######5  | 9/12 [00:12<00:05,  1.75s/it]     83%|########3 | 10/12 [00:15<00:04,  2.16s/it]     92%|#########1| 11/12 [00:17<00:01,  1.96s/it]    100%|##########| 12/12 [00:19<00:00,  2.23s/it]    100%|##########| 12/12 [00:19<00:00,  1.66s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005330</td>
          <td>0.005643</td>
          <td>0.006662</td>
          <td>0.008672</td>
          <td>0.012390</td>
          <td>0.014904</td>
          <td>0.017044</td>
          <td>0.022853</td>
          <td>0.027157</td>
          <td>0.038807</td>
          <td>0.018985</td>
          <td>0.035367</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.007697</td>
          <td>0.007809</td>
          <td>0.001867</td>
          <td>0.003561</td>
          <td>0.006697</td>
          <td>0.007964</td>
          <td>0.010090</td>
          <td>0.015878</td>
          <td>0.018874</td>
          <td>0.027757</td>
          <td>0.014524</td>
          <td>0.032014</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.087321</td>
          <td>0.090323</td>
          <td>0.089668</td>
          <td>0.087096</td>
          <td>0.076718</td>
          <td>0.078709</td>
          <td>0.090962</td>
          <td>0.098146</td>
          <td>0.103550</td>
          <td>0.119886</td>
          <td>0.056559</td>
          <td>0.093756</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 221-223

(2, 8, 12, 24, 2, N), axis=(2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 223-229

.. code-block:: default


    axes = (2, 3)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (2, 8, 12, 24, 2, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_005.png
   :alt: ReduceMean benchmark '(2, 8, 12, 24, 2, N)' - (2, 3) lower better, ReduceMean Speedup, baseline=numpy '(2, 8, 12, 24, 2, N)' - (2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:10,  1.05it/s]     17%|#6        | 2/12 [00:01<00:08,  1.17it/s]     25%|##5       | 3/12 [00:02<00:06,  1.29it/s]     33%|###3      | 4/12 [00:03<00:05,  1.39it/s]     42%|####1     | 5/12 [00:04<00:06,  1.09it/s]     50%|#####     | 6/12 [00:07<00:10,  1.79s/it]     58%|#####8    | 7/12 [00:10<00:10,  2.03s/it]     67%|######6   | 8/12 [00:15<00:11,  2.89s/it]     75%|#######5  | 9/12 [00:20<00:10,  3.57s/it]     83%|########3 | 10/12 [00:25<00:08,  4.04s/it]     92%|#########1| 11/12 [00:27<00:03,  3.57s/it]    100%|##########| 12/12 [00:31<00:00,  3.57s/it]    100%|##########| 12/12 [00:31<00:00,  2.61s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.003709</td>
          <td>0.003746</td>
          <td>0.004778</td>
          <td>0.007519</td>
          <td>0.009932</td>
          <td>0.012931</td>
          <td>0.015051</td>
          <td>0.021055</td>
          <td>0.026913</td>
          <td>0.037367</td>
          <td>0.018578</td>
          <td>0.034983</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.004433</td>
          <td>0.001429</td>
          <td>0.002857</td>
          <td>0.004706</td>
          <td>0.005341</td>
          <td>0.009290</td>
          <td>0.011103</td>
          <td>0.014446</td>
          <td>0.018934</td>
          <td>0.026832</td>
          <td>0.015756</td>
          <td>0.035943</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.085483</td>
          <td>0.070374</td>
          <td>0.054785</td>
          <td>0.041941</td>
          <td>0.090934</td>
          <td>0.294361</td>
          <td>0.188108</td>
          <td>0.377195</td>
          <td>0.383099</td>
          <td>0.324247</td>
          <td>0.153697</td>
          <td>0.161906</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 230-235

Reduction on a particular case RKR
++++++++++++++++++++++++++++++++++

(N, 64, 16, 16), axis=(0, 2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 235-242

.. code-block:: default


    axes = (0, 2, 3)
    df, piv, ax = benchmark_op(
        axes, shape_fct=lambda dim: (dim, 64, 16, 16))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_006.png
   :alt: ReduceMean benchmark '(N, 64, 16, 16)' - (0, 2, 3) lower better, ReduceMean Speedup, baseline=numpy '(N, 64, 16, 16)' - (0, 2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:07,  1.38it/s]     17%|#6        | 2/12 [00:01<00:08,  1.16it/s]     25%|##5       | 3/12 [00:02<00:07,  1.22it/s]     33%|###3      | 4/12 [00:04<00:10,  1.33s/it]     42%|####1     | 5/12 [00:08<00:15,  2.24s/it]     50%|#####     | 6/12 [00:12<00:18,  3.03s/it]     58%|#####8    | 7/12 [00:17<00:18,  3.62s/it]     67%|######6   | 8/12 [00:23<00:16,  4.23s/it]     75%|#######5  | 9/12 [00:29<00:14,  4.81s/it]     83%|########3 | 10/12 [00:36<00:11,  5.58s/it]     92%|#########1| 11/12 [00:40<00:04,  4.91s/it]    100%|##########| 12/12 [00:45<00:00,  5.02s/it]    100%|##########| 12/12 [00:45<00:00,  3.78s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.001802</td>
          <td>0.002750</td>
          <td>0.004987</td>
          <td>0.007666</td>
          <td>0.012809</td>
          <td>0.018650</td>
          <td>0.022998</td>
          <td>0.034023</td>
          <td>0.043471</td>
          <td>0.065507</td>
          <td>0.033721</td>
          <td>0.066487</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000935</td>
          <td>0.001526</td>
          <td>0.001861</td>
          <td>0.004468</td>
          <td>0.006951</td>
          <td>0.010838</td>
          <td>0.012678</td>
          <td>0.020324</td>
          <td>0.025832</td>
          <td>0.039905</td>
          <td>0.020763</td>
          <td>0.041462</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.067245</td>
          <td>0.086429</td>
          <td>0.061145</td>
          <td>0.182533</td>
          <td>0.330078</td>
          <td>0.373787</td>
          <td>0.379160</td>
          <td>0.390240</td>
          <td>0.402757</td>
          <td>0.412018</td>
          <td>0.173057</td>
          <td>0.199808</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 243-248

Reduction on a particular case RKRK
+++++++++++++++++++++++++++++++++++

(8, 24, 48, N), axis=(0, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 248-254

.. code-block:: default


    axes = (0, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_007.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (0, 2) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (0, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:04,  2.58it/s]     17%|#6        | 2/12 [00:01<00:06,  1.64it/s]     25%|##5       | 3/12 [00:01<00:04,  1.84it/s]     33%|###3      | 4/12 [00:02<00:06,  1.30it/s]     42%|####1     | 5/12 [00:03<00:06,  1.09it/s]     50%|#####     | 6/12 [00:05<00:06,  1.09s/it]     58%|#####8    | 7/12 [00:06<00:06,  1.25s/it]     67%|######6   | 8/12 [00:10<00:08,  2.05s/it]     75%|#######5  | 9/12 [00:15<00:08,  2.89s/it]     83%|########3 | 10/12 [00:21<00:07,  3.81s/it]     92%|#########1| 11/12 [00:24<00:03,  3.54s/it]    100%|##########| 12/12 [00:30<00:00,  4.31s/it]    100%|##########| 12/12 [00:30<00:00,  2.52s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.006172</td>
          <td>0.006453</td>
          <td>0.007489</td>
          <td>0.009412</td>
          <td>0.012839</td>
          <td>0.015435</td>
          <td>0.017713</td>
          <td>0.024007</td>
          <td>0.028091</td>
          <td>0.040313</td>
          <td>0.019482</td>
          <td>0.036825</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000983</td>
          <td>0.001413</td>
          <td>0.002412</td>
          <td>0.004430</td>
          <td>0.008724</td>
          <td>0.011734</td>
          <td>0.017137</td>
          <td>0.027030</td>
          <td>0.040898</td>
          <td>0.056082</td>
          <td>0.080110</td>
          <td>0.265781</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.030096</td>
          <td>0.065485</td>
          <td>0.031435</td>
          <td>0.088182</td>
          <td>0.075088</td>
          <td>0.084769</td>
          <td>0.085916</td>
          <td>0.262728</td>
          <td>0.328832</td>
          <td>0.369703</td>
          <td>0.130138</td>
          <td>0.180364</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 255-261

Conclusion
++++++++++

Some of the configurations should be investigated.
:ref:`l-reducesum-problem1`. The reduction on tensorflow
in one dimension seems to be lazy.

.. GENERATED FROM PYTHON SOURCE LINES 261-269

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "reducemean"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_008.png
   :alt: plot op reducemean
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  46.734 seconds)


.. _sphx_glr_download_gyexamples_plot_op_reducemean.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_reducemean.py <plot_op_reducemean.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_reducemean.ipynb <plot_op_reducemean.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
