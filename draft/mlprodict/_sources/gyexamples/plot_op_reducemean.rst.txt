
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_reducemean.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_reducemean.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_reducemean.py:


.. _l-b-reducesummean:

Compares implementations of ReduceMean
======================================

This example compares the *numpy* for the operator *ReduceMean*
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxReduceMean
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 32-34

ReduceMean implementations
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 34-163

.. code-block:: default


    try:
        from tensorflow.math import reduce_mean as tf_reduce_mean
        from tensorflow import convert_to_tensor
    except ImportError:
        tf_reduce_mean = None
    try:
        from torch import mean as torch_mean, from_numpy
    except ImportError:
        torch_mean = None


    def build_ort_reducemean(axes, op_version=14):  # opset=13, 14, ...
        node = OnnxReduceMean('x', axes=axes, op_version=op_version,
                              output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(axes, repeat=2, number=5, name="ReduceMean",
                     shape_fct=None, max_dim=None):
        if shape_fct is None:
            def shape_fct(dim):
                return (3, dim, 1, 128, 64)
        ort_fct = build_ort_reducemean(axes)
        res = []
        for dim in tqdm([4, 8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            if max_dim is not None and dim > max_dim:
                continue
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.array(axes, dtype=numpy.int64)
                  for _ in range(n_arrays)]
            info = dict(axes=axes, shape=shape)

            # numpy
            fct = lambda x, y: numpy.mean(x, axis=tuple(y))
            ctx = dict(
                xs=xs, ys=ys,
                loop_fct=loop_fct)
            obs = measure_time(
                lambda: loop_fct(fct, xs, ys),
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            fct = ort_fct
            obs = measure_time(
                lambda: loop_fct(fct, xs, ys),
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_reduce_mean is not None:
                # tensorflow
                fct = tf_reduce_mean
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = ys
                obs = measure_time(
                    lambda: loop_fct(fct, ctx['xs'], ctx['ys']),
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_mean is not None:
                def torch_mean1(x, y):
                    return torch_mean(x, y[0])

                def torch_mean2(x, y):
                    return torch_mean(torch_mean(x, y[1]), y[0])

                # torch
                fct = torch_mean1 if len(axes) == 1 else torch_mean2
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    lambda: loop_fct(fct, ctx['xs'], ctx['ys']),
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r"
                       " lower better" % (name, shape_name, axes))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r"
                      " higher better" % (name, shape_name, axes))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 164-173

Reduction on a particular case KR
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KR means kept axis - reduced axis

(8, 24, 48, N), axis=(3, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 173-179

.. code-block:: default


    axes = (3, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_001.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (3,) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (3,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:03,  3.54it/s]     17%|#6        | 2/12 [00:00<00:02,  4.24it/s]     25%|##5       | 3/12 [00:00<00:02,  4.19it/s]     33%|###3      | 4/12 [00:01<00:02,  3.67it/s]     42%|####1     | 5/12 [00:01<00:02,  2.91it/s]     50%|#####     | 6/12 [00:02<00:02,  2.25it/s]     58%|#####8    | 7/12 [00:02<00:02,  1.80it/s]     67%|######6   | 8/12 [00:04<00:02,  1.38it/s]     75%|#######5  | 9/12 [00:05<00:02,  1.08it/s]     83%|########3 | 10/12 [00:07<00:02,  1.26s/it]     92%|#########1| 11/12 [00:08<00:01,  1.19s/it]    100%|##########| 12/12 [00:10<00:00,  1.43s/it]    100%|##########| 12/12 [00:10<00:00,  1.15it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005223</td>
          <td>0.006023</td>
          <td>0.007132</td>
          <td>0.008958</td>
          <td>0.010975</td>
          <td>0.013947</td>
          <td>0.016863</td>
          <td>0.021014</td>
          <td>0.025922</td>
          <td>0.039418</td>
          <td>0.020376</td>
          <td>0.039383</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001660</td>
          <td>0.001809</td>
          <td>0.002036</td>
          <td>0.002642</td>
          <td>0.004111</td>
          <td>0.005333</td>
          <td>0.006125</td>
          <td>0.007968</td>
          <td>0.009381</td>
          <td>0.013094</td>
          <td>0.006400</td>
          <td>0.011676</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.006498</td>
          <td>0.003235</td>
          <td>0.003444</td>
          <td>0.004279</td>
          <td>0.005942</td>
          <td>0.006826</td>
          <td>0.007789</td>
          <td>0.009394</td>
          <td>0.010667</td>
          <td>0.013655</td>
          <td>0.006890</td>
          <td>0.010934</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.013130</td>
          <td>0.006117</td>
          <td>0.005967</td>
          <td>0.006075</td>
          <td>0.005621</td>
          <td>0.006945</td>
          <td>0.007966</td>
          <td>0.009011</td>
          <td>0.011558</td>
          <td>0.013605</td>
          <td>0.007665</td>
          <td>0.012024</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 180-189

Reduction on a particular case RK
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
RK means reduced axis - kept axis

(8, 24, 48, N), axis=(0, )
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 189-195

.. code-block:: default


    axes = (0, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_002.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (0,) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (0,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:01,  8.42it/s]     17%|#6        | 2/12 [00:00<00:01,  7.37it/s]     25%|##5       | 3/12 [00:00<00:01,  5.60it/s]     33%|###3      | 4/12 [00:00<00:01,  4.21it/s]     42%|####1     | 5/12 [00:01<00:02,  2.75it/s]     50%|#####     | 6/12 [00:02<00:03,  1.91it/s]     58%|#####8    | 7/12 [00:03<00:03,  1.42it/s]     67%|######6   | 8/12 [00:04<00:03,  1.01it/s]     75%|#######5  | 9/12 [00:06<00:03,  1.30s/it]     83%|########3 | 10/12 [00:09<00:03,  1.84s/it]     92%|#########1| 11/12 [00:11<00:01,  1.75s/it]    100%|##########| 12/12 [00:14<00:00,  2.14s/it]    100%|##########| 12/12 [00:14<00:00,  1.21s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.001768</td>
          <td>0.002535</td>
          <td>0.004415</td>
          <td>0.007526</td>
          <td>0.014100</td>
          <td>0.021013</td>
          <td>0.027563</td>
          <td>0.044108</td>
          <td>0.057064</td>
          <td>0.087303</td>
          <td>0.043915</td>
          <td>0.086593</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001193</td>
          <td>0.001796</td>
          <td>0.002935</td>
          <td>0.005379</td>
          <td>0.010567</td>
          <td>0.013839</td>
          <td>0.019782</td>
          <td>0.028528</td>
          <td>0.036089</td>
          <td>0.054803</td>
          <td>0.027753</td>
          <td>0.054453</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.001813</td>
          <td>0.002743</td>
          <td>0.003510</td>
          <td>0.005074</td>
          <td>0.007066</td>
          <td>0.008363</td>
          <td>0.009741</td>
          <td>0.012156</td>
          <td>0.013832</td>
          <td>0.017891</td>
          <td>0.009977</td>
          <td>0.015147</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.005369</td>
          <td>0.004526</td>
          <td>0.006448</td>
          <td>0.004404</td>
          <td>0.006708</td>
          <td>0.008599</td>
          <td>0.011713</td>
          <td>0.012121</td>
          <td>0.014214</td>
          <td>0.021268</td>
          <td>0.010681</td>
          <td>0.021860</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 196-205

Reduction on a particular case KRK
++++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(1, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 205-211

.. code-block:: default


    axes = (1, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_003.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (1, 2) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (1, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:02,  5.12it/s]     17%|#6        | 2/12 [00:00<00:02,  4.61it/s]     25%|##5       | 3/12 [00:00<00:02,  4.42it/s]     33%|###3      | 4/12 [00:00<00:02,  3.86it/s]     42%|####1     | 5/12 [00:01<00:02,  2.88it/s]     50%|#####     | 6/12 [00:02<00:02,  2.11it/s]     58%|#####8    | 7/12 [00:03<00:03,  1.64it/s]     67%|######6   | 8/12 [00:04<00:03,  1.23it/s]     75%|#######5  | 9/12 [00:06<00:03,  1.11s/it]     83%|########3 | 10/12 [00:08<00:02,  1.49s/it]     92%|#########1| 11/12 [00:09<00:01,  1.47s/it]    100%|##########| 12/12 [00:12<00:00,  1.90s/it]    100%|##########| 12/12 [00:12<00:00,  1.06s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005347</td>
          <td>0.005689</td>
          <td>0.006678</td>
          <td>0.008731</td>
          <td>0.012241</td>
          <td>0.014939</td>
          <td>0.017229</td>
          <td>0.022799</td>
          <td>0.027208</td>
          <td>0.038715</td>
          <td>0.019860</td>
          <td>0.035201</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.009513</td>
          <td>0.007729</td>
          <td>0.003404</td>
          <td>0.003471</td>
          <td>0.005407</td>
          <td>0.007903</td>
          <td>0.009439</td>
          <td>0.015130</td>
          <td>0.020387</td>
          <td>0.029657</td>
          <td>0.014467</td>
          <td>0.032197</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.001379</td>
          <td>0.002511</td>
          <td>0.003740</td>
          <td>0.003927</td>
          <td>0.006764</td>
          <td>0.008734</td>
          <td>0.011487</td>
          <td>0.011817</td>
          <td>0.032117</td>
          <td>0.016899</td>
          <td>0.034152</td>
          <td>0.072909</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001570</td>
          <td>0.004165</td>
          <td>0.004294</td>
          <td>0.004283</td>
          <td>0.005666</td>
          <td>0.008788</td>
          <td>0.011226</td>
          <td>0.013128</td>
          <td>0.017690</td>
          <td>0.025372</td>
          <td>0.011825</td>
          <td>0.025276</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 212-214

(8, 24 * 48, N), axis=1
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 214-220

.. code-block:: default


    axes = (1, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24 * 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_004.png
   :alt: ReduceMean benchmark '(8, 1152, N)' - (1,) lower better, ReduceMean Speedup, baseline=numpy '(8, 1152, N)' - (1,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:02,  4.68it/s]     17%|#6        | 2/12 [00:00<00:02,  4.52it/s]     25%|##5       | 3/12 [00:00<00:01,  4.55it/s]     33%|###3      | 4/12 [00:00<00:01,  4.05it/s]     42%|####1     | 5/12 [00:01<00:02,  3.01it/s]     50%|#####     | 6/12 [00:02<00:02,  2.21it/s]     58%|#####8    | 7/12 [00:03<00:02,  1.68it/s]     67%|######6   | 8/12 [00:04<00:03,  1.25it/s]     75%|#######5  | 9/12 [00:06<00:03,  1.10s/it]     83%|########3 | 10/12 [00:08<00:02,  1.49s/it]     92%|#########1| 11/12 [00:09<00:01,  1.48s/it]    100%|##########| 12/12 [00:12<00:00,  1.93s/it]    100%|##########| 12/12 [00:12<00:00,  1.07s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005308</td>
          <td>0.005643</td>
          <td>0.006695</td>
          <td>0.008653</td>
          <td>0.012247</td>
          <td>0.014929</td>
          <td>0.017522</td>
          <td>0.022856</td>
          <td>0.027057</td>
          <td>0.039259</td>
          <td>0.018809</td>
          <td>0.035294</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.007600</td>
          <td>0.007726</td>
          <td>0.001674</td>
          <td>0.002975</td>
          <td>0.005325</td>
          <td>0.007915</td>
          <td>0.009359</td>
          <td>0.014664</td>
          <td>0.018422</td>
          <td>0.028263</td>
          <td>0.014465</td>
          <td>0.033165</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.001349</td>
          <td>0.002558</td>
          <td>0.003037</td>
          <td>0.004795</td>
          <td>0.006747</td>
          <td>0.008900</td>
          <td>0.011565</td>
          <td>0.011805</td>
          <td>0.032088</td>
          <td>0.016887</td>
          <td>0.034464</td>
          <td>0.072807</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.005384</td>
          <td>0.003614</td>
          <td>0.004710</td>
          <td>0.001977</td>
          <td>0.003841</td>
          <td>0.005845</td>
          <td>0.010258</td>
          <td>0.013430</td>
          <td>0.021125</td>
          <td>0.027710</td>
          <td>0.016615</td>
          <td>0.031519</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 221-223

(2, 8, 12, 24, 2, N), axis=(2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 223-229

.. code-block:: default


    axes = (2, 3)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (2, 8, 12, 24, 2, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_005.png
   :alt: ReduceMean benchmark '(2, 8, 12, 24, 2, N)' - (2, 3) lower better, ReduceMean Speedup, baseline=numpy '(2, 8, 12, 24, 2, N)' - (2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:01,  7.98it/s]     17%|#6        | 2/12 [00:00<00:01,  7.02it/s]     25%|##5       | 3/12 [00:00<00:01,  5.72it/s]     33%|###3      | 4/12 [00:00<00:01,  4.45it/s]     42%|####1     | 5/12 [00:01<00:02,  3.09it/s]     50%|#####     | 6/12 [00:01<00:02,  2.22it/s]     58%|#####8    | 7/12 [00:02<00:02,  1.73it/s]     67%|######6   | 8/12 [00:04<00:03,  1.26it/s]     75%|#######5  | 9/12 [00:05<00:03,  1.04s/it]     83%|########3 | 10/12 [00:08<00:02,  1.45s/it]     92%|#########1| 11/12 [00:09<00:01,  1.44s/it]    100%|##########| 12/12 [00:12<00:00,  1.86s/it]    100%|##########| 12/12 [00:12<00:00,  1.02s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.003413</td>
          <td>0.003748</td>
          <td>0.004777</td>
          <td>0.007515</td>
          <td>0.010064</td>
          <td>0.012925</td>
          <td>0.015049</td>
          <td>0.020930</td>
          <td>0.025310</td>
          <td>0.038101</td>
          <td>0.018489</td>
          <td>0.035309</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.004148</td>
          <td>0.001165</td>
          <td>0.001772</td>
          <td>0.002982</td>
          <td>0.005318</td>
          <td>0.008001</td>
          <td>0.009817</td>
          <td>0.014459</td>
          <td>0.018914</td>
          <td>0.027305</td>
          <td>0.016463</td>
          <td>0.032534</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.001452</td>
          <td>0.002551</td>
          <td>0.003192</td>
          <td>0.005087</td>
          <td>0.006488</td>
          <td>0.007914</td>
          <td>0.008764</td>
          <td>0.011030</td>
          <td>0.017871</td>
          <td>0.020632</td>
          <td>0.028237</td>
          <td>0.061594</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001790</td>
          <td>0.004840</td>
          <td>0.005957</td>
          <td>0.003975</td>
          <td>0.007709</td>
          <td>0.009371</td>
          <td>0.011179</td>
          <td>0.016356</td>
          <td>0.019808</td>
          <td>0.028848</td>
          <td>0.015600</td>
          <td>0.027155</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 230-235

Reduction on a particular case RKR
++++++++++++++++++++++++++++++++++

(N, 64, 16, 16), axis=(0, 2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 235-242

.. code-block:: default


    axes = (0, 2, 3)
    df, piv, ax = benchmark_op(
        axes, shape_fct=lambda dim: (dim, 64, 16, 16))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_006.png
   :alt: ReduceMean benchmark '(N, 64, 16, 16)' - (0, 2, 3) lower better, ReduceMean Speedup, baseline=numpy '(N, 64, 16, 16)' - (0, 2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:01,  7.73it/s]     17%|#6        | 2/12 [00:00<00:01,  6.30it/s]     25%|##5       | 3/12 [00:00<00:01,  4.59it/s]     33%|###3      | 4/12 [00:01<00:02,  2.98it/s]     42%|####1     | 5/12 [00:02<00:03,  1.77it/s]     50%|#####     | 6/12 [00:03<00:05,  1.09it/s]     58%|#####8    | 7/12 [00:05<00:06,  1.32s/it]     67%|######6   | 8/12 [00:10<00:08,  2.23s/it]     75%|#######5  | 9/12 [00:15<00:10,  3.35s/it]     83%|########3 | 10/12 [00:25<00:10,  5.21s/it]     92%|#########1| 11/12 [00:30<00:05,  5.12s/it]    100%|##########| 12/12 [00:39<00:00,  6.52s/it]    100%|##########| 12/12 [00:39<00:00,  3.32s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.001752</td>
          <td>0.002695</td>
          <td>0.004924</td>
          <td>0.007650</td>
          <td>0.012665</td>
          <td>0.018571</td>
          <td>0.022836</td>
          <td>0.034366</td>
          <td>0.043627</td>
          <td>0.066980</td>
          <td>0.033725</td>
          <td>0.066561</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001199</td>
          <td>0.001748</td>
          <td>0.003039</td>
          <td>0.005632</td>
          <td>0.010607</td>
          <td>0.016204</td>
          <td>0.020587</td>
          <td>0.034161</td>
          <td>0.043236</td>
          <td>0.063685</td>
          <td>0.034304</td>
          <td>0.062074</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.003403</td>
          <td>0.003798</td>
          <td>0.006659</td>
          <td>0.011901</td>
          <td>0.026464</td>
          <td>0.056607</td>
          <td>0.083985</td>
          <td>0.216987</td>
          <td>0.330514</td>
          <td>0.546534</td>
          <td>0.296253</td>
          <td>0.570889</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.003835</td>
          <td>0.004543</td>
          <td>0.004684</td>
          <td>0.008341</td>
          <td>0.011554</td>
          <td>0.014734</td>
          <td>0.017230</td>
          <td>0.022817</td>
          <td>0.027371</td>
          <td>0.041193</td>
          <td>0.020620</td>
          <td>0.041786</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 243-248

Reduction on a particular case RKRK
+++++++++++++++++++++++++++++++++++

(8, 24, 48, N), axis=(0, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 248-254

.. code-block:: default


    axes = (0, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_007.png
   :alt: ReduceMean benchmark '(8, 24, 48, N)' - (0, 2) lower better, ReduceMean Speedup, baseline=numpy '(8, 24, 48, N)' - (0, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]      8%|8         | 1/12 [00:00<00:01,  6.90it/s]     17%|#6        | 2/12 [00:00<00:01,  5.89it/s]     25%|##5       | 3/12 [00:00<00:01,  4.77it/s]     33%|###3      | 4/12 [00:00<00:02,  3.55it/s]     42%|####1     | 5/12 [00:01<00:02,  2.41it/s]     50%|#####     | 6/12 [00:02<00:03,  1.73it/s]     58%|#####8    | 7/12 [00:03<00:03,  1.31it/s]     67%|######6   | 8/12 [00:05<00:04,  1.03s/it]     75%|#######5  | 9/12 [00:07<00:04,  1.46s/it]     83%|########3 | 10/12 [00:10<00:03,  1.97s/it]     92%|#########1| 11/12 [00:13<00:02,  2.11s/it]    100%|##########| 12/12 [00:19<00:00,  3.44s/it]    100%|##########| 12/12 [00:19<00:00,  1.64s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>4</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.006161</td>
          <td>0.006449</td>
          <td>0.007506</td>
          <td>0.009411</td>
          <td>0.012957</td>
          <td>0.015435</td>
          <td>0.017463</td>
          <td>0.024085</td>
          <td>0.029325</td>
          <td>0.040096</td>
          <td>0.019670</td>
          <td>0.036506</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001024</td>
          <td>0.001517</td>
          <td>0.002513</td>
          <td>0.004877</td>
          <td>0.009883</td>
          <td>0.012631</td>
          <td>0.017927</td>
          <td>0.028844</td>
          <td>0.043851</td>
          <td>0.066764</td>
          <td>0.079597</td>
          <td>0.317151</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.004011</td>
          <td>0.005505</td>
          <td>0.007365</td>
          <td>0.011074</td>
          <td>0.016488</td>
          <td>0.021164</td>
          <td>0.027975</td>
          <td>0.033289</td>
          <td>0.070981</td>
          <td>0.056702</td>
          <td>0.068690</td>
          <td>0.146789</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001584</td>
          <td>0.002102</td>
          <td>0.002644</td>
          <td>0.003248</td>
          <td>0.005485</td>
          <td>0.008860</td>
          <td>0.011549</td>
          <td>0.014082</td>
          <td>0.016687</td>
          <td>0.025893</td>
          <td>0.011971</td>
          <td>0.026347</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 255-261

Conclusion
++++++++++

Some of the configurations should be investigated.
:ref:`l-reducesum-problem1`. The reduction on tensorflow
in one dimension seems to be lazy.

.. GENERATED FROM PYTHON SOURCE LINES 261-269

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "reducemean"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemean_008.png
   :alt: plot op reducemean
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemean_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  20.805 seconds)


.. _sphx_glr_download_gyexamples_plot_op_reducemean.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_reducemean.py <plot_op_reducemean.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_reducemean.ipynb <plot_op_reducemean.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
