
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_reducemax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_reducemax.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_reducemax.py:


.. _l-b-reducesummax:

Compares implementations of ReduceMax
=====================================

This example compares the *numpy* for the operator *ReduceMax*
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxReduceMax
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 32-34

ReduceMax implementations
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 34-160

.. code-block:: default


    try:
        from tensorflow.math import reduce_max as tf_reduce_max
        from tensorflow import convert_to_tensor
    except ImportError:
        tf_reduce_max = None
    try:
        from torch import max as torch_max, from_numpy
    except ImportError:
        torch_max = None


    def build_ort_reducemax(axes, op_version=14):  # opset=13, 14, ...
        node = OnnxReduceMax('x', axes=axes, op_version=op_version,
                             output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(axes, repeat=2, number=5, name="ReduceMax", shape_fct=None):
        if shape_fct is None:
            def shape_fct(dim):
                return (3, dim, 1, 128, 64)
        ort_fct = build_ort_reducemax(axes)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.array(axes, dtype=numpy.int64)
                  for _ in range(n_arrays)]
            info = dict(axes=axes, shape=shape)

            # numpy
            ctx = dict(
                xs=xs, ys=ys,
                fct=lambda x, y: numpy.amax(x, tuple(y)),
                loop_fct=loop_fct)
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            ctx['fct'] = ort_fct
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_reduce_max is not None:
                # tensorflow
                ctx['fct'] = tf_reduce_max
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = ys
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_max is not None:
                def torch_max1(x, y):
                    return torch_max(x, y[0])

                def torch_max2(x, y):
                    return torch_max(torch_max(x, y[1])[0], y[0])[0]

                # torch
                ctx['fct'] = torch_max1 if len(axes) == 1 else torch_max2
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r"
                       " lower better" % (name, shape_name, axes))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r"
                      " higher better" % (name, shape_name, axes))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 161-170

Reduction on a particular case KR
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KR means kept axis - reduced axis

(8, 24, 48, N), axis=(3, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 170-176

.. code-block:: default


    axes = (3, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_001.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (3,) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (3,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:10,  1.09s/it]     18%|#8        | 2/11 [00:01<00:08,  1.11it/s]     27%|##7       | 3/11 [00:03<00:08,  1.08s/it]     36%|###6      | 4/11 [00:04<00:08,  1.23s/it]     45%|####5     | 5/11 [00:06<00:08,  1.37s/it]     55%|#####4    | 6/11 [00:08<00:07,  1.51s/it]     64%|######3   | 7/11 [00:09<00:06,  1.61s/it]     73%|#######2  | 8/11 [00:12<00:05,  1.83s/it]     82%|########1 | 9/11 [00:15<00:04,  2.18s/it]     91%|######### | 10/11 [00:16<00:01,  1.94s/it]    100%|##########| 11/11 [00:18<00:00,  2.05s/it]    100%|##########| 11/11 [00:18<00:00,  1.71s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.018162</td>
          <td>0.024256</td>
          <td>0.026089</td>
          <td>0.027449</td>
          <td>0.028488</td>
          <td>0.031048</td>
          <td>0.035552</td>
          <td>0.038757</td>
          <td>0.047936</td>
          <td>0.022352</td>
          <td>0.038103</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.003302</td>
          <td>0.001599</td>
          <td>0.002524</td>
          <td>0.004254</td>
          <td>0.004987</td>
          <td>0.005713</td>
          <td>0.007586</td>
          <td>0.010507</td>
          <td>0.013066</td>
          <td>0.007601</td>
          <td>0.013998</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.082772</td>
          <td>0.046211</td>
          <td>0.090157</td>
          <td>0.093903</td>
          <td>0.098461</td>
          <td>0.102381</td>
          <td>0.076816</td>
          <td>0.102986</td>
          <td>0.114965</td>
          <td>0.046541</td>
          <td>0.053641</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 177-186

Reduction on a particular case RK
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
RK means reduced axis - kept axis,

(8, 24, 48, N), axis=(0, )
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default


    axes = (0, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_002.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (0,) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (0,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:09,  1.01it/s]     18%|#8        | 2/11 [00:02<00:09,  1.05s/it]     27%|##7       | 3/11 [00:03<00:09,  1.18s/it]     36%|###6      | 4/11 [00:05<00:09,  1.40s/it]     45%|####5     | 5/11 [00:07<00:10,  1.67s/it]     55%|#####4    | 6/11 [00:09<00:09,  1.89s/it]     64%|######3   | 7/11 [00:12<00:09,  2.35s/it]     73%|#######2  | 8/11 [00:16<00:08,  2.84s/it]     82%|########1 | 9/11 [00:22<00:07,  3.71s/it]     91%|######### | 10/11 [00:25<00:03,  3.42s/it]    100%|##########| 11/11 [00:30<00:00,  3.95s/it]    100%|##########| 11/11 [00:30<00:00,  2.76s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005682</td>
          <td>0.010565</td>
          <td>0.020549</td>
          <td>0.039940</td>
          <td>0.062587</td>
          <td>0.080118</td>
          <td>0.123943</td>
          <td>0.157168</td>
          <td>0.244119</td>
          <td>0.124867</td>
          <td>0.248741</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001659</td>
          <td>0.002620</td>
          <td>0.004749</td>
          <td>0.010224</td>
          <td>0.012667</td>
          <td>0.017180</td>
          <td>0.025427</td>
          <td>0.030803</td>
          <td>0.046660</td>
          <td>0.024044</td>
          <td>0.046242</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.089271</td>
          <td>0.090861</td>
          <td>0.098514</td>
          <td>0.103386</td>
          <td>0.108183</td>
          <td>0.096529</td>
          <td>0.118908</td>
          <td>0.123994</td>
          <td>0.151078</td>
          <td>0.067124</td>
          <td>0.096205</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 193-202

Reduction on a particular case KRK
++++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(1, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 202-208

.. code-block:: default


    axes = (1, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_003.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (1, 2) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (1, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:10,  1.04s/it]     18%|#8        | 2/11 [00:02<00:10,  1.19s/it]     27%|##7       | 3/11 [00:03<00:08,  1.11s/it]     36%|###6      | 4/11 [00:04<00:09,  1.29s/it]     45%|####5     | 5/11 [00:05<00:07,  1.18s/it]     55%|#####4    | 6/11 [00:07<00:06,  1.26s/it]     64%|######3   | 7/11 [00:10<00:07,  1.88s/it]     73%|#######2  | 8/11 [00:12<00:06,  2.03s/it]     82%|########1 | 9/11 [00:16<00:05,  2.61s/it]     91%|######### | 10/11 [00:19<00:02,  2.52s/it]    100%|##########| 11/11 [00:23<00:00,  3.15s/it]    100%|##########| 11/11 [00:23<00:00,  2.15s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.011017</td>
          <td>0.013082</td>
          <td>0.018692</td>
          <td>0.028396</td>
          <td>0.039680</td>
          <td>0.048182</td>
          <td>0.070414</td>
          <td>0.087690</td>
          <td>0.132109</td>
          <td>0.066579</td>
          <td>0.129754</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000975</td>
          <td>0.001610</td>
          <td>0.003347</td>
          <td>0.005648</td>
          <td>0.006301</td>
          <td>0.008852</td>
          <td>0.010433</td>
          <td>0.035026</td>
          <td>0.019736</td>
          <td>0.033839</td>
          <td>0.075520</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.088854</td>
          <td>0.109464</td>
          <td>0.069957</td>
          <td>0.101884</td>
          <td>0.021326</td>
          <td>0.046015</td>
          <td>0.174519</td>
          <td>0.033094</td>
          <td>0.115419</td>
          <td>0.071050</td>
          <td>0.129555</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 209-211

(8, 24 * 48, N), axis=1
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 211-217

.. code-block:: default


    axes = (1, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24 * 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_004.png
   :alt: ReduceMax benchmark '(8, 1152, N)' - (1,) lower better, ReduceMax Speedup, baseline=numpy '(8, 1152, N)' - (1,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:10,  1.05s/it]     18%|#8        | 2/11 [00:01<00:06,  1.38it/s]     27%|##7       | 3/11 [00:02<00:06,  1.25it/s]     36%|###6      | 4/11 [00:03<00:07,  1.04s/it]     45%|####5     | 5/11 [00:04<00:05,  1.01it/s]     55%|#####4    | 6/11 [00:06<00:06,  1.35s/it]     64%|######3   | 7/11 [00:09<00:06,  1.74s/it]     73%|#######2  | 8/11 [00:13<00:07,  2.53s/it]     82%|########1 | 9/11 [00:17<00:05,  2.93s/it]     91%|######### | 10/11 [00:20<00:03,  3.05s/it]    100%|##########| 11/11 [00:27<00:00,  4.09s/it]    100%|##########| 11/11 [00:27<00:00,  2.47s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.010905</td>
          <td>0.013113</td>
          <td>0.018562</td>
          <td>0.028505</td>
          <td>0.039592</td>
          <td>0.048290</td>
          <td>0.070319</td>
          <td>0.087665</td>
          <td>0.131991</td>
          <td>0.066587</td>
          <td>0.129752</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000969</td>
          <td>0.002156</td>
          <td>0.002802</td>
          <td>0.004310</td>
          <td>0.006204</td>
          <td>0.009063</td>
          <td>0.010331</td>
          <td>0.035272</td>
          <td>0.021653</td>
          <td>0.033794</td>
          <td>0.076582</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.089673</td>
          <td>0.029356</td>
          <td>0.057212</td>
          <td>0.087373</td>
          <td>0.014500</td>
          <td>0.108763</td>
          <td>0.113134</td>
          <td>0.221537</td>
          <td>0.107943</td>
          <td>0.169199</td>
          <td>0.315968</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 218-220

(2, 8, 12, 24, 2, N), axis=(2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 220-226

.. code-block:: default


    axes = (2, 3)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (2, 8, 12, 24, 2, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_005.png
   :alt: ReduceMax benchmark '(2, 8, 12, 24, 2, N)' - (2, 3) lower better, ReduceMax Speedup, baseline=numpy '(2, 8, 12, 24, 2, N)' - (2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:18,  1.87s/it]     18%|#8        | 2/11 [00:03<00:17,  1.93s/it]     27%|##7       | 3/11 [00:05<00:15,  1.99s/it]     36%|###6      | 4/11 [00:07<00:13,  2.00s/it]     45%|####5     | 5/11 [00:10<00:13,  2.24s/it]     55%|#####4    | 6/11 [00:13<00:12,  2.48s/it]     64%|######3   | 7/11 [00:16<00:11,  2.80s/it]     73%|#######2  | 8/11 [00:20<00:09,  3.07s/it]     82%|########1 | 9/11 [00:25<00:07,  3.70s/it]     91%|######### | 10/11 [00:28<00:03,  3.31s/it]    100%|##########| 11/11 [00:32<00:00,  3.67s/it]    100%|##########| 11/11 [00:32<00:00,  2.97s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.007115</td>
          <td>0.010029</td>
          <td>0.015813</td>
          <td>0.026288</td>
          <td>0.038093</td>
          <td>0.047181</td>
          <td>0.070768</td>
          <td>0.089044</td>
          <td>0.136099</td>
          <td>0.069048</td>
          <td>0.136035</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000967</td>
          <td>0.001449</td>
          <td>0.002064</td>
          <td>0.003559</td>
          <td>0.005453</td>
          <td>0.007038</td>
          <td>0.009775</td>
          <td>0.018565</td>
          <td>0.029007</td>
          <td>0.030170</td>
          <td>0.064594</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.176037</td>
          <td>0.180110</td>
          <td>0.178986</td>
          <td>0.150199</td>
          <td>0.194171</td>
          <td>0.200485</td>
          <td>0.205705</td>
          <td>0.180152</td>
          <td>0.221740</td>
          <td>0.081667</td>
          <td>0.124144</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 227-232

Reduction on a particular case RKR
++++++++++++++++++++++++++++++++++

(N, 64, 16, 16), axis=(0, 2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 232-239

.. code-block:: default


    axes = (0, 2, 3)
    df, piv, ax = benchmark_op(
        axes, shape_fct=lambda dim: (dim, 64, 16, 16))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_006.png
   :alt: ReduceMax benchmark '(N, 64, 16, 16)' - (0, 2, 3) lower better, ReduceMax Speedup, baseline=numpy '(N, 64, 16, 16)' - (0, 2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:06,  1.48it/s]     18%|#8        | 2/11 [00:01<00:07,  1.13it/s]     27%|##7       | 3/11 [00:03<00:09,  1.18s/it]     36%|###6      | 4/11 [00:05<00:09,  1.42s/it]     45%|####5     | 5/11 [00:07<00:11,  1.95s/it]     55%|#####4    | 6/11 [00:10<00:11,  2.27s/it]     64%|######3   | 7/11 [00:14<00:10,  2.75s/it]     73%|#######2  | 8/11 [00:18<00:09,  3.28s/it]     82%|########1 | 9/11 [00:25<00:08,  4.16s/it]     91%|######### | 10/11 [00:28<00:03,  3.80s/it]    100%|##########| 11/11 [00:33<00:00,  4.23s/it]    100%|##########| 11/11 [00:33<00:00,  3.02s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.002426</td>
          <td>0.004902</td>
          <td>0.008167</td>
          <td>0.014676</td>
          <td>0.021942</td>
          <td>0.027749</td>
          <td>0.042226</td>
          <td>0.054067</td>
          <td>0.082807</td>
          <td>0.042922</td>
          <td>0.084252</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001268</td>
          <td>0.001938</td>
          <td>0.003723</td>
          <td>0.006287</td>
          <td>0.009553</td>
          <td>0.011422</td>
          <td>0.018796</td>
          <td>0.024808</td>
          <td>0.040023</td>
          <td>0.021918</td>
          <td>0.040855</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.059271</td>
          <td>0.086945</td>
          <td>0.122529</td>
          <td>0.124595</td>
          <td>0.203098</td>
          <td>0.179521</td>
          <td>0.205229</td>
          <td>0.227056</td>
          <td>0.271238</td>
          <td>0.125010</td>
          <td>0.177085</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 240-245

Reduction on a particular case RKRK
+++++++++++++++++++++++++++++++++++

(8, 24, 48, N), axis=(0, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 245-251

.. code-block:: default


    axes = (0, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_007.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (0, 2) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (0, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:01<00:19,  1.92s/it]     18%|#8        | 2/11 [00:02<00:11,  1.23s/it]     27%|##7       | 3/11 [00:04<00:10,  1.31s/it]     36%|###6      | 4/11 [00:05<00:10,  1.47s/it]     45%|####5     | 5/11 [00:07<00:10,  1.69s/it]     55%|#####4    | 6/11 [00:10<00:09,  1.98s/it]     64%|######3   | 7/11 [00:13<00:09,  2.41s/it]     73%|#######2  | 8/11 [00:17<00:08,  2.94s/it]     82%|########1 | 9/11 [00:23<00:07,  3.69s/it]     91%|######### | 10/11 [00:26<00:03,  3.49s/it]    100%|##########| 11/11 [00:32<00:00,  4.51s/it]    100%|##########| 11/11 [00:32<00:00,  3.00s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.010435</td>
          <td>0.012825</td>
          <td>0.018634</td>
          <td>0.028819</td>
          <td>0.040265</td>
          <td>0.049142</td>
          <td>0.073128</td>
          <td>0.090945</td>
          <td>0.137708</td>
          <td>0.069292</td>
          <td>0.135588</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001459</td>
          <td>0.002595</td>
          <td>0.004599</td>
          <td>0.008858</td>
          <td>0.012105</td>
          <td>0.017449</td>
          <td>0.029198</td>
          <td>0.043995</td>
          <td>0.066525</td>
          <td>0.081930</td>
          <td>0.307510</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.177319</td>
          <td>0.053281</td>
          <td>0.106080</td>
          <td>0.114717</td>
          <td>0.124100</td>
          <td>0.149301</td>
          <td>0.167036</td>
          <td>0.195177</td>
          <td>0.209823</td>
          <td>0.088867</td>
          <td>0.116373</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 252-258

Conclusion
++++++++++

Some of the configurations should be investigated.
:ref:`l-reducesum-problem1`. The reduction on tensorflow
in one dimension seems to be lazy.

.. GENERATED FROM PYTHON SOURCE LINES 258-266

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "reducemax"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_008.png
   :alt: plot op reducemax
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  36.816 seconds)


.. _sphx_glr_download_gyexamples_plot_op_reducemax.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_reducemax.py <plot_op_reducemax.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_reducemax.ipynb <plot_op_reducemax.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
