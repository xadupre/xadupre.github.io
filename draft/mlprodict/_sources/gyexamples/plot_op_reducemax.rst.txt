
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_op_reducemax.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_op_reducemax.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_op_reducemax.py:


.. _l-b-reducesummax:

Compares implementations of ReduceMax
=====================================

This example compares the *numpy* for the operator *ReduceMax*
to :epkg:`onnxruntime` implementation.
If available, :epkg:`tensorflow` and :epkg:`pytorch` are included as well.

.. contents::
    :local:

Available optimisation
++++++++++++++++++++++

The code shows which parallelisation optimisation could be used,
*AVX* or *SSE* and the number of available processors.

.. GENERATED FROM PYTHON SOURCE LINES 20-31

.. code-block:: default

    import numpy
    import pandas
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxReduceMax
    from cpyquickhelper.numbers import measure_time
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    print(code_optimisation())





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 32-34

ReduceMax implementations
+++++++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 34-160

.. code-block:: default


    try:
        from tensorflow.math import reduce_max as tf_reduce_max
        from tensorflow import convert_to_tensor
    except ImportError:
        tf_reduce_max = None
    try:
        from torch import max as torch_max, from_numpy
    except ImportError:
        torch_max = None


    def build_ort_reducemax(axes, op_version=14):  # opset=13, 14, ...
        node = OnnxReduceMax('x', axes=axes, op_version=op_version,
                             output_names=['z'])
        onx = node.to_onnx(inputs=[('x', FloatTensorType())],
                           target_opset=op_version)
        sess = InferenceSession(onx.SerializeToString())
        return lambda x, y: sess.run(None, {'x': x})


    def loop_fct(fct, xs, ys):
        for x, y in zip(xs, ys):
            fct(x, y)


    def benchmark_op(axes, repeat=2, number=5, name="ReduceMax", shape_fct=None):
        if shape_fct is None:
            def shape_fct(dim):
                return (3, dim, 1, 128, 64)
        ort_fct = build_ort_reducemax(axes)
        res = []
        for dim in tqdm([8, 16, 32, 64, 100, 128, 200,
                         256, 400, 512, 1024]):
            shape = shape_fct(dim)
            n_arrays = 10 if dim < 512 else 4
            xs = [numpy.random.rand(*shape).astype(numpy.float32)
                  for _ in range(n_arrays)]
            ys = [numpy.array(axes, dtype=numpy.int64)
                  for _ in range(n_arrays)]
            info = dict(axes=axes, shape=shape)

            # numpy
            ctx = dict(
                xs=xs, ys=ys,
                fct=lambda x, y: numpy.amax(x, tuple(y)),
                loop_fct=loop_fct)
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'numpy'
            obs.update(info)
            res.append(obs)

            # onnxruntime
            ctx['fct'] = ort_fct
            obs = measure_time(
                "loop_fct(fct, xs, ys)",
                div_by_number=True, context=ctx, repeat=repeat, number=number)
            obs['dim'] = dim
            obs['fct'] = 'ort'
            obs.update(info)
            res.append(obs)

            if tf_reduce_max is not None:
                # tensorflow
                ctx['fct'] = tf_reduce_max
                ctx['xs'] = [convert_to_tensor(x) for x in xs]
                ctx['ys'] = ys
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'tf'
                obs.update(info)
                res.append(obs)

            if torch_max is not None:
                def torch_max1(x, y):
                    return torch_max(x, y[0])

                def torch_max2(x, y):
                    return torch_max(torch_max(x, y[1])[0], y[0])[0]

                # torch
                ctx['fct'] = torch_max1 if len(axes) == 1 else torch_max2
                ctx['xs'] = [from_numpy(x) for x in xs]
                ctx['ys'] = ys  # [from_numpy(y) for y in ys]
                obs = measure_time(
                    "loop_fct(fct, xs, ys)",
                    div_by_number=True, context=ctx, repeat=repeat, number=number)
                obs['dim'] = dim
                obs['fct'] = 'torch'
                obs.update(info)
                res.append(obs)

        # Dataframes
        shape_name = str(shape).replace(str(dim), "N")
        df = pandas.DataFrame(res)
        df.columns = [_.replace('dim', 'N') for _ in df.columns]
        piv = df.pivot('N', 'fct', 'average')

        rs = piv.copy()
        for c in ['ort', 'torch', 'tf', 'tf_copy']:
            if c in rs.columns:
                rs[c] = rs['numpy'] / rs[c]
        rs['numpy'] = 1.

        # Graphs.
        fig, ax = plt.subplots(1, 2, figsize=(12, 4))
        piv.plot(logx=True, logy=True, ax=ax[0],
                 title="%s benchmark\n%r - %r"
                       " lower better" % (name, shape_name, axes))
        ax[0].legend(prop={"size": 9})
        rs.plot(logx=True, logy=True, ax=ax[1],
                title="%s Speedup, baseline=numpy\n%r - %r"
                      " higher better" % (name, shape_name, axes))
        ax[1].plot([min(rs.index), max(rs.index)], [0.5, 0.5], 'g--')
        ax[1].plot([min(rs.index), max(rs.index)], [2., 2.], 'g--')
        ax[1].legend(prop={"size": 9})
        return df, rs, ax


    dfs = []








.. GENERATED FROM PYTHON SOURCE LINES 161-170

Reduction on a particular case KR
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KR means kept axis - reduced axis

(8, 24, 48, N), axis=(3, )
^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 170-176

.. code-block:: default


    axes = (3, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_001.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (3,) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (3,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:08,  1.12it/s]     18%|#8        | 2/11 [00:01<00:05,  1.67it/s]     27%|##7       | 3/11 [00:01<00:04,  1.86it/s]     36%|###6      | 4/11 [00:02<00:03,  1.76it/s]     45%|####5     | 5/11 [00:03<00:03,  1.55it/s]     55%|#####4    | 6/11 [00:04<00:03,  1.35it/s]     64%|######3   | 7/11 [00:05<00:03,  1.11it/s]     73%|#######2  | 8/11 [00:06<00:03,  1.08s/it]     82%|########1 | 9/11 [00:08<00:02,  1.41s/it]     91%|######### | 10/11 [00:09<00:01,  1.30s/it]    100%|##########| 11/11 [00:11<00:00,  1.50s/it]    100%|##########| 11/11 [00:11<00:00,  1.08s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.018203</td>
          <td>0.024396</td>
          <td>0.026085</td>
          <td>0.027432</td>
          <td>0.028419</td>
          <td>0.031014</td>
          <td>0.035495</td>
          <td>0.039095</td>
          <td>0.048029</td>
          <td>0.022910</td>
          <td>0.036555</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.003001</td>
          <td>0.001429</td>
          <td>0.002077</td>
          <td>0.003493</td>
          <td>0.004798</td>
          <td>0.007341</td>
          <td>0.007461</td>
          <td>0.008883</td>
          <td>0.013736</td>
          <td>0.006178</td>
          <td>0.011593</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.027945</td>
          <td>0.004515</td>
          <td>0.005425</td>
          <td>0.007138</td>
          <td>0.008103</td>
          <td>0.008898</td>
          <td>0.010316</td>
          <td>0.011533</td>
          <td>0.014243</td>
          <td>0.007598</td>
          <td>0.011114</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.037092</td>
          <td>0.003274</td>
          <td>0.002124</td>
          <td>0.003427</td>
          <td>0.005176</td>
          <td>0.006666</td>
          <td>0.008074</td>
          <td>0.009550</td>
          <td>0.015023</td>
          <td>0.006891</td>
          <td>0.012210</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 177-186

Reduction on a particular case RK
+++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
RK means reduced axis - kept axis,

(8, 24, 48, N), axis=(0, )
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 186-192

.. code-block:: default


    axes = (0, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_002.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (0,) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (0,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:01,  5.62it/s]     18%|#8        | 2/11 [00:00<00:02,  4.28it/s]     27%|##7       | 3/11 [00:00<00:02,  2.91it/s]     36%|###6      | 4/11 [00:01<00:03,  1.81it/s]     45%|####5     | 5/11 [00:03<00:04,  1.23it/s]     55%|#####4    | 6/11 [00:04<00:05,  1.10s/it]     64%|######3   | 7/11 [00:07<00:06,  1.56s/it]     73%|#######2  | 8/11 [00:10<00:06,  2.07s/it]     82%|########1 | 9/11 [00:15<00:05,  2.95s/it]     91%|######### | 10/11 [00:17<00:02,  2.81s/it]    100%|##########| 11/11 [00:22<00:00,  3.45s/it]    100%|##########| 11/11 [00:22<00:00,  2.06s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.005467</td>
          <td>0.010578</td>
          <td>0.020644</td>
          <td>0.040192</td>
          <td>0.062423</td>
          <td>0.079884</td>
          <td>0.123449</td>
          <td>0.156960</td>
          <td>0.244375</td>
          <td>0.124871</td>
          <td>0.248784</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001918</td>
          <td>0.003056</td>
          <td>0.005677</td>
          <td>0.011100</td>
          <td>0.014296</td>
          <td>0.020822</td>
          <td>0.030205</td>
          <td>0.038104</td>
          <td>0.058082</td>
          <td>0.030579</td>
          <td>0.058021</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002901</td>
          <td>0.003618</td>
          <td>0.005254</td>
          <td>0.007176</td>
          <td>0.008675</td>
          <td>0.010094</td>
          <td>0.012544</td>
          <td>0.014319</td>
          <td>0.018727</td>
          <td>0.009900</td>
          <td>0.015835</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.004500</td>
          <td>0.004304</td>
          <td>0.005387</td>
          <td>0.008350</td>
          <td>0.011374</td>
          <td>0.015004</td>
          <td>0.022629</td>
          <td>0.028177</td>
          <td>0.043676</td>
          <td>0.021673</td>
          <td>0.042409</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 193-202

Reduction on a particular case KRK
++++++++++++++++++++++++++++++++++

Consecutive axis not reduced and consecutive reduced
axis are merged.
KRK means kept axis - reduced axis - kept axis,

(8, 24, 48, N), axis=(1, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 202-208

.. code-block:: default


    axes = (1, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_003.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (1, 2) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (1, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  4.43it/s]     18%|#8        | 2/11 [00:00<00:02,  3.90it/s]     27%|##7       | 3/11 [00:00<00:02,  3.10it/s]     36%|###6      | 4/11 [00:01<00:03,  2.20it/s]     45%|####5     | 5/11 [00:02<00:03,  1.59it/s]     55%|#####4    | 6/11 [00:03<00:04,  1.21it/s]     64%|######3   | 7/11 [00:05<00:04,  1.11s/it]     73%|#######2  | 8/11 [00:08<00:04,  1.62s/it]     82%|########1 | 9/11 [00:11<00:04,  2.10s/it]     91%|######### | 10/11 [00:13<00:02,  2.16s/it]    100%|##########| 11/11 [00:18<00:00,  2.93s/it]    100%|##########| 11/11 [00:18<00:00,  1.66s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.010758</td>
          <td>0.013052</td>
          <td>0.018693</td>
          <td>0.028497</td>
          <td>0.039579</td>
          <td>0.048083</td>
          <td>0.070338</td>
          <td>0.087504</td>
          <td>0.131814</td>
          <td>0.066467</td>
          <td>0.129700</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000946</td>
          <td>0.001305</td>
          <td>0.002121</td>
          <td>0.003886</td>
          <td>0.005930</td>
          <td>0.008872</td>
          <td>0.010261</td>
          <td>0.036006</td>
          <td>0.019190</td>
          <td>0.034231</td>
          <td>0.074170</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.003954</td>
          <td>0.003258</td>
          <td>0.005733</td>
          <td>0.007919</td>
          <td>0.009560</td>
          <td>0.014367</td>
          <td>0.013547</td>
          <td>0.047281</td>
          <td>0.021029</td>
          <td>0.049540</td>
          <td>0.101017</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.003915</td>
          <td>0.004483</td>
          <td>0.002857</td>
          <td>0.004903</td>
          <td>0.008057</td>
          <td>0.009546</td>
          <td>0.014426</td>
          <td>0.021014</td>
          <td>0.023331</td>
          <td>0.015722</td>
          <td>0.038925</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 209-211

(8, 24 * 48, N), axis=1
^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 211-217

.. code-block:: default


    axes = (1, )
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24 * 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_004.png
   :alt: ReduceMax benchmark '(8, 1152, N)' - (1,) lower better, ReduceMax Speedup, baseline=numpy '(8, 1152, N)' - (1,) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  4.42it/s]     18%|#8        | 2/11 [00:00<00:02,  3.87it/s]     27%|##7       | 3/11 [00:00<00:02,  3.01it/s]     36%|###6      | 4/11 [00:01<00:03,  2.11it/s]     45%|####5     | 5/11 [00:02<00:03,  1.54it/s]     55%|#####4    | 6/11 [00:04<00:04,  1.05it/s]     64%|######3   | 7/11 [00:05<00:04,  1.21s/it]     73%|#######2  | 8/11 [00:10<00:06,  2.18s/it]     82%|########1 | 9/11 [00:13<00:05,  2.53s/it]     91%|######### | 10/11 [00:17<00:02,  2.88s/it]    100%|##########| 11/11 [00:24<00:00,  4.28s/it]    100%|##########| 11/11 [00:24<00:00,  2.23s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.010807</td>
          <td>0.013089</td>
          <td>0.018638</td>
          <td>0.028460</td>
          <td>0.039582</td>
          <td>0.048094</td>
          <td>0.070470</td>
          <td>0.087646</td>
          <td>0.131969</td>
          <td>0.066463</td>
          <td>0.129547</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000934</td>
          <td>0.001292</td>
          <td>0.003935</td>
          <td>0.005536</td>
          <td>0.008014</td>
          <td>0.008793</td>
          <td>0.010223</td>
          <td>0.035759</td>
          <td>0.019418</td>
          <td>0.034532</td>
          <td>0.074886</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002467</td>
          <td>0.003227</td>
          <td>0.005510</td>
          <td>0.007887</td>
          <td>0.009512</td>
          <td>0.014547</td>
          <td>0.013371</td>
          <td>0.046165</td>
          <td>0.020585</td>
          <td>0.049828</td>
          <td>0.101591</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.005383</td>
          <td>0.004780</td>
          <td>0.003221</td>
          <td>0.006804</td>
          <td>0.008095</td>
          <td>0.044086</td>
          <td>0.018357</td>
          <td>0.177472</td>
          <td>0.035725</td>
          <td>0.154533</td>
          <td>0.315962</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 218-220

(2, 8, 12, 24, 2, N), axis=(2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 220-226

.. code-block:: default


    axes = (2, 3)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (2, 8, 12, 24, 2, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_005.png
   :alt: ReduceMax benchmark '(2, 8, 12, 24, 2, N)' - (2, 3) lower better, ReduceMax Speedup, baseline=numpy '(2, 8, 12, 24, 2, N)' - (2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:01,  5.37it/s]     18%|#8        | 2/11 [00:00<00:02,  4.45it/s]     27%|##7       | 3/11 [00:00<00:02,  3.39it/s]     36%|###6      | 4/11 [00:01<00:02,  2.33it/s]     45%|####5     | 5/11 [00:02<00:03,  1.64it/s]     55%|#####4    | 6/11 [00:03<00:03,  1.26it/s]     64%|######3   | 7/11 [00:05<00:04,  1.10s/it]     73%|#######2  | 8/11 [00:07<00:04,  1.49s/it]     82%|########1 | 9/11 [00:10<00:04,  2.08s/it]     91%|######### | 10/11 [00:13<00:02,  2.13s/it]    100%|##########| 11/11 [00:17<00:00,  2.87s/it]    100%|##########| 11/11 [00:17<00:00,  1.61s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.007107</td>
          <td>0.010070</td>
          <td>0.015890</td>
          <td>0.026271</td>
          <td>0.038115</td>
          <td>0.047207</td>
          <td>0.070765</td>
          <td>0.089038</td>
          <td>0.136174</td>
          <td>0.069420</td>
          <td>0.137598</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.000898</td>
          <td>0.001371</td>
          <td>0.002297</td>
          <td>0.003631</td>
          <td>0.005405</td>
          <td>0.008643</td>
          <td>0.011630</td>
          <td>0.018377</td>
          <td>0.029234</td>
          <td>0.030964</td>
          <td>0.061880</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.002703</td>
          <td>0.003474</td>
          <td>0.005408</td>
          <td>0.007049</td>
          <td>0.008417</td>
          <td>0.009500</td>
          <td>0.012181</td>
          <td>0.024409</td>
          <td>0.021891</td>
          <td>0.041716</td>
          <td>0.094021</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.003310</td>
          <td>0.004431</td>
          <td>0.003609</td>
          <td>0.006184</td>
          <td>0.009320</td>
          <td>0.011017</td>
          <td>0.016033</td>
          <td>0.023458</td>
          <td>0.028854</td>
          <td>0.018412</td>
          <td>0.036110</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 227-232

Reduction on a particular case RKR
++++++++++++++++++++++++++++++++++

(N, 64, 16, 16), axis=(0, 2, 3)
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 232-239

.. code-block:: default


    axes = (0, 2, 3)
    df, piv, ax = benchmark_op(
        axes, shape_fct=lambda dim: (dim, 64, 16, 16))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_006.png
   :alt: ReduceMax benchmark '(N, 64, 16, 16)' - (0, 2, 3) lower better, ReduceMax Speedup, baseline=numpy '(N, 64, 16, 16)' - (0, 2, 3) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:01,  5.37it/s]     18%|#8        | 2/11 [00:00<00:02,  3.97it/s]     27%|##7       | 3/11 [00:01<00:03,  2.53it/s]     36%|###6      | 4/11 [00:02<00:04,  1.50it/s]     45%|####5     | 5/11 [00:04<00:06,  1.12s/it]     55%|#####4    | 6/11 [00:06<00:08,  1.66s/it]     64%|######3   | 7/11 [00:12<00:12,  3.01s/it]     73%|#######2  | 8/11 [00:20<00:13,  4.52s/it]     82%|########1 | 9/11 [00:32<00:13,  6.94s/it]     91%|######### | 10/11 [00:38<00:06,  6.76s/it]    100%|##########| 11/11 [00:51<00:00,  8.49s/it]    100%|##########| 11/11 [00:51<00:00,  4.67s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.002479</td>
          <td>0.004880</td>
          <td>0.008246</td>
          <td>0.014770</td>
          <td>0.022069</td>
          <td>0.027942</td>
          <td>0.042526</td>
          <td>0.054110</td>
          <td>0.083680</td>
          <td>0.042530</td>
          <td>0.082087</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001771</td>
          <td>0.002947</td>
          <td>0.005745</td>
          <td>0.011100</td>
          <td>0.016558</td>
          <td>0.023961</td>
          <td>0.032817</td>
          <td>0.041835</td>
          <td>0.064892</td>
          <td>0.032860</td>
          <td>0.065955</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.007030</td>
          <td>0.009270</td>
          <td>0.019002</td>
          <td>0.036666</td>
          <td>0.083939</td>
          <td>0.130679</td>
          <td>0.364302</td>
          <td>0.498346</td>
          <td>0.783284</td>
          <td>0.409034</td>
          <td>0.787235</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.002226</td>
          <td>0.003188</td>
          <td>0.005469</td>
          <td>0.010096</td>
          <td>0.014725</td>
          <td>0.019347</td>
          <td>0.031096</td>
          <td>0.042985</td>
          <td>0.077728</td>
          <td>0.041028</td>
          <td>0.082308</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 240-245

Reduction on a particular case RKRK
+++++++++++++++++++++++++++++++++++

(8, 24, 48, N), axis=(0, 2)
^^^^^^^^^^^^^^^^^^^^^^^^^^^

.. GENERATED FROM PYTHON SOURCE LINES 245-251

.. code-block:: default


    axes = (0, 2)
    df, piv, ax = benchmark_op(axes, shape_fct=lambda dim: (8, 24, 48, dim))
    dfs.append(df)
    df.pivot("fct", "N", "average")




.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_007.png
   :alt: ReduceMax benchmark '(8, 24, 48, N)' - (0, 2) lower better, ReduceMax Speedup, baseline=numpy '(8, 24, 48, N)' - (0, 2) higher better
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/11 [00:00<?, ?it/s]      9%|9         | 1/11 [00:00<00:02,  3.40it/s]     18%|#8        | 2/11 [00:00<00:02,  3.27it/s]     27%|##7       | 3/11 [00:01<00:03,  2.57it/s]     36%|###6      | 4/11 [00:01<00:03,  1.77it/s]     45%|####5     | 5/11 [00:03<00:04,  1.29it/s]     55%|#####4    | 6/11 [00:04<00:05,  1.02s/it]     64%|######3   | 7/11 [00:06<00:05,  1.40s/it]     73%|#######2  | 8/11 [00:09<00:05,  1.95s/it]     82%|########1 | 9/11 [00:14<00:05,  2.63s/it]     91%|######### | 10/11 [00:17<00:02,  2.79s/it]    100%|##########| 11/11 [00:25<00:00,  4.42s/it]    100%|##########| 11/11 [00:25<00:00,  2.30s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>N</th>
          <th>8</th>
          <th>16</th>
          <th>32</th>
          <th>64</th>
          <th>100</th>
          <th>128</th>
          <th>200</th>
          <th>256</th>
          <th>400</th>
          <th>512</th>
          <th>1024</th>
        </tr>
        <tr>
          <th>fct</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>numpy</th>
          <td>0.010191</td>
          <td>0.012842</td>
          <td>0.018573</td>
          <td>0.028897</td>
          <td>0.040335</td>
          <td>0.049160</td>
          <td>0.073196</td>
          <td>0.090809</td>
          <td>0.137800</td>
          <td>0.069174</td>
          <td>0.135510</td>
        </tr>
        <tr>
          <th>ort</th>
          <td>0.001576</td>
          <td>0.002688</td>
          <td>0.005241</td>
          <td>0.011859</td>
          <td>0.014036</td>
          <td>0.021455</td>
          <td>0.036253</td>
          <td>0.051605</td>
          <td>0.071618</td>
          <td>0.100851</td>
          <td>0.363798</td>
        </tr>
        <tr>
          <th>tf</th>
          <td>0.013031</td>
          <td>0.008203</td>
          <td>0.011357</td>
          <td>0.016787</td>
          <td>0.021501</td>
          <td>0.028549</td>
          <td>0.033811</td>
          <td>0.071167</td>
          <td>0.056722</td>
          <td>0.067850</td>
          <td>0.147550</td>
        </tr>
        <tr>
          <th>torch</th>
          <td>0.001562</td>
          <td>0.001956</td>
          <td>0.002912</td>
          <td>0.005251</td>
          <td>0.008432</td>
          <td>0.010591</td>
          <td>0.013565</td>
          <td>0.020874</td>
          <td>0.023943</td>
          <td>0.016619</td>
          <td>0.039305</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 252-258

Conclusion
++++++++++

Some of the configurations should be investigated.
:ref:`l-reducesum-problem1`. The reduction on tensorflow
in one dimension seems to be lazy.

.. GENERATED FROM PYTHON SOURCE LINES 258-266

.. code-block:: default


    merged = pandas.concat(dfs)
    name = "reducemax"
    merged.to_csv("plot_%s.csv" % name, index=False)
    merged.to_excel("plot_%s.xlsx" % name, index=False)
    plt.savefig("plot_%s.png" % name)

    plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_op_reducemax_008.png
   :alt: plot op reducemax
   :srcset: /gyexamples/images/sphx_glr_plot_op_reducemax_008.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  11.161 seconds)


.. _sphx_glr_download_gyexamples_plot_op_reducemax.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_op_reducemax.py <plot_op_reducemax.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_op_reducemax.ipynb <plot_op_reducemax.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
