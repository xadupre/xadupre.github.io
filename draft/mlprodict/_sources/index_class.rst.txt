
.. _l-classes:

Classes
=======

.. contents::
    :local:
    :depth: 1


Summary
+++++++

+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| class                                                                                                                                               | class parent | truncated documentation                                                                                                                                                                                                                               |
+=====================================================================================================================================================+==============+=======================================================================================================================================================================================================================================================+
| :class:`Abs <mlprodict.onnxrt.ops_cpu.op_abs.Abs>`                                                                                                  |              | Abs === Absolute takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the absolute is, y = ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Acos <mlprodict.onnxrt.ops_cpu.op_acos.Acos>`                                                                                               |              | Acos ==== Calculates the arccosine (inverse of cosine) of the given input tensor, element-wise. **Inputs**                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Acosh <mlprodict.onnxrt.ops_cpu.op_acosh.Acosh>`                                                                                            |              | Acosh ===== Calculates the hyperbolic arccosine of the given input tensor element-wise. **Inputs**                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Add <mlprodict.onnxrt.ops_cpu.op_add.Add>`                                                                                                  |              | Add === Performs element-wise binary addition (with Numpy-style broadcasting support). This operator supports **multidirectional ...                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`AdjacencyGraphDisplay <mlprodict.tools.graphs.AdjacencyGraphDisplay>`                                                                       |              | Structure which contains the necessary information to display a graph using an adjacency matrix.                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`And <mlprodict.onnxrt.ops_cpu.op_and.And>`                                                                                                  |              | And === Returns the tensor resulted from performing the `and` logical operation elementwise on the input tensors `A` and ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArgMax_11 <mlprodict.onnxrt.ops_cpu.op_argmax.ArgMax_11>`                                                                                   |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArgMax_12 <mlprodict.onnxrt.ops_cpu.op_argmax.ArgMax_12>`                                                                                   |              | ArgMax ====== Computes the indices of the max elements of the input tensor's element along the provided axis. The resulting ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArgMax_12 <mlprodict.onnxrt.ops_cpu.op_argmax.ArgMax_12>`                                                                                   |              | ArgMax ====== Computes the indices of the max elements of the input tensor's element along the provided axis. The resulting ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArgMin_11 <mlprodict.onnxrt.ops_cpu.op_argmin.ArgMin_11>`                                                                                   |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArgMin_12 <mlprodict.onnxrt.ops_cpu.op_argmin.ArgMin_12>`                                                                                   |              | ArgMin ====== Computes the indices of the min elements of the input tensor's element along the provided axis. The resulting ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArgMin_12 <mlprodict.onnxrt.ops_cpu.op_argmin.ArgMin_12>`                                                                                   |              | ArgMin ====== Computes the indices of the min elements of the input tensor's element along the provided axis. The resulting ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArrayFeatureExtractor <mlprodict.onnxrt.ops_cpu.op_array_feature_extractor.ArrayFeatureExtractor>`                                          |              | ArrayFeatureExtractor (ai.onnx.ml) ================================== Select elements of the input tensor based on the ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ArrayZipMapDictionary <mlprodict.onnxrt.ops_cpu.op_zipmap.ArrayZipMapDictionary>`                                                           |              | Mocks an array without changing the data it receives. Notebooks :ref:`onnxnodetimerst` illustrates the weaknesses ...                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Asin <mlprodict.onnxrt.ops_cpu.op_asin.Asin>`                                                                                               |              | Asin ==== Calculates the arcsine (inverse of sine) of the given input tensor, element-wise. **Inputs**                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Asinh <mlprodict.onnxrt.ops_cpu.op_asinh.Asinh>`                                                                                            |              | Asinh ===== Calculates the hyperbolic arcsine of the given input tensor element-wise. **Inputs**                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Atan <mlprodict.onnxrt.ops_cpu.op_atan.Atan>`                                                                                               |              | Atan ==== Calculates the arctangent (inverse of tangent) of the given input tensor, element-wise. **Inputs**                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Atanh <mlprodict.onnxrt.ops_cpu.op_atanh.Atanh>`                                                                                            |              | Atanh ===== Calculates the hyperbolic arctangent of the given input tensor element-wise. **Inputs**                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`AttributeGraph <mlprodict.npy.numpy_onnx_impl_body.AttributeGraph>`                                                                         |              | Class wrapping a function to make it simple as a parameter.                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`AutoAction <mlprodict.grammar.grammar_sklearn.grammar.api_extension.AutoAction>`                                                            |              | Extends the API to automatically look for exporters.                                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`AutoType <mlprodict.grammar.grammar_sklearn.grammar.api_extension.AutoType>`                                                                |              | Extends the API to automatically look for exporters.                                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`AveragePool <mlprodict.onnxrt.ops_cpu.op_average_pool.AveragePool>`                                                                         |              | AveragePool =========== AveragePool consumes an input tensor X and applies average pooling across the tensor according ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BaseDimensionShape <mlprodict.onnxrt.shape_object.BaseDimensionShape>`                                                                      |              | Base class to :class:`DimensionObject`, :class:`ShapeOperator`, :class:`ShapeObject`.                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BatchNormalization_14 <mlprodict.onnxrt.ops_cpu.op_batch_normalization.BatchNormalization_14>`                                              |              | BatchNormalization ================== Carries out batch normalization as described in the paper https://arxiv.org/abs/1502.03167. ...                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BatchNormalization_14 <mlprodict.onnxrt.ops_cpu.op_batch_normalization.BatchNormalization_14>`                                              |              | BatchNormalization ================== Carries out batch normalization as described in the paper https://arxiv.org/abs/1502.03167. ...                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BatchNormalization_9 <mlprodict.onnxrt.ops_cpu.op_batch_normalization.BatchNormalization_9>`                                                |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Bernoulli <mlprodict.onnxrt.ops_cpu.op_random.Bernoulli>`                                                                                   |              | Bernoulli ========= Draws binary random numbers (0 or 1) from a Bernoulli distribution. The input tensor should be a tensor ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BiGraph <mlprodict.tools.graphs.BiGraph>`                                                                                                   |              | BiGraph representation.                                                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Binarizer <mlprodict.onnxrt.ops_cpu.op_binarizer.Binarizer>`                                                                                |              | Binarizer (ai.onnx.ml) ====================== Maps the values of the input tensor to either 0 or 1, element-wise, based ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BitShift <mlprodict.onnxrt.ops_cpu.op_bitshift.BitShift>`                                                                                   |              | BitShift ======== Bitwise shift operator performs element-wise operation. For each input element, if the attribute "direction" ...                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BroadcastGradientArgs <mlprodict.onnxrt.ops_cpu.op_broadcast_gradient_args.BroadcastGradientArgs>`                                          |              | BroadcastGradientArgs (mlprodict) ================================= **Version** *Onnx name:* `BroadcastGradientArgs <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.BroadcastGradientArgs>`_ ...                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`BroadcastGradientArgsSchema <mlprodict.onnxrt.ops_cpu.op_broadcast_gradient_args.BroadcastGradientArgsSchema>`                              |              | Defines a schema for operators added in this package such as :class:`BroadcastGradientArgs`.                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CDist <mlprodict.onnxrt.ops_cpu.op_cdist.CDist>`                                                                                            |              | CDist (mlprodict) ================= **Version** *Onnx name:* `CDist <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.CDist>`_ ...                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CDistSchema <mlprodict.onnxrt.ops_cpu.op_cdist.CDistSchema>`                                                                                |              | Defines a schema for operators added in this package such as :class:`TreeEnsembleClassifierDouble`.                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CachedEinsum <mlprodict.testing.einsum.einsum_fct.CachedEinsum>`                                                                            |              | Stores all the necessary information to cache the preprocessing of a an einsum equation.                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Cast <mlprodict.onnxrt.ops_cpu.op_cast.Cast>`                                                                                               |              | Cast ==== The operator casts the elements of a given input tensor to a data type specified by the 'to' argument and returns ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CastLike <mlprodict.onnxrt.ops_cpu.op_cast.CastLike>`                                                                                       |              | CastLike ======== The operator casts the elements of a given input tensor (the first input) to the same data type as the ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CategoryMapper <mlprodict.onnxrt.ops_cpu.op_category_mapper.CategoryMapper>`                                                                |              | CategoryMapper (ai.onnx.ml) =========================== Converts strings to integers and vice versa. Two sequences of ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Ceil <mlprodict.onnxrt.ops_cpu.op_ceil.Ceil>`                                                                                               |              | Ceil ==== Ceil takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the ceil is, y = ceil(x), ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Celu <mlprodict.onnxrt.ops_cpu.op_celu.Celu>`                                                                                               |              | Celu ==== Continuously Differentiable Exponential Linear Units: Perform the linear unit element-wise on the input tensor ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Clip_11 <mlprodict.onnxrt.ops_cpu.op_clip.Clip_11>`                                                                                         |              | Clip ==== Clip operator limits the given input within an interval. The interval is specified by the inputs 'min' and 'max'. ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Clip_11 <mlprodict.onnxrt.ops_cpu.op_clip.Clip_11>`                                                                                         |              | Clip ==== Clip operator limits the given input within an interval. The interval is specified by the inputs 'min' and 'max'. ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Clip_6 <mlprodict.onnxrt.ops_cpu.op_clip.Clip_6>`                                                                                           |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CodeNodeVisitor <mlprodict.onnx_tools.onnx_grammar.node_visitor_translator.CodeNodeVisitor>`                                                |              | Defines a visitor which walks though the syntax tree of the code.                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CodeNodeVisitor <mlprodict.testing.verify_code.CodeNodeVisitor>`                                                                            |              | Visits the code, implements verification rules.                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CodeTranslator <mlprodict.onnx_tools.onnx_grammar.onnx_translator.CodeTranslator>`                                                          |              | Class which converts a Python function into something else. It must implements methods *visit* and *depart*.                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CommonExpand <mlprodict.onnxrt.ops_cpu.op_expand.CommonExpand>`                                                                             |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CommonRNN <mlprodict.onnxrt.ops_cpu.op_rnn.CommonRNN>`                                                                                      |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CommonReshape <mlprodict.onnxrt.ops_cpu.op_reshape.CommonReshape>`                                                                          |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CommonSplit <mlprodict.onnxrt.ops_cpu.op_split.CommonSplit>`                                                                                |              | Runtime for operator *Split*.                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CompilationError <mlprodict.grammar.cc.c_compilation.CompilationError>`                                                                     |              | Raised when a compilation error was detected.                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ComplexAbs <mlprodict.onnxrt.ops_cpu.op_complex_abs.ComplexAbs>`                                                                            |              | ComplexAbs (mlprodict) ====================== **Version** *Onnx name:* `ComplexAbs <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.ComplexAbs>`_ ...                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ComplexAbsSchema <mlprodict.onnxrt.ops_cpu.op_complex_abs.ComplexAbsSchema>`                                                                |              | Defines a schema for operators added in this package such as :class:`ComplexAbs`.                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Compress <mlprodict.onnxrt.ops_cpu.op_compress.Compress>`                                                                                   |              | Compress ======== Selects slices from an input tensor along a given axis where condition evaluates to True for each axis ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Concat <mlprodict.onnxrt.ops_cpu.op_concat.Concat>`                                                                                         |              | Concat ====== Concatenate a list of tensors into a single tensor. All input tensors must have the same shape, except for ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ConcatFromSequence <mlprodict.onnxrt.ops_cpu.op_concat_from_sequence.ConcatFromSequence>`                                                   |              | ConcatFromSequence ================== Concatenate a sequence of tensors into a single tensor. All input tensors must have ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ConstantOfShape <mlprodict.onnxrt.ops_cpu.op_constant_of_shape.ConstantOfShape>`                                                            |              | ConstantOfShape =============== Generate a tensor with given value and shape. **Attributes**                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Constant_11 <mlprodict.onnxrt.ops_cpu.op_constant.Constant_11>`                                                                             |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Constant_12 <mlprodict.onnxrt.ops_cpu.op_constant.Constant_12>`                                                                             |              | Constant ======== This operator produces a constant tensor. Exactly one of the provided attributes, either value, sparse_value, ...                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Constant_12 <mlprodict.onnxrt.ops_cpu.op_constant.Constant_12>`                                                                             |              | Constant ======== This operator produces a constant tensor. Exactly one of the provided attributes, either value, sparse_value, ...                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Constant_9 <mlprodict.onnxrt.ops_cpu.op_constant.Constant_9>`                                                                               |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Conv <mlprodict.onnxrt.ops_cpu.op_conv.Conv>`                                                                                               |              | Conv ==== The convolution operator consumes an input tensor and a filter, and computes the output. **Attributes**                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ConvDouble <mlprodict.onnxrt.ops_cpu.op_conv_.ConvDouble>`                                                                                  |              | Implements float runtime for operator Conv. The code is inspired from `conv.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/conv.cc>`_ ...                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ConvFloat <mlprodict.onnxrt.ops_cpu.op_conv_.ConvFloat>`                                                                                    |              | Implements float runtime for operator Conv. The code is inspired from `conv.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/conv.cc>`_ ...                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ConvTranspose <mlprodict.onnxrt.ops_cpu.op_conv_transpose.ConvTranspose>`                                                                   |              | ConvTranspose ============= The convolution transpose operator consumes an input tensor and a filter, and computes the ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ConvTransposeDouble <mlprodict.onnxrt.ops_cpu.op_conv_transpose_.ConvTransposeDouble>`                                                      |              | Implements float runtime for operator Conv. The code is inspired from `conv_transpose.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/conv_transpose.cc>`_ ...                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ConvTransposeFloat <mlprodict.onnxrt.ops_cpu.op_conv_transpose_.ConvTransposeFloat>`                                                        |              | Implements float runtime for operator Conv. The code is inspired from `conv_transpose.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/conv_transpose.cc>`_ ...                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Cos <mlprodict.onnxrt.ops_cpu.op_cos.Cos>`                                                                                                  |              | Cos === Calculates the cosine of the given input tensor, element-wise. **Inputs**                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Cosh <mlprodict.onnxrt.ops_cpu.op_cosh.Cosh>`                                                                                               |              | Cosh ==== Calculates the hyperbolic cosine of the given input tensor element-wise. **Inputs**                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CumSum <mlprodict.onnxrt.ops_cpu.op_cum_sum.CumSum>`                                                                                        |              | CumSum ====== Performs cumulative sum of the input elements along the given axis. By default, it will do the sum inclusively ...                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`CustomScorerTransform <mlprodict.onnx_conv.scorers.register.CustomScorerTransform>`                                                         |              | Wraps a scoring function into a transformer. Function @see fn register_scorers must be called to register the converter ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DEBUG <mlprodict.onnxrt.ops_cpu.op_debug.DEBUG>`                                                                                            |              | DEBUG (mlprodict) ================= **Version** *Onnx name:* `DEBUG <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.DEBUG>`_ ...                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DEBUGSchema <mlprodict.onnxrt.ops_cpu.op_debug.DEBUGSchema>`                                                                                |              | Defines a schema for operators added in this package such as :class:`Solve`.                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DefaultNone <mlprodict.onnxrt.ops_cpu._op.DefaultNone>`                                                                                     |              | Default value for parameters when the parameter is not set but the operator has a default behaviour for it.                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DequantizeLinear <mlprodict.onnxrt.ops_cpu.op_dequantize_linear.DequantizeLinear>`                                                          |              | DequantizeLinear ================ The linear dequantization operator. It consumes a quantized tensor, a scale, and a zero ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Det <mlprodict.onnxrt.ops_cpu.op_det.Det>`                                                                                                  |              | Det === Det calculates determinant of a square matrix or batches of square matrices. Det takes one input tensor of shape ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DetectedVariable <mlprodict.npy.xop_variable.DetectedVariable>`                                                                             |              | Wrapper around a :class:`Variable` to detect inputs and outputs of a graph.                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DictVectorizer <mlprodict.onnxrt.ops_cpu.op_dict_vectorizer.DictVectorizer>`                                                                |              | DictVectorizer (ai.onnx.ml) =========================== Uses an index mapping to convert a dictionary to an array. Given ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DimensionObject <mlprodict.onnxrt.shape_object.DimensionObject>`                                                                            |              | One dimension of a shape.                                                                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Div <mlprodict.onnxrt.ops_cpu.op_div.Div>`                                                                                                  |              | Div === Performs element-wise binary division (with Numpy-style broadcasting support). This operator supports **multidirectional ...                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`DropoutBase <mlprodict.onnxrt.ops_cpu.op_dropout.DropoutBase>`                                                                              |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Dropout_12 <mlprodict.onnxrt.ops_cpu.op_dropout.Dropout_12>`                                                                                |              | Dropout ======= Dropout takes an input floating-point tensor, an optional input ratio (floating-point scalar) and an optional ...                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Dropout_12 <mlprodict.onnxrt.ops_cpu.op_dropout.Dropout_12>`                                                                                |              | Dropout ======= Dropout takes an input floating-point tensor, an optional input ratio (floating-point scalar) and an optional ...                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Dropout_7 <mlprodict.onnxrt.ops_cpu.op_dropout.Dropout_7>`                                                                                  |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Einsum <mlprodict.onnxrt.ops_cpu.op_einsum.Einsum>`                                                                                         |              | Einsum ====== An einsum of the form ``term1, term2 -> output-term`` produces an output tensor using the following equation ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`EinsumSubOp <mlprodict.testing.einsum.einsum_impl_classes.EinsumSubOp>`                                                                     |              | Defines a sub operation used in Einsum decomposition.                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Elu <mlprodict.onnxrt.ops_cpu.op_elu.Elu>`                                                                                                  |              | Elu === Elu takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x < 0`, ...                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Equal <mlprodict.onnxrt.ops_cpu.op_equal.Equal>`                                                                                            |              | Equal ===== Returns the tensor resulted from performing the `equal` logical operation elementwise on the input tensors ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Erf <mlprodict.onnxrt.ops_cpu.op_erf.Erf>`                                                                                                  |              | Erf === Computes the error function of the given input tensor element-wise. **Inputs**                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Exp <mlprodict.onnxrt.ops_cpu.op_exp.Exp>`                                                                                                  |              | Exp === Calculates the exponential of the given input tensor, element-wise. **Inputs**                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Expand_13 <mlprodict.onnxrt.ops_cpu.op_expand.Expand_13>`                                                                                   |              | Expand ====== Broadcast the input tensor following the given shape and the broadcast rule. The broadcast rule is similar ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Expand_13 <mlprodict.onnxrt.ops_cpu.op_expand.Expand_13>`                                                                                   |              | Expand ====== Broadcast the input tensor following the given shape and the broadcast rule. The broadcast rule is similar ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ExpectedAssertionError <mlprodict.testing.test_utils.utils_backend_common.ExpectedAssertionError>`                                          |              | Expected failure.                                                                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`EyeLike <mlprodict.onnxrt.ops_cpu.op_eyelike.EyeLike>`                                                                                      |              | EyeLike ======= Generate a 2D tensor (matrix) with ones on the diagonal and zeros everywhere else. Only 2D tensors are ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FFT <mlprodict.onnxrt.ops_cpu.op_fft.FFT>`                                                                                                  |              | FFT (mlprodict) =============== **Version** *Onnx name:* `FFT <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.FFT>`_ ...                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FFT2D <mlprodict.onnxrt.ops_cpu.op_fft2d.FFT2D>`                                                                                            |              | FFT2D (mlprodict) ================= **Version** *Onnx name:* `FFT2D <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.FFT2D>`_ ...                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FFT2DSchema <mlprodict.onnxrt.ops_cpu.op_fft2d.FFT2DSchema>`                                                                                |              | Defines a schema for operators added in this package such as :class:`FFT`.                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FFTSchema <mlprodict.onnxrt.ops_cpu.op_fft.FFTSchema>`                                                                                      |              | Defines a schema for operators added in this package such as :class:`FFT`.                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FctVersion <mlprodict.npy.onnx_version.FctVersion>`                                                                                         |              | Identifies a version of a function based on its arguments and its parameters.                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FeatureVectorizer <mlprodict.onnxrt.ops_cpu.op_feature_vectorizer.FeatureVectorizer>`                                                       |              | Very similar to :class:`Concat`.                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Flatten <mlprodict.onnxrt.ops_cpu.op_flatten.Flatten>`                                                                                      |              | Flatten ======= Flattens the input tensor into a 2D matrix. If input tensor has shape (d_0, d_1, .                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Float32InfError <mlprodict.grammar.grammar_sklearn.grammar.exc.Float32InfError>`                                                            |              | Raised when a float is out of range and cannot be converted into a float32.                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Floor <mlprodict.onnxrt.ops_cpu.op_floor.Floor>`                                                                                            |              | Floor ===== Floor takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the floor is, y = floor(x), ...                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FusedMatMul <mlprodict.onnxrt.ops_cpu.op_fused_matmul.FusedMatMul>`                                                                         |              | FusedMatMul (mlprodict) ======================= **Version** *Onnx name:* `FusedMatMul <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.FusedMatMul>`_ ...                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`FusedMatMulSchema <mlprodict.onnxrt.ops_cpu.op_fused_matmul.FusedMatMulSchema>`                                                             |              | Defines a schema for operators added in this package such as :class:`FusedMatMul`.                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GPT2TokenizerTransformer <mlprodict.sklapi.onnx_tokenizer.GPT2TokenizerTransformer>`                                                        |              | Wraps `GPT2Tokenizer <https://github.com/microsoft/onnxruntime-extensions/blob/ main/docs/custom_text_ops.md#gpt2tokenizer>`_ ...                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Gather <mlprodict.onnxrt.ops_cpu.op_gather.Gather>`                                                                                         |              | Gather ====== Given `data` tensor of rank r >= 1, and `indices` tensor of rank q, gather entries of the axis dimension ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GatherDouble <mlprodict.onnxrt.ops_cpu.op_gather_.GatherDouble>`                                                                            |              | Implements runtime for operator Gather. The code is inspired from `tfidfvectorizer.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/tensor/gather.cc>`_ ...                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GatherElements <mlprodict.onnxrt.ops_cpu.op_gather_elements.GatherElements>`                                                                |              | GatherElements ============== GatherElements takes two inputs `data` and `indices` of the same rank r >= 1 and an optional ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GatherFloat <mlprodict.onnxrt.ops_cpu.op_gather_.GatherFloat>`                                                                              |              | Implements runtime for operator Gather. The code is inspired from `tfidfvectorizer.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/tensor/gather.cc>`_ ...                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GatherInt64 <mlprodict.onnxrt.ops_cpu.op_gather_.GatherInt64>`                                                                              |              | Implements runtime for operator Gather. The code is inspired from `tfidfvectorizer.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/tensor/gather.cc>`_ ...                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Gemm <mlprodict.onnxrt.ops_cpu.op_gemm.Gemm>`                                                                                               |              | Gemm ==== General Matrix multiplication: https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3 A' = transpose(A) ...                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GlobalAveragePool <mlprodict.onnxrt.ops_cpu.op_global_average_pool.GlobalAveragePool>`                                                      |              | GlobalAveragePool ================= GlobalAveragePool consumes an input tensor X and applies average pooling across the ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GraphBuilder <mlprodict.onnx_tools.exports.tf2onnx_helper.GraphBuilder>`                                                                    |              | Helpers to build graph.                                                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GraphEinsumSubOp <mlprodict.testing.einsum.einsum_impl_classes.GraphEinsumSubOp>`                                                           |              | Class gathering all nodes produced to explicit einsum operators.                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Greater <mlprodict.onnxrt.ops_cpu.op_greater.Greater>`                                                                                      |              | Greater ======= Returns the tensor resulted from performing the `greater` logical operation elementwise on the input tensors ...                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`GreaterOrEqual <mlprodict.onnxrt.ops_cpu.op_greater.GreaterOrEqual>`                                                                        |              | GreaterOrEqual ============== Returns the tensor resulted from performing the `greater_equal` logical operation elementwise ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`HardSigmoid <mlprodict.onnxrt.ops_cpu.op_hard_sigmoid.HardSigmoid>`                                                                         |              | HardSigmoid =========== HardSigmoid takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Hardmax <mlprodict.onnxrt.ops_cpu.op_hardmax.Hardmax>`                                                                                      |              | Hardmax ======= The operator computes the hardmax values for the given input: Hardmax(element in input, axis) = 1 if ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Identity <mlprodict.onnxrt.ops_cpu.op_identity.Identity>`                                                                                   |              | Identity ======== Identity operator **Inputs**                                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`If <mlprodict.onnxrt.ops_cpu.op_if.If>`                                                                                                     |              | If == If conditional **Attributes**                                                                                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ImperfectPythonCode <mlprodict.testing.verify_code.ImperfectPythonCode>`                                                                    |              | Raised if the code shows errors.                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Imputer <mlprodict.onnxrt.ops_cpu.op_imputer.Imputer>`                                                                                      |              | Imputer (ai.onnx.ml) ==================== Replaces inputs that equal one value with another, leaving all other elements ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`InferenceSession <mlprodict.tools.ort_wrapper.InferenceSession>`                                                                            |              | Wrappers around InferenceSession from :epkg:`onnxruntime`.                                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`InferenceSession2 <mlprodict.testing.test_utils.utils_backend_onnxruntime.InferenceSession2>`                                               |              | Overwrites class *InferenceSession* to capture the standard output and error.                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`InputDetectedVariable <mlprodict.npy.xop_variable.InputDetectedVariable>`                                                                   |              | Instance of :class:`DetectedVariable`. Only for inputs.                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`IsInf <mlprodict.onnxrt.ops_cpu.op_isinf.IsInf>`                                                                                            |              | IsInf ===== Map infinity to true and other values to false. **Attributes**                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`IsNaN <mlprodict.onnxrt.ops_cpu.op_isnan.IsNaN>`                                                                                            |              | IsNaN ===== Returns which elements of the input are NaN. **Inputs**                                                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`LabelEncoder <mlprodict.onnxrt.ops_cpu.op_label_encoder.LabelEncoder>`                                                                      |              | LabelEncoder (ai.onnx.ml) ========================= Maps each element in the input tensor to another value. The mapping ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`LeakyRelu <mlprodict.onnxrt.ops_cpu.op_leaky_relu.LeakyRelu>`                                                                               |              | LeakyRelu ========= LeakyRelu takes input data (Tensor<T>) and an argument alpha, and produces one output data (Tensor<T>) ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Less <mlprodict.onnxrt.ops_cpu.op_less.Less>`                                                                                               |              | Less ==== Returns the tensor resulted from performing the `less` logical operation elementwise on the input tensors `A` ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`LessOrEqual <mlprodict.onnxrt.ops_cpu.op_less.LessOrEqual>`                                                                                 |              | LessOrEqual =========== Returns the tensor resulted from performing the `less_equal` logical operation elementwise on ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`LinearClassifier <mlprodict.onnxrt.ops_cpu.op_linear_classifier.LinearClassifier>`                                                          |              | LinearClassifier (ai.onnx.ml) ============================= Linear classifier **Attributes**                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`LinearRegressor <mlprodict.onnxrt.ops_cpu.op_linear_regressor.LinearRegressor>`                                                             |              | LinearRegressor (ai.onnx.ml) ============================ Generalized linear regression evaluation. If targets is set ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Log <mlprodict.onnxrt.ops_cpu.op_log.Log>`                                                                                                  |              | Log === Calculates the natural log of the given input tensor, element-wise. **Inputs**                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`LogSoftmax <mlprodict.onnxrt.ops_cpu.op_log_softmax.LogSoftmax>`                                                                            |              | LogSoftmax ========== The operator computes the log of softmax values for the given input: LogSoftmax(input, axis) = ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Loop <mlprodict.onnxrt.ops_cpu.op_loop.Loop>`                                                                                               |              | Loop ==== Generic Looping construct. This loop has multiple termination conditions: 1) Trip count. Iteration count specified ...                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`LpNormalization <mlprodict.onnxrt.ops_cpu.op_lp_normalization.LpNormalization>`                                                             |              | LpNormalization =============== Given a matrix, apply Lp-normalization along the provided axis. **Attributes**                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLAction <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLAction>`                                                                     |              | Base class for every action.                                                                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionAdd <mlprodict.grammar.grammar_sklearn.grammar.gactions_num.MLActionAdd>`                                                           |              | Addition                                                                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionBinary <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionBinary>`                                                         |              | Any binary operation.                                                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionCast <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionCast>`                                                             |              | Cast into another type.                                                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionConcat <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionConcat>`                                                         |              | Concatenate number of arrays into an array.                                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionCst <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionCst>`                                                               |              | Constant                                                                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionFunction <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionFunction>`                                                     |              | A function.                                                                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionFunctionCall <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionFunctionCall>`                                             |              | Any function call.                                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionIfElse <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionIfElse>`                                                         |              | Addition                                                                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionReturn <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionReturn>`                                                         |              | Returns a results.                                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionSign <mlprodict.grammar.grammar_sklearn.grammar.gactions_num.MLActionSign>`                                                         |              | Sign of an expression: 1=positive, 0=negative.                                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTensorAdd <mlprodict.grammar.grammar_sklearn.grammar.gactions_tensor.MLActionTensorAdd>`                                            |              | Tensor addition.                                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTensorDiv <mlprodict.grammar.grammar_sklearn.grammar.gactions_tensor.MLActionTensorDiv>`                                            |              | Tensor division.                                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTensorDot <mlprodict.grammar.grammar_sklearn.grammar.gactions_tensor.MLActionTensorDot>`                                            |              | Scalar product.                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTensorMul <mlprodict.grammar.grammar_sklearn.grammar.gactions_tensor.MLActionTensorMul>`                                            |              | Tensor multiplication.                                                                                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTensorSub <mlprodict.grammar.grammar_sklearn.grammar.gactions_tensor.MLActionTensorSub>`                                            |              | Tensor soustraction.                                                                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTensorTake <mlprodict.grammar.grammar_sklearn.grammar.gactions_tensor.MLActionTensorTake>`                                          |              | Extracts an element of the tensor.                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTensorVector <mlprodict.grammar.grammar_sklearn.grammar.gactions_tensor.MLActionTensorVector>`                                      |              | Tensor operation.                                                                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTestEqual <mlprodict.grammar.grammar_sklearn.grammar.gactions_num.MLActionTestEqual>`                                               |              | Operator ``==``.                                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionTestInf <mlprodict.grammar.grammar_sklearn.grammar.gactions_num.MLActionTestInf>`                                                   |              | Operator ``<``.                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionUnary <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionUnary>`                                                           |              | Any binary operation.                                                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLActionVar <mlprodict.grammar.grammar_sklearn.grammar.gactions.MLActionVar>`                                                               |              | Variable. The constant is only needed to guess the variable type.                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLModel <mlprodict.grammar.grammar_sklearn.grammar.gmlactions.MLModel>`                                                                     |              | Base class for every machine learned model                                                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLNumType <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLNumType>`                                                                     |              | Base class for numerical types.                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLNumTypeBool <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLNumTypeBool>`                                                             |              | A numpy.bool.                                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLNumTypeFloat32 <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLNumTypeFloat32>`                                                       |              | A numpy.float32.                                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLNumTypeFloat64 <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLNumTypeFloat64>`                                                       |              | A numpy.float64.                                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLNumTypeInt32 <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLNumTypeInt32>`                                                           |              | A numpy.int32.                                                                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLNumTypeInt64 <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLNumTypeInt64>`                                                           |              | A numpy.int64.                                                                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLNumTypeSingle <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLNumTypeSingle>`                                                         |              | int32 or float32                                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLTensor <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLTensor>`                                                                       |              | Defines a tensor with a dimension and a single type for what it contains.                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MLType <mlprodict.grammar.grammar_sklearn.grammar.gtypes.MLType>`                                                                           |              | Base class for every type.                                                                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MatMul <mlprodict.onnxrt.ops_cpu.op_matmul.MatMul>`                                                                                         |              | MatMul ====== Matrix product that behaves like numpy.matmul: https://docs.scipy.org/doc/numpy-1.13.0/reference/generated/numpy.matmul.html ...                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Max <mlprodict.onnxrt.ops_cpu.op_max.Max>`                                                                                                  |              | Max === Element-wise max of each of the input tensors (with Numpy-style broadcasting support). All inputs and outputs ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MaxPool <mlprodict.onnxrt.ops_cpu.op_max_pool.MaxPool>`                                                                                     |              | MaxPool ======= MaxPool consumes an input tensor X and applies max pooling across the tensor according to kernel sizes, ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MaxPoolDouble <mlprodict.onnxrt.ops_cpu.op_max_pool_.MaxPoolDouble>`                                                                        |              | Implements float runtime for operator Conv. The code is inspired from `pool.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/pool.cc>`_ ...                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MaxPoolFloat <mlprodict.onnxrt.ops_cpu.op_max_pool_.MaxPoolFloat>`                                                                          |              | Implements float runtime for operator Conv. The code is inspired from `pool.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/pool.cc>`_ ...                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Mean <mlprodict.onnxrt.ops_cpu.op_mean.Mean>`                                                                                               |              | Mean ==== Element-wise mean of each of the input tensors (with Numpy-style broadcasting support). All inputs and outputs ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Min <mlprodict.onnxrt.ops_cpu.op_min.Min>`                                                                                                  |              | Min === Element-wise min of each of the input tensors (with Numpy-style broadcasting support). All inputs and outputs ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MissingOperatorError <mlprodict.onnxrt.excs.MissingOperatorError>`                                                                          |              | Missing operator.                                                                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MissingVariableError <mlprodict.testing.script_testing.MissingVariableError>`                                                               |              | Raised when a variable is missing.                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MockVariableName <mlprodict.testing.test_utils.utils_backend_python.MockVariableName>`                                                      |              | A string.                                                                                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MockVariableNameShape <mlprodict.testing.test_utils.utils_backend_python.MockVariableNameShape>`                                            |              | A string and a shape.                                                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MockVariableNameShapeType <mlprodict.testing.test_utils.utils_backend_python.MockVariableNameShapeType>`                                    |              | A string and a shape and a type.                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MockWrappedLightGbmBoosterClassifier <mlprodict.onnx_conv.operator_converters.parse_lightgbm.MockWrappedLightGbmBoosterClassifier>`         |              | Mocked lightgbm.                                                                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Mod <mlprodict.onnxrt.ops_cpu.op_mod.Mod>`                                                                                                  |              | Mod === Performs element-wise binary modulus (with Numpy-style broadcasting support). The sign of the remainder is the ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Mul <mlprodict.onnxrt.ops_cpu.op_mul.Mul>`                                                                                                  |              | Mul === Performs element-wise binary multiplication (with Numpy-style broadcasting support). This operator supports **multidirectional ...                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`MultiOnnxVar <mlprodict.npy.onnx_variable.MultiOnnxVar>`                                                                                    |              | Class used to return multiple :class:`OnnxVar` at the same time.                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NDArray <mlprodict.npy.onnx_numpy_annotation.NDArray>`                                                                                      |              | Used to annotation ONNX numpy functions.                                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NDArraySameType <mlprodict.npy.onnx_numpy_annotation.NDArraySameType>`                                                                      |              | Shortcut to simplify signature description.                                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NDArraySameTypeSameShape <mlprodict.npy.onnx_numpy_annotation.NDArraySameTypeSameShape>`                                                    |              | Shortcut to simplify signature description.                                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NDArrayType <mlprodict.npy.onnx_numpy_annotation.NDArrayType>`                                                                              |              | Shortcut to simplify signature description.                                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NDArrayTypeSameShape <mlprodict.npy.onnx_numpy_annotation.NDArrayTypeSameShape>`                                                            |              | Shortcut to simplify signature description.                                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Neg <mlprodict.onnxrt.ops_cpu.op_neg.Neg>`                                                                                                  |              | Neg === Neg takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where each element flipped sign, ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NegativeLogLikelihoodLoss <mlprodict.onnxrt.ops_cpu.op_negative_log_likelihood_loss.NegativeLogLikelihoodLoss>`                             |              | Python runtime for function *NegativeLogLikelihoodLoss*.                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NewOperatorSchema <mlprodict.onnxrt.doc.doc_helper.NewOperatorSchema>`                                                                      |              | Defines a schema for operators added in this package such as :class:`TreeEnsembleRegressorDouble`.                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NodeResultName <mlprodict.npy.xop_variable.NodeResultName>`                                                                                 |              | Defines a result name for a node.                                                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Normalizer <mlprodict.onnxrt.ops_cpu.op_normalizer.Normalizer>`                                                                             |              | Normalizer (ai.onnx.ml) ======================= Normalize the input. There are three normalization modes, which have ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Not <mlprodict.onnxrt.ops_cpu.op_not.Not>`                                                                                                  |              | Not === Returns the negation of the input tensor element-wise. **Inputs**                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`NumpyCode <mlprodict.onnx_tools.exports.numpy_helper.NumpyCode>`                                                                            |              | Converts an ONNX operators into :epkg:`numpy` code.                                                                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OneHotEncoder <mlprodict.onnxrt.ops_cpu.op_one_hot_encoder.OneHotEncoder>`                                                                  |              | :epkg:`ONNX` specifications does not mention the possibility to change the output type, sparse, dense, float, double. ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxBackendAssertionError <mlprodict.testing.test_utils.utils_backend_common.OnnxBackendAssertionError>`                                    |              | Expected failure.                                                                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxBackendMissingNewOnnxOperatorException <mlprodict.testing.test_utils.utils_backend_common.OnnxBackendMissingNewOnnxOperatorException>`  |              | Raised when :epkg:`onnxruntime` or :epkg:`mlprodict` does not implement a new operator defined in the latest onnx. ...                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxBackendTest <mlprodict.testing.onnx_backend.OnnxBackendTest>`                                                                           |              | Definition of a backend test. It starts with a folder, in this folder, one onnx file must be there, then a subfolder ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxBroadcastGradientArgs_1 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxBroadcastGradientArgs_1>`                                    |              | Defines a custom operator for BroadcastGradientArgs. Returns the reduction axes for computing gradients of s0 op s1 ...                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxBroadcastGradientArgs_1 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxBroadcastGradientArgs_1>`                                    |              | Defines a custom operator for BroadcastGradientArgs. Returns the reduction axes for computing gradients of s0 op s1 ...                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxComplexAbs_1 <mlprodict.onnx_conv.onnx_ops.onnx_complex.OnnxComplexAbs_1>`                                                              |              | Defines a custom operator for ComplexAbs.                                                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxComplexAbs_1 <mlprodict.onnx_conv.onnx_ops.onnx_complex.OnnxComplexAbs_1>`                                                              |              | Defines a custom operator for ComplexAbs.                                                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxFFT2D_1 <mlprodict.onnx_conv.onnx_ops.onnx_fft.OnnxFFT2D_1>`                                                                            |              | Defines a custom operator for FFT2D.                                                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxFFT2D_1 <mlprodict.onnx_conv.onnx_ops.onnx_fft.OnnxFFT2D_1>`                                                                            |              | Defines a custom operator for FFT2D.                                                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxFFT_1 <mlprodict.onnx_conv.onnx_ops.onnx_fft.OnnxFFT_1>`                                                                                |              | Defines a custom operator for FFT.                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxFFT_1 <mlprodict.onnx_conv.onnx_ops.onnx_fft.OnnxFFT_1>`                                                                                |              | Defines a custom operator for FFT.                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxFusedMatMul_1 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxFusedMatMul_1>`                                                        |              | MatMul and Gemm without a C.                                                                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxFusedMatMul_1 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxFusedMatMul_1>`                                                        |              | MatMul and Gemm without a C.                                                                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInference <mlprodict.onnxrt.onnx_inference.OnnxInference>`                                                                              |              | Loads an :epkg:`ONNX` file or object or stream. Computes the output of the :epkg:`ONNX` graph. Several runtimes ...                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInference2 <mlprodict.testing.test_utils.utils_backend_python.OnnxInference2>`                                                          |              | onnxruntime API                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceBackend <mlprodict.onnxrt.backend.OnnxInferenceBackend>`                                                                       |              | ONNX backend following the pattern from `onnx/backend/base.py <https://github.com/onnx/onnx/blob/main/onnx/backend/base.py>`_. ...                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceBackendMicro <mlprodict.onnxrt.backend.OnnxInferenceBackendMicro>`                                                             |              | Same backend as @see cl OnnxInferenceBackend but runtime is @see cl OnnxMicroRuntime.                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceBackendOrt <mlprodict.onnxrt.backend.OnnxInferenceBackendOrt>`                                                                 |              | Same backend as @see cl OnnxInferenceBackend but runtime is `onnxruntime1`.                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceBackendPyC <mlprodict.onnxrt.backend.OnnxInferenceBackendPyC>`                                                                 |              | Same backend as @see cl OnnxInferenceBackend but runtime is `python_compiled`.                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceBackendPyEval <mlprodict.onnxrt.backend.OnnxInferenceBackendPyEval>`                                                           |              | Same backend as @see cl OnnxInferenceBackend but runtime is @see cl OnnxShapeInference.                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceBackendRep <mlprodict.onnxrt.backend.OnnxInferenceBackendRep>`                                                                 |              | Computes the prediction for an ONNX graph loaded with @see cl OnnxInference.                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceBackendShape <mlprodict.onnxrt.backend.OnnxInferenceBackendShape>`                                                             |              | Same backend as @see cl OnnxInferenceBackend but runtime is @see cl OnnxShapeInference.                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceExport <mlprodict.onnxrt.onnx_inference_exports.OnnxInferenceExport>`                                                          |              | Implements methods to export a instance of :class:`OnnxInference` into :epkg:`json`, :epkg:`dot`, *text*, *python*. ...                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxInferenceNode <mlprodict.onnxrt.onnx_inference_node.OnnxInferenceNode>`                                                                 |              | A node to execute.                                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxKind <mlprodict.onnxrt.ops_shape.shape_result.OnnxKind>`                                                                                |              | Describes a result type.                                                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxLoadFactory <mlprodict.npy.xop.OnnxLoadFactory>`                                                                                        |              | Automatically creating all operators from onnx packages takes time. That's why function :class:`loadop` only creates ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxMicroRuntime <mlprodict.onnxrt.onnx_micro_runtime.OnnxMicroRuntime>`                                                                    |              | Implements a micro runtime for ONNX graphs. It does not implements all the operator types.                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxNotebook <mlprodict.nb_helper.OnnxNotebook>`                                                                                            |              | Defines magic commands to help with notebooks                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxNumpyCompiler <mlprodict.npy.onnx_numpy_compiler.OnnxNumpyCompiler>`                                                                    |              | Implements a class which runs onnx graph.                                                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxNumpyFunction <mlprodict.npy.onnx_numpy_compiler.OnnxNumpyFunction>`                                                                    |              | Class wrapping a function build with :class:`OnnxNumpyCompiler`.                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxNumpyFunctionInferenceSession <mlprodict.npy.onnx_numpy_compiler.OnnxNumpyFunctionInferenceSession>`                                    |              | Overwrites :class:`OnnxNumpyFunction` to run an instance of `InferenceSession` from :epkg:`onnxruntime`.                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxNumpyFunctionOnnxInference <mlprodict.npy.onnx_numpy_compiler.OnnxNumpyFunctionOnnxInference>`                                          |              | Overwrites :class:`OnnxNumpyFunction` to run an instance of :class:`OnnxInference`.                                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxOperator <mlprodict.npy.xop.OnnxOperator>`                                                                                              |              | Ancestor to every *ONNX* operator exposed in :mod:`mlprodict.npy.xops` and :mod:`mlprodict.npy.xops_ml`.                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxOperatorBase <mlprodict.npy.xop.OnnxOperatorBase>`                                                                                      |              | Base class for :class:`OnnxOperator`, :class:`OnnxOperator`Item, :class:`OnnxOperatorTuple`.                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxOperatorFunction <mlprodict.npy.xop.OnnxOperatorFunction>`                                                                              |              | This operator is used to insert existing ONNX function into the ONNX graph being built.                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxOperatorItem <mlprodict.npy.xop.OnnxOperatorItem>`                                                                                      |              | Accessor to one of the output returned by a :class:`OnnxOperator`.                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxOperatorTuple <mlprodict.npy.xop.OnnxOperatorTuple>`                                                                                    |              | Class used to return multiple :class:`OnnxVar` at the same time.                                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxPipeline <mlprodict.sklapi.onnx_pipeline.OnnxPipeline>`                                                                                 |              | The pipeline overwrites method *fit*, it trains and converts every steps into ONNX before training the next step ...                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxRFFT_1 <mlprodict.onnx_conv.onnx_ops.onnx_fft.OnnxRFFT_1>`                                                                              |              | Defines a custom operator for FFT.                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxRFFT_1 <mlprodict.onnx_conv.onnx_ops.onnx_fft.OnnxRFFT_1>`                                                                              |              | Defines a custom operator for FFT.                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxRuntimeMissingNewOnnxOperatorException <mlprodict.testing.test_utils.utils_backend_common.OnnxRuntimeMissingNewOnnxOperatorException>`  |              | Raised when a new operator was added but cannot be found.                                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxShapeInference <mlprodict.onnxrt.onnx_shape_inference.OnnxShapeInference>`                                                              |              | Implements a micro runtime for ONNX graphs. It does not implements all the operator types.                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSoftmaxGrad_13 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxSoftmaxGrad_13>`                                                      |              | Gradient of Softmax. SoftmaxGrad computes :math:`Y * ( dY - ReduceSum(Y * dY))`. ONNX does not have a dot product, ...                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSoftmaxGrad_13 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxSoftmaxGrad_13>`                                                      |              | Gradient of Softmax. SoftmaxGrad computes :math:`Y * ( dY - ReduceSum(Y * dY))`. ONNX does not have a dot product, ...                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSpeedupClassifier <mlprodict.sklapi.onnx_speed_up.OnnxSpeedupClassifier>`                                                               |              | Trains with :epkg:`scikit-learn`, transform with :epkg:`ONNX`.                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSpeedupCluster <mlprodict.sklapi.onnx_speed_up.OnnxSpeedupCluster>`                                                                     |              | Trains with :epkg:`scikit-learn`, transform with :epkg:`ONNX`.                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSpeedupRegressor <mlprodict.sklapi.onnx_speed_up.OnnxSpeedupRegressor>`                                                                 |              | Trains with :epkg:`scikit-learn`, transform with :epkg:`ONNX`.                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSpeedupTransformer <mlprodict.sklapi.onnx_speed_up.OnnxSpeedupTransformer>`                                                             |              | Trains with :epkg:`scikit-learn`, transform with :epkg:`ONNX`.                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSubEstimator <mlprodict.npy.xop_convert.OnnxSubEstimator>`                                                                              |              | This operator is used to call the converter of a model to insert the node coming from the conversion into a bigger ...                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxSubOnnx <mlprodict.npy.xop_convert.OnnxSubOnnx>`                                                                                        |              | This operator is used to insert existing ONNX into the ONNX graph being built.                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxTokenizer_1 <mlprodict.onnx_conv.onnx_ops.onnx_tokenizer.OnnxTokenizer_1>`                                                              |              | Defines a custom operator not defined by ONNX specifications but in onnxruntime.                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxTokenizer_1 <mlprodict.onnx_conv.onnx_ops.onnx_tokenizer.OnnxTokenizer_1>`                                                              |              | Defines a custom operator not defined by ONNX specifications but in onnxruntime.                                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxTransformer <mlprodict.sklapi.onnx_transformer.OnnxTransformer>`                                                                        |              | Calls :epkg:`onnxruntime` or the runtime implemented in this package to transform input based on a ONNX graph. It ...                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxTranslator <mlprodict.onnx_tools.onnx_grammar.onnx_translator.OnnxTranslator>`                                                          |              | Class which converts a Python function into an :epkg:`ONNX` function. It must implements methods *visit* and *depart*. ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxVar <mlprodict.npy.onnx_variable.OnnxVar>`                                                                                              |              | Variables used into :epkg:`onnx` computation.                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxVarGraph <mlprodict.npy.numpy_onnx_impl_body.OnnxVarGraph>`                                                                             |              | Overloads :class:`OnnxVar` to handle graph attribute.                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxWholeSession <mlprodict.onnxrt.ops_whole.session.OnnxWholeSession>`                                                                     |              | Runs the prediction for a single :epkg:`ONNX`, it lets the runtime handle the graph logic as well.                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxYieldOp_1 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxYieldOp_1>`                                                                |              | Defines a custom operator for YieldOp.                                                                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OnnxYieldOp_1 <mlprodict.onnx_conv.onnx_ops.onnx_gradient_op.OnnxYieldOp_1>`                                                                |              | Defines a custom operator for YieldOp.                                                                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRun <mlprodict.onnxrt.ops_cpu._op.OpRun>`                                                                                                 |              | Ancestor to all operators in this subfolder. The runtime for every node can checked into `ONNX unit tests <https://github.com/onnx/onnx/tree/master/onnx/backend/test/case/node>`_. ...                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunArg <mlprodict.onnxrt.ops_cpu._op.OpRunArg>`                                                                                           |              | Ancestor to all unary operators in this subfolder and which produces position of extremas (ArgMax, ...). Checks ...                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunBinary <mlprodict.onnxrt.ops_cpu._op.OpRunBinary>`                                                                                     |              | Ancestor to all binary operators in this subfolder. Checks that inputs type are the same.                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunBinaryComparison <mlprodict.onnxrt.ops_cpu._op.OpRunBinaryComparison>`                                                                 |              | Ancestor to all binary operators in this subfolder comparing tensors.                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunBinaryNum <mlprodict.onnxrt.ops_cpu._op.OpRunBinaryNum>`                                                                               |              | Ancestor to all binary operators in this subfolder. Checks that inputs type are the same.                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunBinaryNumpy <mlprodict.onnxrt.ops_cpu._op.OpRunBinaryNumpy>`                                                                           |              | Implements the inplaces logic. *numpy_fct* is a binary numpy function which takes two matrices and has a argument ...                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunClassifierProb <mlprodict.onnxrt.ops_cpu._op.OpRunClassifierProb>`                                                                     |              | Ancestor to all binary operators in this subfolder. Checks that inputs type are the same.                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunCustom <mlprodict.onnxrt.ops_cpu._op.OpRunCustom>`                                                                                     |              | Automates some methods for custom operators defined outside *mlprodict*.                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunOnnxEmpty <mlprodict.onnxrt.ops_empty._op.OpRunOnnxEmpty>`                                                                             |              | Unique operator for an empty runtime.                                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunOnnxRuntime <mlprodict.onnxrt.ops_onnxruntime._op.OpRunOnnxRuntime>`                                                                   |              | Unique operator which calls :epkg:`onnxruntime` to compute predictions for one operator.                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunReduceNumpy <mlprodict.onnxrt.ops_cpu._op.OpRunReduceNumpy>`                                                                           |              | Implements the reduce logic. It must have a parameter *axes*.                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunUnary <mlprodict.onnxrt.ops_cpu._op.OpRunUnary>`                                                                                       |              | Ancestor to all unary operators in this subfolder. Checks that inputs type are the same.                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OpRunUnaryNum <mlprodict.onnxrt.ops_cpu._op.OpRunUnaryNum>`                                                                                 |              | Ancestor to all unary and numerical operators in this subfolder. Checks that inputs type are the same.                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OperatorSchema <mlprodict.onnxrt.ops_cpu._new_ops.OperatorSchema>`                                                                          |              | Defines a schema for operators added in this package such as :class:`TreeEnsembleRegressorDouble`.                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Or <mlprodict.onnxrt.ops_cpu.op_or.Or>`                                                                                                     |              | Or == Returns the tensor resulted from performing the `or` logical operation elementwise on the input tensors `A` and ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`OutputDetectedVariable <mlprodict.npy.xop_variable.OutputDetectedVariable>`                                                                 |              | Instance of :class:`DetectedVariable`. Only for outputs.                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`PRelu <mlprodict.onnxrt.ops_cpu.op_prelu.PRelu>`                                                                                            |              | PRelu ===== PRelu takes input data (Tensor<T>) and slope tensor as input, and produces one output data (Tensor<T>) where ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Pad <mlprodict.onnxrt.ops_cpu.op_pad.Pad>`                                                                                                  |              | Pad === Given a tensor containing the data to be padded (`data`), a tensor containing the number of start and end pad ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Pow <mlprodict.onnxrt.ops_cpu.op_pow.Pow>`                                                                                                  |              | Pow === Pow takes input data (Tensor<T>) and exponent Tensor, and produces one output data (Tensor<T>) where the function ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`QLinearConv <mlprodict.onnxrt.ops_cpu.op_qlinear_conv.QLinearConv>`                                                                         |              | QLinearConv =========== The convolution operator consumes a quantized input tensor, its scale and zero point, a quantized ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`QLinearConvInt8 <mlprodict.onnxrt.ops_cpu.op_qlinear_conv_.QLinearConvInt8>`                                                                |              | Implements int8 runtime for operator QLinearConv. The code is inspired from `qlinearconv.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/qlinearconv.cc>`_ ...                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`QLinearConvUInt8 <mlprodict.onnxrt.ops_cpu.op_qlinear_conv_.QLinearConvUInt8>`                                                              |              | Implements uint8 runtime for operator QLinearConvUInt8. The code is inspired from `qlinearconv.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/qlinearconv.cc>`_ ...                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`QuantizeLinear <mlprodict.onnxrt.ops_cpu.op_quantize_linear.QuantizeLinear>`                                                                |              | QuantizeLinear ============== The linear quantization operator. It consumes a high precision tensor, a scale, and a zero ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`QuantizedBiasTensor <mlprodict.testing.test_utils.quantized_tensor.QuantizedBiasTensor>`                                                    |              | Instantiates a quantized tensor (uint8) with bias from a float tensor.                                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`QuantizedTensor <mlprodict.testing.test_utils.quantized_tensor.QuantizedTensor>`                                                            |              | Instantiates a quantized tensor (uint8) from a float tensor.                                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RFFT <mlprodict.onnxrt.ops_cpu.op_rfft.RFFT>`                                                                                               |              | RFFT (mlprodict) ================ **Version** *Onnx name:* `RFFT <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.RFFT>`_ ...                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RFFTSchema <mlprodict.onnxrt.ops_cpu.op_rfft.RFFTSchema>`                                                                                   |              | Defines a schema for operators added in this package such as :class:`FFT`.                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RNN_14 <mlprodict.onnxrt.ops_cpu.op_rnn.RNN_14>`                                                                                            |              | RNN === Computes an one-layer simple RNN. This operator is usually supported via some custom implementation such as CuDNN. ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RNN_14 <mlprodict.onnxrt.ops_cpu.op_rnn.RNN_14>`                                                                                            |              | RNN === Computes an one-layer simple RNN. This operator is usually supported via some custom implementation such as CuDNN. ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RNN_7 <mlprodict.onnxrt.ops_cpu.op_rnn.RNN_7>`                                                                                              |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RandomNormal <mlprodict.onnxrt.ops_cpu.op_random.RandomNormal>`                                                                             |              | RandomNormal ============ Generate a tensor with random values drawn from a normal distribution. The shape of the tensor ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RandomNormalLike <mlprodict.onnxrt.ops_cpu.op_random.RandomNormalLike>`                                                                     |              | RandomNormalLike ================ Generate a tensor with random values drawn from a normal distribution. The shape of ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RandomUniform <mlprodict.onnxrt.ops_cpu.op_random.RandomUniform>`                                                                           |              | RandomUniform ============= Generate a tensor with random values drawn from a uniform distribution. The shape of the tensor ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RandomUniformLike <mlprodict.onnxrt.ops_cpu.op_random.RandomUniformLike>`                                                                   |              | RandomUniformLike ================= Generate a tensor with random values drawn from a uniform distribution. The shape ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Range <mlprodict.onnxrt.ops_cpu.op_range.Range>`                                                                                            |              | Range ===== Generate a tensor containing a sequence of numbers that begin at `start` and extends by increments of `delta` ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Reciprocal <mlprodict.onnxrt.ops_cpu.op_reciprocal.Reciprocal>`                                                                             |              | Reciprocal ========== Reciprocal takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the reciprocal ...                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceL1 <mlprodict.onnxrt.ops_cpu.op_reduce_l1.ReduceL1>`                                                                                  |              | ReduceL1 ======== Computes the L1 norm of the input tensor's element along the provided axes. The resulted tensor has ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceL2 <mlprodict.onnxrt.ops_cpu.op_reduce_l2.ReduceL2>`                                                                                  |              | ReduceL2 ======== Computes the L2 norm of the input tensor's element along the provided axes. The resulted tensor has ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceLogSum <mlprodict.onnxrt.ops_cpu.op_reduce_log_sum.ReduceLogSum>`                                                                     |              | ReduceLogSum ============ Computes the log sum of the input tensor's element along the provided axes. The resulted tensor ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceLogSumExp <mlprodict.onnxrt.ops_cpu.op_reduce_log_sum_exp.ReduceLogSumExp>`                                                           |              | ReduceLogSumExp =============== Computes the log sum exponent of the input tensor's element along the provided axes. The ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceMax <mlprodict.onnxrt.ops_cpu.op_reduce_max.ReduceMax>`                                                                               |              | ReduceMax ========= Computes the max of the input tensor's element along the provided axes. The resulted tensor has the ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceMean <mlprodict.onnxrt.ops_cpu.op_reduce_mean.ReduceMean>`                                                                            |              | ReduceMean ========== Computes the mean of the input tensor's element along the provided axes. The resulted tensor has ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceMin <mlprodict.onnxrt.ops_cpu.op_reduce_min.ReduceMin>`                                                                               |              | ReduceMin ========= Computes the min of the input tensor's element along the provided axes. The resulted tensor has the ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceProd <mlprodict.onnxrt.ops_cpu.op_reduce_prod.ReduceProd>`                                                                            |              | ReduceProd ========== Computes the product of the input tensor's element along the provided axes. The resulted tensor ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceSumSquare <mlprodict.onnxrt.ops_cpu.op_reduce_sum_square.ReduceSumSquare>`                                                            |              | ReduceSumSquare =============== Computes the sum square of the input tensor's element along the provided axes. The resulted ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceSum_1 <mlprodict.onnxrt.ops_cpu.op_reduce_sum.ReduceSum_1>`                                                                           |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceSum_11 <mlprodict.onnxrt.ops_cpu.op_reduce_sum.ReduceSum_11>`                                                                         |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceSum_13 <mlprodict.onnxrt.ops_cpu.op_reduce_sum.ReduceSum_13>`                                                                         |              | ReduceSum ========= Computes the sum of the input tensor's element along the provided axes. The resulted tensor has the ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ReduceSum_13 <mlprodict.onnxrt.ops_cpu.op_reduce_sum.ReduceSum_13>`                                                                         |              | ReduceSum ========= Computes the sum of the input tensor's element along the provided axes. The resulted tensor has the ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Relu <mlprodict.onnxrt.ops_cpu.op_relu.Relu>`                                                                                               |              | Relu ==== Relu takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the rectified linear function, ...                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Reshape_13 <mlprodict.onnxrt.ops_cpu.op_reshape.Reshape_13>`                                                                                |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Reshape_14 <mlprodict.onnxrt.ops_cpu.op_reshape.Reshape_14>`                                                                                |              | Reshape ======= Reshape the input tensor similar to numpy.reshape. First input is the data tensor, second input is a shape ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Reshape_14 <mlprodict.onnxrt.ops_cpu.op_reshape.Reshape_14>`                                                                                |              | Reshape ======= Reshape the input tensor similar to numpy.reshape. First input is the data tensor, second input is a shape ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Reshape_5 <mlprodict.onnxrt.ops_cpu.op_reshape.Reshape_5>`                                                                                  |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Round <mlprodict.onnxrt.ops_cpu.op_round.Round>`                                                                                            |              | Round ===== Round takes one input Tensor and rounds the values, element-wise, meaning it finds the nearest integer for ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeBadResultsError <mlprodict.onnxrt.validate.validate_helper.RuntimeBadResultsError>`                                                  |              | Raised when the results are too different from :epkg:`scikit-learn`.                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeSVMClassifierDouble <mlprodict.onnxrt.ops_cpu.op_svm_classifier_.RuntimeSVMClassifierDouble>`                                        |              | Implements runtime for operator SVMClassifierDouble. The code is inspired from `svm_classifier.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/svm_classifier.cc>`_ ...                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeSVMClassifierFloat <mlprodict.onnxrt.ops_cpu.op_svm_classifier_.RuntimeSVMClassifierFloat>`                                          |              | Implements runtime for operator SVMClassifier. The code is inspired from `svm_classifier.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/svm_classifier.cc>`_ ...                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeSVMRegressorDouble <mlprodict.onnxrt.ops_cpu.op_svm_regressor_.RuntimeSVMRegressorDouble>`                                           |              | Implements Double runtime for operator SVMRegressor. The code is inspired from `svm_regressor.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/svm_regressor.cc>`_ ...                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeSVMRegressorFloat <mlprodict.onnxrt.ops_cpu.op_svm_regressor_.RuntimeSVMRegressorFloat>`                                             |              | Implements float runtime for operator SVMRegressor. The code is inspired from `svm_regressor.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/svm_regressor.cc>`_ ...                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTfIdfVectorizer <mlprodict.onnxrt.ops_cpu.op_tfidfvectorizer_.RuntimeTfIdfVectorizer>`                                               |              | Implements runtime for operator TfIdfVectorizer. The code is inspired from `tfidfvectorizer.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/nn/tfidfvectorizer.cc>`_ ...                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleClassifierDouble <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier_.RuntimeTreeEnsembleClassifierDouble>`            |              | Implements runtime for operator TreeEnsembleClassifier. The code is inspired from `tree_ensemble_classifier.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/tree_ensemble_classifier.cc>`_ ...             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleClassifierFloat <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier_.RuntimeTreeEnsembleClassifierFloat>`              |              | Implements runtime for operator TreeEnsembleClassifier. The code is inspired from `tree_ensemble_classifier.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/tree_ensemble_classifier.cc>`_ ...             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleClassifierPDouble <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier_p_.RuntimeTreeEnsembleClassifierPDouble>`        |              | Implements double runtime for operator TreeEnsembleClassifier. The code is inspired from `tree_ensemble_Classifier.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/ core/providers/cpu/ml/tree_ensemble_Classifier.cc>`_ ...     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleClassifierPFloat <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier_p_.RuntimeTreeEnsembleClassifierPFloat>`          |              | Implements float runtime for operator TreeEnsembleClassifier. The code is inspired from `tree_ensemble_Classifier.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/ core/providers/cpu/ml/tree_ensemble_Classifier.cc>`_ ...      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleRegressorDouble <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor_.RuntimeTreeEnsembleRegressorDouble>`               |              | Implements double runtime for operator TreeEnsembleRegressor. The code is inspired from `tree_ensemble_regressor.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/tree_ensemble_Regressor.cc>`_ ...         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleRegressorFloat <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor_.RuntimeTreeEnsembleRegressorFloat>`                 |              | Implements float runtime for operator TreeEnsembleRegressor. The code is inspired from `tree_ensemble_regressor.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/core/providers/cpu/ml/tree_ensemble_Regressor.cc>`_ ...          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleRegressorPDouble <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor_p_.RuntimeTreeEnsembleRegressorPDouble>`           |              | Implements double runtime for operator TreeEnsembleRegressor. The code is inspired from `tree_ensemble_regressor.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/ core/providers/cpu/ml/tree_ensemble_Regressor.cc>`_ ...        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTreeEnsembleRegressorPFloat <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor_p_.RuntimeTreeEnsembleRegressorPFloat>`             |              | Implements float runtime for operator TreeEnsembleRegressor. The code is inspired from `tree_ensemble_regressor.cc <https://github.com/microsoft/onnxruntime/blob/master/onnxruntime/ core/providers/cpu/ml/tree_ensemble_Regressor.cc>`_ ...         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`RuntimeTypeError <mlprodict.onnxrt.ops_cpu._op.RuntimeTypeError>`                                                                           |              | Raised when a type of a variable is unexpected.                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMClassifier <mlprodict.onnxrt.ops_cpu.op_svm_classifier.SVMClassifier>`                                                                   |              | SVMClassifier (ai.onnx.ml) ========================== Support Vector Machine classifier **Attributes**                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMClassifierCommon <mlprodict.onnxrt.ops_cpu.op_svm_classifier.SVMClassifierCommon>`                                                       |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMClassifierDouble <mlprodict.onnxrt.ops_cpu.op_svm_classifier.SVMClassifierDouble>`                                                       |              | SVMClassifierDouble (mlprodict) =============================== **Version** *Onnx name:* `SVMClassifierDouble <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.SVMClassifierDouble>`_ ...                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMClassifierDoubleSchema <mlprodict.onnxrt.ops_cpu.op_svm_classifier.SVMClassifierDoubleSchema>`                                           |              | Defines a schema for operators added in this package such as :class:`SVMClassifierDouble`.                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMRegressor <mlprodict.onnxrt.ops_cpu.op_svm_regressor.SVMRegressor>`                                                                      |              | SVMRegressor (ai.onnx.ml) ========================= Support Vector Machine regression prediction and one-class SVM anomaly ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMRegressorCommon <mlprodict.onnxrt.ops_cpu.op_svm_regressor.SVMRegressorCommon>`                                                          |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMRegressorDouble <mlprodict.onnxrt.ops_cpu.op_svm_regressor.SVMRegressorDouble>`                                                          |              | SVMRegressorDouble (mlprodict) ============================== **Version** *Onnx name:* `SVMRegressorDouble <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.SVMRegressorDouble>`_ ...                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SVMRegressorDoubleSchema <mlprodict.onnxrt.ops_cpu.op_svm_regressor.SVMRegressorDoubleSchema>`                                              |              | Defines a schema for operators added in this package such as :class:`SVMRegressorDouble`.                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Scaler <mlprodict.onnxrt.ops_cpu.op_scaler.Scaler>`                                                                                         |              | Scaler (ai.onnx.ml) =================== Rescale input data, for example to standardize features by removing the mean and ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Scan <mlprodict.onnxrt.ops_cpu.op_scan.Scan>`                                                                                               |              | Scan ==== Scan can be used to iterate over one or more scan_input tensors, constructing zero or more scan_output tensors. ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ScatterElements <mlprodict.onnxrt.ops_cpu.op_scatter_elements.ScatterElements>`                                                             |              | ScatterElements =============== ScatterElements takes three inputs `data`, `updates`, and `indices` of the same rank r ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Selu <mlprodict.onnxrt.ops_cpu.op_selu.Selu>`                                                                                               |              | Selu ==== Selu takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the scaled exponential ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SentencePieceTokenizerTransformer <mlprodict.sklapi.onnx_tokenizer.SentencePieceTokenizerTransformer>`                                      |              | Wraps `SentencePieceTokenizer <https://github.com/microsoft/onnxruntime-extensions/blob/ main/docs/custom_text_ops.md#sentencepiecetokenizer>`_ ...                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SequenceAt <mlprodict.onnxrt.ops_cpu.op_sequence_at.SequenceAt>`                                                                            |              | SequenceAt ========== Outputs a tensor copy from the tensor at 'position' in 'input_sequence'. Accepted range for 'position' ...                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SequenceConstruct <mlprodict.onnxrt.ops_cpu.op_sequence_construct.SequenceConstruct>`                                                       |              | SequenceConstruct ================= Construct a tensor sequence containing 'inputs' tensors. All tensors in 'inputs' must ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SequenceInsert <mlprodict.onnxrt.ops_cpu.op_sequence_insert.SequenceInsert>`                                                                |              | SequenceInsert ============== Outputs a tensor sequence that inserts 'tensor' into 'input_sequence' at 'position'. 'tensor' ...                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SequenceType <mlprodict.onnxrt.type_object.SequenceType>`                                                                                   |              | Represents a sequence type. Used in @see methd infer_types.                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Shape <mlprodict.onnxrt.ops_cpu.op_shape.Shape>`                                                                                            |              | Shape ===== Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor. Optional ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeBinaryFctOperator <mlprodict.onnxrt.shape_object.ShapeBinaryFctOperator>`                                                              |              | Base class for shape binary operator defined by a function.                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeBinaryOperator <mlprodict.onnxrt.shape_object.ShapeBinaryOperator>`                                                                    |              | Base class for shape binary operator.                                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeConstraint <mlprodict.onnxrt.ops_shape.shape_result.ShapeConstraint>`                                                                  |              | One constraint.                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeConstraintList <mlprodict.onnxrt.ops_shape.shape_result.ShapeConstraintList>`                                                          |              | A list of ShapeConstraint.                                                                                                                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeContainer <mlprodict.onnxrt.ops_shape.shape_container.ShapeContainer>`                                                                 |              | Stores all infered shapes as :class:`ShapeResult`. Attributes:                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeInferenceException <mlprodict.onnxrt.ops_shape.shape_excs.ShapeInferenceException>`                                                    |              | Raised when shape inference fails.                                                                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeObject <mlprodict.onnxrt.shape_object.ShapeObject>`                                                                                    |              | Handles mathematical operations around shapes. It stores a type (:epkg:`numpy` type), and a name to somehow have ...                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeObjectFct <mlprodict.onnxrt.shape_object.ShapeObjectFct>`                                                                              |              | Computes a shape depending on a user defined function. See :class:`Conv` for an example.                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeOperator <mlprodict.onnxrt.shape_object.ShapeOperator>`                                                                                |              | Base class for all shapes operator.                                                                                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeOperatorAdd <mlprodict.onnxrt.shape_object.ShapeOperatorAdd>`                                                                          |              | Shape addition.                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeOperatorGreater <mlprodict.onnxrt.shape_object.ShapeOperatorGreater>`                                                                  |              | Shape comparison.                                                                                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeOperatorMax <mlprodict.onnxrt.shape_object.ShapeOperatorMax>`                                                                          |              | Best on each dimension.                                                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeOperatorMul <mlprodict.onnxrt.shape_object.ShapeOperatorMul>`                                                                          |              | Shape multiplication.                                                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ShapeResult <mlprodict.onnxrt.ops_shape.shape_result.ShapeResult>`                                                                          |              | Contains information about shape and type of a result in an onnx graph.                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Sigmoid <mlprodict.onnxrt.ops_cpu.op_sigmoid.Sigmoid>`                                                                                      |              | Sigmoid ======= Sigmoid takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the sigmoid function, ...                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Sign <mlprodict.onnxrt.ops_cpu.op_sign.Sign>`                                                                                               |              | Sign ==== Calculate the sign of the given input tensor element-wise. If input > 0, output 1. if input < 0, output -1. ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SimplifiedOnnxInference <mlprodict.onnxrt.validate.validate_benchmark_replay.SimplifiedOnnxInference>`                                      |              | Simple wrapper around InferenceSession which imitates :class:`OnnxInference`. It only enable *CPUExecutionProvider*. ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Sin <mlprodict.onnxrt.ops_cpu.op_sin.Sin>`                                                                                                  |              | Sin === Calculates the sine of the given input tensor, element-wise. **Inputs**                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Sinh <mlprodict.onnxrt.ops_cpu.op_sinh.Sinh>`                                                                                               |              | Sinh ==== Calculates the hyperbolic sine of the given input tensor element-wise. **Inputs**                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Size <mlprodict.onnxrt.ops_cpu.op_size.Size>`                                                                                               |              | Size ==== Takes a tensor as input and outputs a int64 scalar that equals to the total number of elements of the input ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SliceCommon <mlprodict.onnxrt.ops_cpu.op_slice.SliceCommon>`                                                                                |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Slice_1 <mlprodict.onnxrt.ops_cpu.op_slice.Slice_1>`                                                                                        |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Slice_10 <mlprodict.onnxrt.ops_cpu.op_slice.Slice_10>`                                                                                      |              | Slice ===== Produces a slice of the input tensor along multiple axes. Similar to numpy: https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html ...                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Slice_10 <mlprodict.onnxrt.ops_cpu.op_slice.Slice_10>`                                                                                      |              | Slice ===== Produces a slice of the input tensor along multiple axes. Similar to numpy: https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html ...                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Softmax <mlprodict.onnxrt.ops_cpu.op_softmax.Softmax>`                                                                                      |              | Softmax ======= The operator computes the normalized exponential values for the given input: Softmax(input, axis) = ...                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SoftmaxCrossEntropyLoss <mlprodict.onnxrt.ops_cpu.op_softmax_cross_entropy_loss.SoftmaxCrossEntropyLoss>`                                   |              | Python runtime for function *SoftmaxCrossEntropyLoss*.                                                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SoftmaxGradSchema <mlprodict.onnxrt.ops_cpu.op_softmax.SoftmaxGradSchema>`                                                                  |              | Defines a schema for operators added in this package such as :class:`SoftmaxGrad_13`.                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SoftmaxGrad_13 <mlprodict.onnxrt.ops_cpu.op_softmax.SoftmaxGrad_13>`                                                                        |              | SoftmaxGrad computes :math:`dX = Y * ( dY - ReduceSum(Y * dY))`. ONNX does not have a dot product, which can be ...                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SoftmaxGrad_13 <mlprodict.onnxrt.ops_cpu.op_softmax.SoftmaxGrad_13>`                                                                        |              | SoftmaxGrad computes :math:`dX = Y * ( dY - ReduceSum(Y * dY))`. ONNX does not have a dot product, which can be ...                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Solve <mlprodict.onnxrt.ops_cpu.op_solve.Solve>`                                                                                            |              | Solve (mlprodict) ================= **Version** *Onnx name:* `Solve <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.Solve>`_ ...                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`SolveSchema <mlprodict.onnxrt.ops_cpu.op_solve.SolveSchema>`                                                                                |              | Defines a schema for operators added in this package such as :class:`Solve`.                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Split_11 <mlprodict.onnxrt.ops_cpu.op_split.Split_11>`                                                                                      |              | Runtime for operator *Split*.                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Split_13 <mlprodict.onnxrt.ops_cpu.op_split.Split_13>`                                                                                      |              | Runtime for operator *Split*.                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Split_13 <mlprodict.onnxrt.ops_cpu.op_split.Split_13>`                                                                                      |              | Runtime for operator *Split*.                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Split_2 <mlprodict.onnxrt.ops_cpu.op_split.Split_2>`                                                                                        |              | Runtime for operator *Split*.                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Sqrt <mlprodict.onnxrt.ops_cpu.op_sqrt.Sqrt>`                                                                                               |              | Sqrt ==== Square root takes one input data (Tensor<T>) and produces one output data (Tensor<T>) where the square root ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Squeeze_1 <mlprodict.onnxrt.ops_cpu.op_squeeze.Squeeze_1>`                                                                                  |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Squeeze_11 <mlprodict.onnxrt.ops_cpu.op_squeeze.Squeeze_11>`                                                                                |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Squeeze_13 <mlprodict.onnxrt.ops_cpu.op_squeeze.Squeeze_13>`                                                                                |              | Squeeze ======= Remove single-dimensional entries from the shape of a tensor. Takes an input `axes` with a list of axes ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Squeeze_13 <mlprodict.onnxrt.ops_cpu.op_squeeze.Squeeze_13>`                                                                                |              | Squeeze ======= Remove single-dimensional entries from the shape of a tensor. Takes an input `axes` with a list of axes ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`StringNormalizer <mlprodict.onnxrt.ops_cpu.op_string_normalizer.StringNormalizer>`                                                          |              | The operator is not really threadsafe as python cannot play with two locales at the same time. stop words should ...                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Sub <mlprodict.onnxrt.ops_cpu.op_sub.Sub>`                                                                                                  |              | Sub === Performs element-wise binary subtraction (with Numpy-style broadcasting support). This operator supports **multidirectional ...                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Sum <mlprodict.onnxrt.ops_cpu.op_sum.Sum>`                                                                                                  |              | Sum === Element-wise sum of each of the input tensors (with Numpy-style broadcasting support). All inputs and outputs ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Tan <mlprodict.onnxrt.ops_cpu.op_tan.Tan>`                                                                                                  |              | Tan === Calculates the tangent of the given input tensor, element-wise. **Inputs**                                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Tanh <mlprodict.onnxrt.ops_cpu.op_tanh.Tanh>`                                                                                               |              | Tanh ==== Calculates the hyperbolic tangent of the given input tensor element-wise. **Inputs**                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkClassifier <mlprodict.asv_benchmark.template.skl_model_classifier.TemplateBenchmarkClassifier>`                            |              | :epkg:`asv` test for a classifier, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/ blob/master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkClassifierRawScore <mlprodict.asv_benchmark.template.skl_model_classifier_raw_scores.TemplateBenchmarkClassifierRawScore>` |              | :epkg:`asv` test for a classifier, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/ blob/master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkClustering <mlprodict.asv_benchmark.template.skl_model_clustering.TemplateBenchmarkClustering>`                            |              | :epkg:`asv` example for a clustering algorithm, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/ blob/master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkMultiClassifier <mlprodict.asv_benchmark.template.skl_model_multi_classifier.TemplateBenchmarkMultiClassifier>`            |              | :epkg:`asv` example for a classifier, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/ blob/master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkOutlier <mlprodict.asv_benchmark.template.skl_model_outlier.TemplateBenchmarkOutlier>`                                     |              | :epkg:`asv` example for an outlier detector, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/blob/ master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkRegressor <mlprodict.asv_benchmark.template.skl_model_regressor.TemplateBenchmarkRegressor>`                               |              | :epkg:`asv` example for a regressor, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/ blob/master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkTrainableTransform <mlprodict.asv_benchmark.template.skl_model_trainable_transform.TemplateBenchmarkTrainableTransform>`   |              | :epkg:`asv` example for a trainable transform, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/ blob/master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkTransform <mlprodict.asv_benchmark.template.skl_model_transform.TemplateBenchmarkTransform>`                               |              | :epkg:`asv` example for a transform, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/blob/ master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TemplateBenchmarkTransformPositive <mlprodict.asv_benchmark.template.skl_model_transform_positive.TemplateBenchmarkTransformPositive>`      |              | :epkg:`asv` example for a transform, Full template can be found in `common_asv_skl.py <https://github.com/sdpython/mlprodict/blob/ master/mlprodict/asv_benchmark/common_asv_skl.py>`_. ...                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Tf2OnnxConvert <mlprodict.onnx_tools.exports.tf2onnx_helper.Tf2OnnxConvert>`                                                                |              | Applies the converter on an ONNX graph.                                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TfIdfVectorizer <mlprodict.onnxrt.ops_cpu.op_tfidfvectorizer.TfIdfVectorizer>`                                                              |              | TfIdfVectorizer =============== This transform extracts n-grams from the input sequence and save them as a vector. Input ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Tokenizer <mlprodict.onnxrt.ops_cpu.op_tokenizer.Tokenizer>`                                                                                |              | See :epkg:`Tokenizer`.                                                                                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TokenizerSchema <mlprodict.onnxrt.ops_cpu.op_tokenizer.TokenizerSchema>`                                                                    |              | Defines a schema for operators added in this package such as :class:`TreeEnsembleClassifierDouble`.                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TokenizerTransformerBase <mlprodict.sklapi.onnx_tokenizer.TokenizerTransformerBase>`                                                        |              | Base class for :class:`SentencePieceTokenizerTransformer` and :class:`GPT2TokenizerTransformer`.                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TopK_1 <mlprodict.onnxrt.ops_cpu.op_topk.TopK_1>`                                                                                           |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TopK_10 <mlprodict.onnxrt.ops_cpu.op_topk.TopK_10>`                                                                                         |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TopK_11 <mlprodict.onnxrt.ops_cpu.op_topk.TopK_11>`                                                                                         |              | TopK ==== Retrieve the top-K largest or smallest elements along a specified axis. Given an input tensor of shape [a_1, ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TopK_11 <mlprodict.onnxrt.ops_cpu.op_topk.TopK_11>`                                                                                         |              | TopK ==== Retrieve the top-K largest or smallest elements along a specified axis. Given an input tensor of shape [a_1, ...                                                                                                                            |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Transpose <mlprodict.onnxrt.ops_cpu.op_transpose.Transpose>`                                                                                |              | Transpose ========= Transpose the input tensor similar to numpy.transpose. For example, when perm=(1, 0, 2), given an ...                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleClassifierCommon <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier.TreeEnsembleClassifierCommon>`                           |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleClassifierDouble <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier.TreeEnsembleClassifierDouble>`                           |              | TreeEnsembleClassifierDouble (mlprodict) ======================================== **Version** *Onnx name:* `TreeEnsembleClassifierDouble <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.TreeEnsembleClassifierDouble>`_ ... |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleClassifierDoubleSchema <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier.TreeEnsembleClassifierDoubleSchema>`               |              | Defines a schema for operators added in this package such as :class:`TreeEnsembleClassifierDouble`.                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleClassifier_1 <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier.TreeEnsembleClassifier_1>`                                   |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleClassifier_3 <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier.TreeEnsembleClassifier_3>`                                   |              | TreeEnsembleClassifier (ai.onnx.ml) =================================== Tree Ensemble classifier. Returns the top class ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleClassifier_3 <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_classifier.TreeEnsembleClassifier_3>`                                   |              | TreeEnsembleClassifier (ai.onnx.ml) =================================== Tree Ensemble classifier. Returns the top class ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleRegressorCommon <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor.TreeEnsembleRegressorCommon>`                              |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleRegressorDouble <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor.TreeEnsembleRegressorDouble>`                              |              | Runtime for the custom operator `TreeEnsembleRegressorDouble`.                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleRegressorDoubleSchema <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor.TreeEnsembleRegressorDoubleSchema>`                  |              | Defines a schema for operators added in this package such as :class:`TreeEnsembleRegressorDouble`.                                                                                                                                                    |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleRegressor_1 <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor.TreeEnsembleRegressor_1>`                                      |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleRegressor_3 <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor.TreeEnsembleRegressor_3>`                                      |              | TreeEnsembleRegressor (ai.onnx.ml) ================================== Tree Ensemble regressor. Returns the regressed ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`TreeEnsembleRegressor_3 <mlprodict.onnxrt.ops_cpu.op_tree_ensemble_regressor.TreeEnsembleRegressor_3>`                                      |              | TreeEnsembleRegressor (ai.onnx.ml) ================================== Tree Ensemble regressor. Returns the regressed ...                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Trilu <mlprodict.onnxrt.ops_cpu.op_trilu.Trilu>`                                                                                            |              | Trilu ===== Given a 2-D matrix or batches of 2-D matrices, returns the upper or lower triangular part of the tensor(s). ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Unsqueeze_1 <mlprodict.onnxrt.ops_cpu.op_unsqueeze.Unsqueeze_1>`                                                                            |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Unsqueeze_11 <mlprodict.onnxrt.ops_cpu.op_unsqueeze.Unsqueeze_11>`                                                                          |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Unsqueeze_13 <mlprodict.onnxrt.ops_cpu.op_unsqueeze.Unsqueeze_13>`                                                                          |              | Unsqueeze ========= Insert single-dimensional entries to the shape of an input tensor (`data`). Takes one required input ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Unsqueeze_13 <mlprodict.onnxrt.ops_cpu.op_unsqueeze.Unsqueeze_13>`                                                                          |              | Unsqueeze ========= Insert single-dimensional entries to the shape of an input tensor (`data`). Takes one required input ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Variable <mlprodict.npy.xop_variable.Variable>`                                                                                             |              | An input or output to an ONNX graph.                                                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Where <mlprodict.onnxrt.ops_cpu.op_where.Where>`                                                                                            |              | Where ===== Return elements, either from X or Y, depending on condition. Where behaves like [numpy.where](https://docs.scipy.org/doc/numpy/reference/generated/numpy.where.html) ...                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`WrappedLightGbmBooster <mlprodict.onnx_conv.operator_converters.parse_lightgbm.WrappedLightGbmBooster>`                                     |              | A booster can be a classifier, a regressor. Trick to wrap it in a minimal function.                                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`WrappedLightGbmBoosterClassifier <mlprodict.onnx_conv.operator_converters.parse_lightgbm.WrappedLightGbmBoosterClassifier>`                 |              | Trick to wrap a LGBMClassifier into a class.                                                                                                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`XGBClassifierConverter <mlprodict.onnx_conv.operator_converters.conv_xgboost.XGBClassifierConverter>`                                       |              | converter for XGBClassifier                                                                                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`XGBConverter <mlprodict.onnx_conv.operator_converters.conv_xgboost.XGBConverter>`                                                           |              | common methods for converters                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`XGBRegressorConverter <mlprodict.onnx_conv.operator_converters.conv_xgboost.XGBRegressorConverter>`                                         |              | converter class                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`Xor <mlprodict.onnxrt.ops_cpu.op_xor.Xor>`                                                                                                  |              | Xor === Returns the tensor resulted from performing the `xor` logical operation elementwise on the input tensors `A` and ...                                                                                                                          |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`YieldOp <mlprodict.onnxrt.ops_cpu.op_yield_op.YieldOp>`                                                                                     |              | YieldOp (mlprodict) =================== **Version** *Onnx name:* `YieldOp <https://github.com/onnx/onnx/blob/master/docs/Operators-ml.md#mlprodict.YieldOp>`_ ...                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`YieldOpSchema <mlprodict.onnxrt.ops_cpu.op_yield_op.YieldOpSchema>`                                                                         |              | Defines a schema for operators added in this package such as :class:`ComplexAbs`.                                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ZipMap <mlprodict.onnxrt.ops_cpu.op_zipmap.ZipMap>`                                                                                         |              | The class does not output a dictionary as specified in :epkg:`ONNX` specifications but a :class:`ArrayZipMapDictionary` ...                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`ZipMapDictionary <mlprodict.onnxrt.ops_cpu.op_zipmap.ZipMapDictionary>`                                                                     |              | Custom dictionary class much faster for this runtime, it implements a subset of the same methods.                                                                                                                                                     |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_ArgMax <mlprodict.onnxrt.ops_cpu.op_argmax._ArgMax>`                                                                                       |              | Base class for runtime for operator `ArgMax <https://github.com/onnx/onnx/blob/master/docs/ Operators.md#ArgMax>`_. ...                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_ArgMin <mlprodict.onnxrt.ops_cpu.op_argmin._ArgMin>`                                                                                       |              | Base class for runtime for operator `ArgMin <https://github.com/onnx/onnx/blob/master/docs/ Operators.md#ArgMin>`_. ...                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_ClassifierCommon <mlprodict.onnxrt.ops_cpu._op_classifier_string._ClassifierCommon>`                                                       |              | Labels strings are not natively implemented in C++ runtime. The class stores the strings labels, replaces them by ...                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CombineModels <mlprodict.onnxrt.backend._CombineModels>`                                                                                   |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmark <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmark>`                                                     |              | Common tests to all benchmarks testing converted :epkg:`scikit-learn` models. See `benchmark attributes <https://asv.readthedocs.io/en/stable/benchmarks.html#general>`_. ...                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkClassifier <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkClassifier>`                                 |              | Common class for a classifier.                                                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkClassifierRawScore <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkClassifierRawScore>`                 |              | Common class for a classifier.                                                                                                                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkClustering <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkClustering>`                                 |              | Common class for a clustering algorithm.                                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkMultiClassifier <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkMultiClassifier>`                       |              | Common class for a multi-classifier.                                                                                                                                                                                                                  |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkOutlier <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkOutlier>`                                       |              | Common class for outlier detection.                                                                                                                                                                                                                   |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkRegressor <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkRegressor>`                                   |              | Common class for a regressor.                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkTrainableTransform <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkTrainableTransform>`                 |              | Common class for a trainable transformer.                                                                                                                                                                                                             |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkTransform <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkTransform>`                                   |              | Common class for a transformer.                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonAsvSklBenchmarkTransformPositive <mlprodict.asv_benchmark.common_asv_skl._CommonAsvSklBenchmarkTransformPositive>`                   |              | Common class for a transformer for positive features.                                                                                                                                                                                                 |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonRandom <mlprodict.onnxrt.ops_cpu.op_random._CommonRandom>`                                                                           |              | Common methods to all random operators.                                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_CommonTopK <mlprodict.onnxrt.ops_cpu.op_topk._CommonTopK>`                                                                                 |              | Ths class hides a parameter used as a threshold above which the parallelisation is started: ``th_para``.                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_GraphBuilder <mlprodict.npy.xop._GraphBuilder>`                                                                                            |              | Graph builder. It takes a graph structure made with instances of :class:`OnnxOperatorBase`. The main method is `to_onnx`. ...                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_MyEncoder <mlprodict.onnxrt.validate.validate_summary._MyEncoder>`                                                                         |              |                                                                                                                                                                                                                                                       |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_NDArrayAlias <mlprodict.npy.onnx_numpy_annotation._NDArrayAlias>`                                                                          |              | Ancestor to custom signature.                                                                                                                                                                                                                         |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_OnnxPipelineStepSpeedup <mlprodict.sklapi.onnx_speed_up._OnnxPipelineStepSpeedup>`                                                         |              | Speeds up inference by replacing methods *transform* or *predict* by a runtime for :epkg:`ONNX`.                                                                                                                                                      |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`_created_classes <mlprodict.npy.onnx_numpy_wrapper._created_classes>`                                                                       |              | Class to store all dynamic classes created by wrappers.                                                                                                                                                                                               |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`if_then_else <mlprodict.npy.numpy_onnx_impl_body.if_then_else>`                                                                             |              | Overloads class :class:`OnnxVarGraph`.                                                                                                                                                                                                                |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`tf_op <mlprodict.onnx_tools.exports.tf2onnx_helper.tf_op>`                                                                                  |              | Decorator to register any new converter.                                                                                                                                                                                                              |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`wrapper_onnxnumpy <mlprodict.npy.onnx_numpy_wrapper.wrapper_onnxnumpy>`                                                                     |              | Intermediate wrapper to store a pointer on the compiler (type: :class:`OnnxNumpyCompiler`).                                                                                                                                                           |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
| :class:`wrapper_onnxnumpy_np <mlprodict.npy.onnx_numpy_wrapper.wrapper_onnxnumpy_np>`                                                               |              | Intermediate wrapper to store a pointer on the compiler (type: :class:`OnnxNumpyCompiler`) supporting multiple signatures. ...                                                                                                                        |
+-----------------------------------------------------------------------------------------------------------------------------------------------------+--------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+
