
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_gexternal_lightgbm_reg.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_gexternal_lightgbm_reg.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_gexternal_lightgbm_reg.py:


.. _example-lightgbm-reg:

Convert a pipeline with a LightGBM regressor
============================================

.. index:: LightGBM

The discrepancies observed when using float and TreeEnsemble operator
(see :ref:`l-example-discrepencies-float-double`)
explains why the converter for *LGBMRegressor* may introduce significant
discrepancies even when it is used with float tensors.

Library *lightgbm* is implemented with double. A random forest regressor
with multiple trees computes its prediction by adding the prediction of
every tree. After being converting into ONNX, this summation becomes
:math:`\left[\sum\right]_{i=1}^F float(T_i(x))`,
where *F* is the number of trees in the forest,
:math:`T_i(x)` the output of tree *i* and :math:`\left[\sum\right]`
a float addition. The discrepancy can be expressed as
:math:`D(x) = |\left[\sum\right]_{i=1}^F float(T_i(x)) -
\sum_{i=1}^F T_i(x)|`.
This grows with the number of trees in the forest.

To reduce the impact, an option was added to split the node
*TreeEnsembleRegressor* into multiple ones and to do a summation
with double this time. If we assume the node if split into *a* nodes,
the discrepancies then become
:math:`D'(x) = |\sum_{k=1}^a \left[\sum\right]_{i=1}^{F/a}
float(T_{ak + i}(x)) - \sum_{i=1}^F T_i(x)|`.

.. contents::
    :local:

Train a LGBMRegressor
+++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 38-61

.. code-block:: default

    from distutils.version import StrictVersion
    import warnings
    import timeit
    import numpy
    from pandas import DataFrame
    # import matplotlib.pyplot as plt
    from tqdm import tqdm
    from lightgbm import LGBMRegressor
    from onnxruntime import InferenceSession
    from skl2onnx import to_onnx, update_registered_converter
    from skl2onnx.common.shape_calculator import calculate_linear_regressor_output_shapes  # noqa
    from onnxmltools import __version__ as oml_version
    from onnxmltools.convert.lightgbm.operator_converters.LightGbm import convert_lightgbm  # noqa


    N = 1000
    X = numpy.random.randn(N, 20)
    y = (numpy.random.randn(N) +
         numpy.random.randn(N) * 100 * numpy.random.randint(0, 1, 1000))

    reg = LGBMRegressor(n_estimators=1000)
    reg.fit(X, y)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    LGBMRegressor(n_estimators=1000)



.. GENERATED FROM PYTHON SOURCE LINES 62-73

Register the converter for LGBMClassifier
+++++++++++++++++++++++++++++++++++++++++

The converter is implemented in :epkg:`onnxmltools`:
`onnxmltools...LightGbm.py
<https://github.com/onnx/onnxmltools/blob/master/onnxmltools/convert/
lightgbm/operator_converters/LightGbm.py>`_.
and the shape calculator:
`onnxmltools...Regressor.py
<https://github.com/onnx/onnxmltools/blob/master/onnxmltools/convert/
lightgbm/shape_calculators/Regressor.py>`_.

.. GENERATED FROM PYTHON SOURCE LINES 73-94

.. code-block:: default



    def skl2onnx_convert_lightgbm(scope, operator, container):
        options = scope.get_options(operator.raw_operator)
        if 'split' in options:
            if StrictVersion(oml_version) < StrictVersion('1.9.2'):
                warnings.warn(
                    "Option split was released in version 1.9.2 but %s is "
                    "installed. It will be ignored." % oml_version)
            operator.split = options['split']
        else:
            operator.split = None
        convert_lightgbm(scope, operator, container)


    update_registered_converter(
        LGBMRegressor, 'LightGbmLGBMRegressor',
        calculate_linear_regressor_output_shapes,
        skl2onnx_convert_lightgbm,
        options={'split': None})








.. GENERATED FROM PYTHON SOURCE LINES 95-101

Convert
+++++++

We convert the same model following the two scenarios, one single
TreeEnsembleRegressor node, or more. *split* parameter is the number of
trees per node TreeEnsembleRegressor.

.. GENERATED FROM PYTHON SOURCE LINES 101-108

.. code-block:: default


    model_onnx = to_onnx(reg, X[:1].astype(numpy.float32),
                         target_opset={'': 14, 'ai.onnx.ml': 2})
    model_onnx_split = to_onnx(reg, X[:1].astype(numpy.float32),
                               target_opset={'': 14, 'ai.onnx.ml': 2},
                               options={'split': 100})





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /var/lib/jenkins/workspace/onnxcustom/onnxcustom_UT_39_std/_doc/examples/plot_gexternal_lightgbm_reg.py:78: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
      if StrictVersion(oml_version) < StrictVersion('1.9.2'):




.. GENERATED FROM PYTHON SOURCE LINES 109-111

Discrepancies
+++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 111-129

.. code-block:: default


    sess = InferenceSession(model_onnx.SerializeToString(),
                            providers=['CPUExecutionProvider'])
    sess_split = InferenceSession(model_onnx_split.SerializeToString(),
                                  providers=['CPUExecutionProvider'])

    X32 = X.astype(numpy.float32)
    expected = reg.predict(X32)
    got = sess.run(None, {'X': X32})[0].ravel()
    got_split = sess_split.run(None, {'X': X32})[0].ravel()

    disp = numpy.abs(got - expected).sum()
    disp_split = numpy.abs(got_split - expected).sum()

    print("sum of discrepancies 1 node", disp)
    print("sum of discrepancies split node",
          disp_split, "ratio:", disp / disp_split)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    sum of discrepancies 1 node 0.00021465639434970537
    sum of discrepancies split node 4.253979806128228e-05 ratio: 5.046013477555163




.. GENERATED FROM PYTHON SOURCE LINES 130-132

The sum of the discrepancies were reduced 4, 5 times.
The maximum is much better too.

.. GENERATED FROM PYTHON SOURCE LINES 132-139

.. code-block:: default


    disc = numpy.abs(got - expected).max()
    disc_split = numpy.abs(got_split - expected).max()

    print("max discrepancies 1 node", disc)
    print("max discrepancies split node", disc_split, "ratio:", disc / disc_split)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    max discrepancies 1 node 1.85114812856213e-06
    max discrepancies split node 3.228950369305039e-07 ratio: 5.732971761224528




.. GENERATED FROM PYTHON SOURCE LINES 140-144

Processing time
+++++++++++++++

The processing time is slower but not much.

.. GENERATED FROM PYTHON SOURCE LINES 144-152

.. code-block:: default


    print("processing time no split",
          timeit.timeit(
              lambda: sess.run(None, {'X': X32})[0], number=150))
    print("processing time split",
          timeit.timeit(
              lambda: sess_split.run(None, {'X': X32})[0], number=150))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    processing time no split 3.6881782775744796
    processing time split 3.6407719487324357




.. GENERATED FROM PYTHON SOURCE LINES 153-158

Split influence
+++++++++++++++

Let's see how the sum of the discrepancies moves against
the parameter *split*.

.. GENERATED FROM PYTHON SOURCE LINES 158-174

.. code-block:: default


    res = []
    for i in tqdm(list(range(20, 170, 20)) + [200, 300, 400, 500]):
        model_onnx_split = to_onnx(reg, X[:1].astype(numpy.float32),
                                   target_opset={'': 14, 'ai.onnx.ml': 2},
                                   options={'split': i})
        sess_split = InferenceSession(model_onnx_split.SerializeToString(),
                                      providers=['CPUExecutionProvider'])
        got_split = sess_split.run(None, {'X': X32})[0].ravel()
        disc_split = numpy.abs(got_split - expected).max()
        res.append(dict(split=i, disc=disc_split))

    df = DataFrame(res).set_index('split')
    df["baseline"] = disc
    print(df)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/12 [00:00<?, ?it/s]/var/lib/jenkins/workspace/onnxcustom/onnxcustom_UT_39_std/_doc/examples/plot_gexternal_lightgbm_reg.py:78: DeprecationWarning: distutils Version classes are deprecated. Use packaging.version instead.
      if StrictVersion(oml_version) < StrictVersion('1.9.2'):
      8%|8         | 1/12 [00:14<02:38, 14.38s/it]     17%|#6        | 2/12 [00:27<02:15, 13.55s/it]     25%|##5       | 3/12 [00:40<01:58, 13.18s/it]     33%|###3      | 4/12 [00:52<01:43, 12.94s/it]     42%|####1     | 5/12 [01:05<01:30, 12.98s/it]     50%|#####     | 6/12 [01:18<01:16, 12.80s/it]     58%|#####8    | 7/12 [01:30<01:03, 12.68s/it]     67%|######6   | 8/12 [01:43<00:51, 12.78s/it]     75%|#######5  | 9/12 [01:55<00:37, 12.64s/it]     83%|########3 | 10/12 [02:08<00:25, 12.55s/it]     92%|#########1| 11/12 [02:21<00:12, 12.69s/it]    100%|##########| 12/12 [02:33<00:00, 12.58s/it]    100%|##########| 12/12 [02:33<00:00, 12.80s/it]
                   disc  baseline
    split                        
    20     1.932818e-07  0.000002
    40     2.141412e-07  0.000002
    60     2.458757e-07  0.000002
    80     3.333199e-07  0.000002
    100    3.228950e-07  0.000002
    120    3.369252e-07  0.000002
    140    6.233323e-07  0.000002
    160    4.348161e-07  0.000002
    200    6.233323e-07  0.000002
    300    9.991299e-07  0.000002
    400    1.237549e-06  0.000002
    500    1.135892e-06  0.000002




.. GENERATED FROM PYTHON SOURCE LINES 175-176

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 176-181

.. code-block:: default


    ax = df.plot(title="Sum of discrepancies against split\n"
                       "split = number of tree per node")

    # plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_gexternal_lightgbm_reg_001.png
   :alt: Sum of discrepancies against split split = number of tree per node
   :srcset: /gyexamples/images/sphx_glr_plot_gexternal_lightgbm_reg_001.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 3 minutes  8.918 seconds)


.. _sphx_glr_download_gyexamples_plot_gexternal_lightgbm_reg.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_gexternal_lightgbm_reg.py <plot_gexternal_lightgbm_reg.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_gexternal_lightgbm_reg.ipynb <plot_gexternal_lightgbm_reg.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
