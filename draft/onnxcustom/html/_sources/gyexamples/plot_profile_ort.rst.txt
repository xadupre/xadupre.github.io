
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_profile_ort.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_profile_ort.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_profile_ort.py:


.. _l-profile-ort-api:

Profile onnxruntime execution
=============================

The following examples converts a model into :epkg:`ONNX` and runs it
with :epkg:`onnxruntime`. This one is then uses to profile the execution
by looking the time spent in each operator. This analysis gives some
hints on how to optimize the processing time by looking the nodes
consuming most of the ressources.

.. contents::
    :local:

Neareast Neighbours
+++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 20-35

.. code-block:: default

    import json
    import numpy
    import matplotlib.pyplot as plt
    from mpl_toolkits.axes_grid1.axes_divider import make_axes_area_auto_adjustable
    import pandas
    from onnxruntime import InferenceSession, SessionOptions, get_device
    from onnxruntime.capi._pybind_state import (  # pylint: disable=E0611
        SessionIOBinding, OrtDevice as C_OrtDevice, OrtValue as C_OrtValue)
    from sklearn.neighbors import RadiusNeighborsRegressor
    from skl2onnx import to_onnx
    from tqdm import tqdm
    from mlprodict.testing.experimental_c_impl.experimental_c import code_optimisation
    from mlprodict.plotting.plotting import onnx_simple_text_plot, plot_onnx
    from mlprodict.onnxrt.ops_whole.session import OnnxWholeSession








.. GENERATED FROM PYTHON SOURCE LINES 36-37

Available optimisation on this machine.

.. GENERATED FROM PYTHON SOURCE LINES 37-41

.. code-block:: default


    print(code_optimisation())






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    AVX-omp=8




.. GENERATED FROM PYTHON SOURCE LINES 42-44

Building the model
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 44-51

.. code-block:: default


    X = numpy.random.randn(1000, 10).astype(numpy.float64)
    y = X.sum(axis=1).reshape((-1, 1))

    model = RadiusNeighborsRegressor()
    model.fit(X, y)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    RadiusNeighborsRegressor()



.. GENERATED FROM PYTHON SOURCE LINES 52-54

Conversion to ONNX
++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: default


    onx = to_onnx(model, X, options={'optim': 'cdist'})

    print(onnx_simple_text_plot(onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=15
    opset: domain='ai.onnx.ml' version=1
    opset: domain='com.microsoft' version=1
    input: name='X' type=dtype('float64') shape=(0, 10)
    init: name='knny_ArrayFeatureExtractorcst' type=dtype('float64') shape=(1000,)
    init: name='cond_CDistcst' type=dtype('float64') shape=(10000,)
    init: name='cond_Lesscst' type=dtype('float64') shape=(1,) -- array([1.])
    init: name='arange_CumSumcst' type=dtype('int64') shape=(1,) -- array([1])
    init: name='knny_Reshapecst' type=dtype('int64') shape=(2,) -- array([  -1, 1000])
    init: name='Re_Reshapecst' type=dtype('int64') shape=(2,) -- array([-1,  1])
    CDist(X, cond_CDistcst) -> cond_dist
      Shape(cond_dist) -> arange_shape0
        ConstantOfShape(arange_shape0) -> arange_output01
          Cast(arange_output01, to=7) -> arange_output0
            CumSum(arange_output0, arange_CumSumcst) -> arange_y0
              Neg(arange_y0) -> arange_Y0
            Add(arange_Y0, arange_output0) -> arange_C0
      Less(cond_dist, cond_Lesscst) -> cond_C0
        Cast(cond_C0, to=11) -> nnbin_output0
          ReduceSum(nnbin_output0, arange_CumSumcst, keepdims=0) -> norm_reduced0
        Where(cond_C0, arange_C0, arange_output0) -> nnind_output0
          Flatten(nnind_output0) -> knny_output0
            ArrayFeatureExtractor(knny_ArrayFeatureExtractorcst, knny_output0) -> knny_Z0
              Reshape(knny_Z0, knny_Reshapecst, allowzero=0) -> knny_reshaped0
                Cast(knny_reshaped0, to=11) -> final_output0
          Mul(final_output0, nnbin_output0) -> final_C0
            ReduceSum(final_C0, arange_CumSumcst, keepdims=0) -> final_reduced0
              Shape(final_reduced0) -> normr_shape0
            Reshape(norm_reduced0, normr_shape0, allowzero=0) -> normr_reshaped0
              Div(final_reduced0, normr_reshaped0) -> Di_C0
                Reshape(Di_C0, Re_Reshapecst, allowzero=0) -> variable
    output: name='variable' type=dtype('float64') shape=(0, 1)




.. GENERATED FROM PYTHON SOURCE LINES 60-61

The ONNX graph looks like the following.

.. GENERATED FROM PYTHON SOURCE LINES 61-66

.. code-block:: default


    _, ax = plt.subplots(1, 1, figsize=(8, 15))
    plot_onnx(onx, ax=ax)





.. image-sg:: /gyexamples/images/sphx_glr_plot_profile_ort_001.png
   :alt: plot profile ort
   :srcset: /gyexamples/images/sphx_glr_plot_profile_ort_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    <AxesSubplot:>



.. GENERATED FROM PYTHON SOURCE LINES 67-73

Profiling
+++++++++

The profiling is enabled by setting attribute `enable_profling`
in :epkg:`SessionOptions`. Method *end_profiling* collects
all the results and stores it on disk in :epkg:`JSON` format.

.. GENERATED FROM PYTHON SOURCE LINES 73-86

.. code-block:: default


    so = SessionOptions()
    so.enable_profiling = True
    sess = InferenceSession(onx.SerializeToString(), so,
                            providers=['CPUExecutionProvider'])
    feeds = {'X': X[:100]}

    for i in tqdm(range(0, 10)):
        sess.run(None, feeds)

    prof = sess.end_profiling()
    print(prof)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     70%|#######   | 7/10 [00:00<00:00, 65.66it/s]    100%|##########| 10/10 [00:00<00:00, 65.15it/s]
    onnxruntime_profile__2022-03-08_02-44-53.json




.. GENERATED FROM PYTHON SOURCE LINES 87-89

Better rendering
++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 89-96

.. code-block:: default



    with open(prof, "r") as f:
        js = json.load(f)
    df = pandas.DataFrame(OnnxWholeSession.process_profiling(js))
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>cat</th>
          <th>pid</th>
          <th>tid</th>
          <th>dur</th>
          <th>ts</th>
          <th>ph</th>
          <th>name</th>
          <th>args_op_name</th>
          <th>args_thread_scheduling_stats</th>
          <th>args_activation_size</th>
          <th>args_parameter_size</th>
          <th>args_graph_index</th>
          <th>args_output_size</th>
          <th>args_provider</th>
          <th>args_exec_plan_index</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>2084</td>
          <td>6</td>
          <td>X</td>
          <td>model_loading_array</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>8176</td>
          <td>2211</td>
          <td>X</td>
          <td>session_initialization</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>1</td>
          <td>13134</td>
          <td>X</td>
          <td>cond_CDist_fence_before</td>
          <td>CDist</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>3243</td>
          <td>13152</td>
          <td>X</td>
          <td>cond_CDist_kernel_time</td>
          <td>CDist</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>8000</td>
          <td>80000</td>
          <td>0</td>
          <td>800000</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>1</td>
          <td>16430</td>
          <td>X</td>
          <td>cond_CDist_fence_after</td>
          <td>CDist</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>617</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>0</td>
          <td>166076</td>
          <td>X</td>
          <td>Re_Reshape_fence_before</td>
          <td>Reshape</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>618</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>34</td>
          <td>166080</td>
          <td>X</td>
          <td>Re_Reshape_kernel_time</td>
          <td>Reshape</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>800</td>
          <td>16</td>
          <td>20</td>
          <td>800</td>
          <td>CPUExecutionProvider</td>
          <td>20</td>
        </tr>
        <tr>
          <th>619</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>0</td>
          <td>166141</td>
          <td>X</td>
          <td>Re_Reshape_fence_after</td>
          <td>Reshape</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>620</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>14912</td>
          <td>151237</td>
          <td>X</td>
          <td>SequentialExecutor::Execute</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>621</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>14940</td>
          <td>151223</td>
          <td>X</td>
          <td>model_run</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>622 rows × 15 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 97-101

Graphs
++++++

First graph is by operator type.

.. GENERATED FROM PYTHON SOURCE LINES 101-115

.. code-block:: default


    gr_dur = df[['dur', "args_op_name"]].groupby(
        "args_op_name").sum().sort_values('dur')
    gr_n = df[['dur', "args_op_name"]].groupby(
        "args_op_name").count().sort_values('dur')
    gr_n = gr_n.loc[gr_dur.index, :]

    fig, ax = plt.subplots(1, 2, figsize=(8, 4))
    gr_dur.plot.barh(ax=ax[0])
    gr_n.plot.barh(ax=ax[1])
    ax[0].set_title("duration")
    ax[1].set_title("n occurences")
    fig.suptitle(model.__class__.__name__)




.. image-sg:: /gyexamples/images/sphx_glr_plot_profile_ort_002.png
   :alt: RadiusNeighborsRegressor, duration, n occurences
   :srcset: /gyexamples/images/sphx_glr_plot_profile_ort_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 0.98, 'RadiusNeighborsRegressor')



.. GENERATED FROM PYTHON SOURCE LINES 116-117

Second graph is by operator name.

.. GENERATED FROM PYTHON SOURCE LINES 117-122

.. code-block:: default


    gr_dur = df[['dur', "args_op_name", "name"]].groupby(
        ["args_op_name", "name"]).sum().sort_values('dur')
    gr_dur.head(n=5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>dur</th>
        </tr>
        <tr>
          <th>args_op_name</th>
          <th>name</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Add</th>
          <th>arange_Add_fence_after</th>
          <td>0</td>
        </tr>
        <tr>
          <th rowspan="3" valign="top">Reshape</th>
          <th>knny_Reshape_fence_after</th>
          <td>0</td>
        </tr>
        <tr>
          <th>Re_Reshape_fence_before</th>
          <td>0</td>
        </tr>
        <tr>
          <th>Re_Reshape_fence_after</th>
          <td>0</td>
        </tr>
        <tr>
          <th>ReduceSum</th>
          <th>norm_ReduceSum_fence_before</th>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 123-124

And the graph.

.. GENERATED FROM PYTHON SOURCE LINES 124-132

.. code-block:: default


    _, ax = plt.subplots(1, 1, figsize=(8, gr_dur.shape[0] // 2))
    gr_dur.plot.barh(ax=ax)
    ax.set_title("duration per node")
    for label in (ax.get_xticklabels() + ax.get_yticklabels()):
        label.set_fontsize(7)
    make_axes_area_auto_adjustable(ax)




.. image-sg:: /gyexamples/images/sphx_glr_plot_profile_ort_003.png
   :alt: duration per node
   :srcset: /gyexamples/images/sphx_glr_plot_profile_ort_003.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 133-135

The model spends most of its time in CumSum operator.
Operator Shape gets called the highest number of times.

.. GENERATED FROM PYTHON SOURCE LINES 135-139

.. code-block:: default



    # plt.show()








.. GENERATED FROM PYTHON SOURCE LINES 140-142

GPU or CPU
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 142-159

.. code-block:: default


    if get_device().upper() == 'GPU':
        ort_device = C_OrtDevice(
            C_OrtDevice.cuda(), C_OrtDevice.default_memory(), 0)
    else:
        ort_device = C_OrtDevice(
            C_OrtDevice.cpu(), C_OrtDevice.default_memory(), 0)

    # session
    sess = InferenceSession(onx.SerializeToString(), so,
                            providers=['CPUExecutionProvider',
                                       'CUDAExecutionProvider'])
    bind = SessionIOBinding(sess._sess)

    # moving the data on CPU or GPU
    ort_value = C_OrtValue.ortvalue_from_numpy(X, ort_device)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    /var/lib/jenkins/workspace/onnxcustom/onnxcustom_UT_39_std/_venv/lib/python3.9/site-packages/onnxruntime/capi/onnxruntime_inference_collection.py:55: UserWarning: Specified provider 'CUDAExecutionProvider' is not in available provider names.Available providers: 'CPUExecutionProvider'
      warnings.warn("Specified provider '{}' is not in available provider names."




.. GENERATED FROM PYTHON SOURCE LINES 160-161

A function which calls the API for any device.

.. GENERATED FROM PYTHON SOURCE LINES 161-171

.. code-block:: default



    def run_with_iobinding(sess, bind, ort_device, ort_value, dtype):
        bind.bind_input('X', ort_device, dtype, ort_value.shape(),
                        ort_value.data_ptr())
        bind.bind_output('variable', ort_device)
        sess._sess.run_with_iobinding(bind, None)
        ortvalues = bind.get_outputs()
        return ortvalues[0].numpy()








.. GENERATED FROM PYTHON SOURCE LINES 172-173

The profiling.

.. GENERATED FROM PYTHON SOURCE LINES 173-184

.. code-block:: default



    for i in tqdm(range(0, 10)):
        run_with_iobinding(sess, bind, ort_device, ort_value, X.dtype)

    prof = sess.end_profiling()
    with open(prof, "r") as f:
        js = json.load(f)
    df = pandas.DataFrame(OnnxWholeSession.process_profiling(js))
    df





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:00<00:01,  7.20it/s]     20%|##        | 2/10 [00:00<00:01,  7.52it/s]     30%|###       | 3/10 [00:00<00:00,  7.63it/s]     40%|####      | 4/10 [00:00<00:00,  7.69it/s]     50%|#####     | 5/10 [00:00<00:00,  7.72it/s]     60%|######    | 6/10 [00:00<00:00,  7.73it/s]     70%|#######   | 7/10 [00:00<00:00,  7.74it/s]     80%|########  | 8/10 [00:01<00:00,  7.75it/s]     90%|######### | 9/10 [00:01<00:00,  7.76it/s]    100%|##########| 10/10 [00:01<00:00,  7.76it/s]    100%|##########| 10/10 [00:01<00:00,  7.70it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>cat</th>
          <th>pid</th>
          <th>tid</th>
          <th>dur</th>
          <th>ts</th>
          <th>ph</th>
          <th>name</th>
          <th>args_op_name</th>
          <th>args_thread_scheduling_stats</th>
          <th>args_activation_size</th>
          <th>args_parameter_size</th>
          <th>args_graph_index</th>
          <th>args_output_size</th>
          <th>args_provider</th>
          <th>args_exec_plan_index</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>1107</td>
          <td>7</td>
          <td>X</td>
          <td>model_loading_array</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>1</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>7538</td>
          <td>1217</td>
          <td>X</td>
          <td>session_initialization</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>2</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>1</td>
          <td>16948</td>
          <td>X</td>
          <td>cond_CDist_fence_before</td>
          <td>CDist</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>3</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>26295</td>
          <td>16960</td>
          <td>X</td>
          <td>cond_CDist_kernel_time</td>
          <td>CDist</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>80000</td>
          <td>80000</td>
          <td>0</td>
          <td>8000000</td>
          <td>CPUExecutionProvider</td>
          <td>0</td>
        </tr>
        <tr>
          <th>4</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>0</td>
          <td>43280</td>
          <td>X</td>
          <td>cond_CDist_fence_after</td>
          <td>CDist</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>617</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>0</td>
          <td>1314016</td>
          <td>X</td>
          <td>Re_Reshape_fence_before</td>
          <td>Reshape</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>618</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>35</td>
          <td>1314020</td>
          <td>X</td>
          <td>Re_Reshape_kernel_time</td>
          <td>Reshape</td>
          <td>{'main_thread': {'thread_pool_name': 'session-...</td>
          <td>8000</td>
          <td>16</td>
          <td>20</td>
          <td>8000</td>
          <td>CPUExecutionProvider</td>
          <td>20</td>
        </tr>
        <tr>
          <th>619</th>
          <td>Node</td>
          <td>17150</td>
          <td>17150</td>
          <td>0</td>
          <td>1314070</td>
          <td>X</td>
          <td>Re_Reshape_fence_after</td>
          <td>Reshape</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>620</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>127331</td>
          <td>1186747</td>
          <td>X</td>
          <td>SequentialExecutor::Execute</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
        <tr>
          <th>621</th>
          <td>Session</td>
          <td>17150</td>
          <td>17150</td>
          <td>127377</td>
          <td>1186716</td>
          <td>X</td>
          <td>model_run</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
          <td>NaN</td>
        </tr>
      </tbody>
    </table>
    <p>622 rows × 15 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 185-186

First graph is by operator type.

.. GENERATED FROM PYTHON SOURCE LINES 186-200

.. code-block:: default


    gr_dur = df[['dur', "args_op_name"]].groupby(
        "args_op_name").sum().sort_values('dur')
    gr_n = df[['dur', "args_op_name"]].groupby(
        "args_op_name").count().sort_values('dur')
    gr_n = gr_n.loc[gr_dur.index, :]

    fig, ax = plt.subplots(1, 2, figsize=(8, 4))
    gr_dur.plot.barh(ax=ax[0])
    gr_n.plot.barh(ax=ax[1])
    ax[0].set_title("duration")
    ax[1].set_title("n occurences")
    fig.suptitle(model.__class__.__name__)




.. image-sg:: /gyexamples/images/sphx_glr_plot_profile_ort_004.png
   :alt: RadiusNeighborsRegressor, duration, n occurences
   :srcset: /gyexamples/images/sphx_glr_plot_profile_ort_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 0.98, 'RadiusNeighborsRegressor')



.. GENERATED FROM PYTHON SOURCE LINES 201-202

Second graph is by operator name.

.. GENERATED FROM PYTHON SOURCE LINES 202-207

.. code-block:: default


    gr_dur = df[['dur', "args_op_name", "name"]].groupby(
        ["args_op_name", "name"]).sum().sort_values('dur')
    gr_dur.head(n=5)






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th></th>
          <th>dur</th>
        </tr>
        <tr>
          <th>args_op_name</th>
          <th>name</th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>Flatten</th>
          <th>knny_Flatten_fence_after</th>
          <td>0</td>
        </tr>
        <tr>
          <th rowspan="3" valign="top">Reshape</th>
          <th>knny_Reshape_fence_after</th>
          <td>0</td>
        </tr>
        <tr>
          <th>Re_Reshape_fence_before</th>
          <td>0</td>
        </tr>
        <tr>
          <th>Re_Reshape_fence_after</th>
          <td>0</td>
        </tr>
        <tr>
          <th>Div</th>
          <th>Di_Div_fence_after</th>
          <td>0</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 208-209

And the graph.

.. GENERATED FROM PYTHON SOURCE LINES 209-217

.. code-block:: default


    _, ax = plt.subplots(1, 1, figsize=(8, gr_dur.shape[0] // 2))
    gr_dur.plot.barh(ax=ax)
    ax.set_title("duration per node")
    for label in (ax.get_xticklabels() + ax.get_yticklabels()):
        label.set_fontsize(7)
    make_axes_area_auto_adjustable(ax)




.. image-sg:: /gyexamples/images/sphx_glr_plot_profile_ort_005.png
   :alt: duration per node
   :srcset: /gyexamples/images/sphx_glr_plot_profile_ort_005.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 218-219

It shows the same results.

.. GENERATED FROM PYTHON SOURCE LINES 219-221

.. code-block:: default


    # plt.show()








.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  24.564 seconds)


.. _sphx_glr_download_gyexamples_plot_profile_ort.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_profile_ort.py <plot_profile_ort.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_profile_ort.ipynb <plot_profile_ort.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
