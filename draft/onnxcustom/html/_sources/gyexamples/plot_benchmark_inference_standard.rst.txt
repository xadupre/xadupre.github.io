
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_benchmark_inference_standard.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_benchmark_inference_standard.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_benchmark_inference_standard.py:


.. _benchmark-inference-sklearn:

Benchmark inference for scikit-learn models
===========================================

This short code compares the execution of a couple of runtime
for inference including :epkg:`onnxruntime`. It uses examples
`Measure ONNX runtime performances
<http://www.xavierdupre.fr/app/mlprodict/helpsphinx/
gyexamples/plot_onnx_benchmark.html>`_. It is an automated process
to compare the performance of a model against :epkg:`scikit-learn`.
This model is a simple model taken from all implemented by
:epkg:`scikit-learn`.

.. contents::
    :local:

Linear Regression
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 23-49

.. code-block:: default

    from pandas import read_csv
    from mlprodict.cli import validate_runtime
    from mlprodict.plotting.plotting import plot_validate_benchmark

    res = validate_runtime(
        verbose=1,
        out_raw="data.csv", out_summary="summary.csv",
        benchmark=True, dump_folder="dump_errors",
        runtime=['python', 'onnxruntime1'],
        models=['LinearRegression'],
        skip_models=['LinearRegression[m-reg]'],
        n_features=[10, 50], dtype="32",
        out_graph="bench.png",
        opset_min=15, opset_max=15,
        time_kwargs={
            1: {"number": 50, "repeat": 50},
            10: {"number": 25, "repeat": 25},
            100: {"number": 20, "repeat": 20},
            1000: {"number": 20, "repeat": 20},
            10000: {"number": 10, "repeat": 10},
        }
    )

    results = read_csv('summary.csv')
    results




.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_inference_standard_001.png
   :alt: RT/SKL-N=1, N=10, N=100, N=1000, N=10000
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_inference_standard_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    time_kwargs={1: {'number': 50, 'repeat': 50}, 10: {'number': 25, 'repeat': 25}, 100: {'number': 20, 'repeat': 20}, 1000: {'number': 20, 'repeat': 20}, 10000: {'number': 10, 'repeat': 10}}
    [enumerate_validated_operator_opsets] opset in [15, 15].
      0%|          | 0/1 [00:00<?, ?it/s]    LinearRegression            :   0%|          | 0/1 [00:00<?, ?it/s][enumerate_compatible_opset] opset in [15, 15].
    LinearRegression            : 100%|##########| 1/1 [00:40<00:00, 40.77s/it]    LinearRegression            : 100%|##########| 1/1 [00:40<00:00, 40.78s/it]
    Saving raw_data into 'data.csv'.
    Saving summary into 'summary.csv'.
    Saving graph into 'bench.png'.
    findfont: Font family ['STIXGeneral'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXGeneral'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXGeneral'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXNonUnicode'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXNonUnicode'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXNonUnicode'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXSizeOneSym'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXSizeTwoSym'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXSizeThreeSym'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXSizeFourSym'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['STIXSizeFiveSym'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['cmsy10'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['cmr10'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['cmtt10'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['cmmi10'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['cmb10'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['cmss10'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['cmex10'] not found. Falling back to DejaVu Sans.
    findfont: Font family ['DejaVu Sans Display'] not found. Falling back to DejaVu Sans.


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>name</th>
          <th>problem</th>
          <th>scenario</th>
          <th>optim</th>
          <th>method_name</th>
          <th>output_index</th>
          <th>conv_options</th>
          <th>inst</th>
          <th>n_features</th>
          <th>runtime</th>
          <th>skl_version</th>
          <th>skl_nop</th>
          <th>skl_ncoef</th>
          <th>skl_nlin</th>
          <th>onx_size</th>
          <th>onx_nnodes</th>
          <th>onx_ninits</th>
          <th>onx_producer_name</th>
          <th>onx_producer_version</th>
          <th>onx_ai.onnx.ml</th>
          <th>onx_size_optim</th>
          <th>onx_nnodes_optim</th>
          <th>onx_ninits_optim</th>
          <th>opset15</th>
          <th>RT/SKL-N=1</th>
          <th>N=10</th>
          <th>N=100</th>
          <th>N=1000</th>
          <th>N=10000</th>
          <th>RT/SKL-N=1-min</th>
          <th>RT/SKL-N=1-max</th>
          <th>N=10-min</th>
          <th>N=10-max</th>
          <th>N=100-min</th>
          <th>N=100-max</th>
          <th>N=1000-min</th>
          <th>N=1000-max</th>
          <th>N=10000-min</th>
          <th>N=10000-max</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>LinearRegression</td>
          <td>b-reg</td>
          <td>default</td>
          <td>NaN</td>
          <td>predict</td>
          <td>0</td>
          <td>{}</td>
          <td>NaN</td>
          <td>10</td>
          <td>onnxruntime1</td>
          <td>1.0.2</td>
          <td>1</td>
          <td>10</td>
          <td>1</td>
          <td>288</td>
          <td>1</td>
          <td>0</td>
          <td>skl2onnx</td>
          <td>1.11</td>
          <td>1</td>
          <td>288</td>
          <td>1</td>
          <td>0</td>
          <td>OK 15/1</td>
          <td>0.700963</td>
          <td>0.713135</td>
          <td>0.720735</td>
          <td>1.007996</td>
          <td>2.071347</td>
          <td>0.646313</td>
          <td>0.858745</td>
          <td>0.684352</td>
          <td>1.286767</td>
          <td>0.713765</td>
          <td>0.759072</td>
          <td>0.990734</td>
          <td>1.015034</td>
          <td>2.017907</td>
          <td>2.100248</td>
        </tr>
        <tr>
          <th>1</th>
          <td>LinearRegression</td>
          <td>b-reg</td>
          <td>default</td>
          <td>NaN</td>
          <td>predict</td>
          <td>0</td>
          <td>{}</td>
          <td>NaN</td>
          <td>10</td>
          <td>python</td>
          <td>1.0.2</td>
          <td>1</td>
          <td>10</td>
          <td>1</td>
          <td>288</td>
          <td>1</td>
          <td>0</td>
          <td>skl2onnx</td>
          <td>1.11</td>
          <td>1</td>
          <td>288</td>
          <td>1</td>
          <td>0</td>
          <td>OK 15/1</td>
          <td>0.412429</td>
          <td>0.409111</td>
          <td>0.414968</td>
          <td>0.442972</td>
          <td>0.554032</td>
          <td>0.396090</td>
          <td>0.421306</td>
          <td>0.407047</td>
          <td>0.410657</td>
          <td>0.411942</td>
          <td>0.418201</td>
          <td>0.432090</td>
          <td>0.467094</td>
          <td>0.541209</td>
          <td>0.562949</td>
        </tr>
        <tr>
          <th>2</th>
          <td>LinearRegression</td>
          <td>b-reg</td>
          <td>default</td>
          <td>NaN</td>
          <td>predict</td>
          <td>0</td>
          <td>{}</td>
          <td>NaN</td>
          <td>50</td>
          <td>onnxruntime1</td>
          <td>1.0.2</td>
          <td>1</td>
          <td>50</td>
          <td>1</td>
          <td>489</td>
          <td>1</td>
          <td>0</td>
          <td>skl2onnx</td>
          <td>1.11</td>
          <td>1</td>
          <td>489</td>
          <td>1</td>
          <td>0</td>
          <td>OK 15/1</td>
          <td>0.708293</td>
          <td>0.688762</td>
          <td>0.795733</td>
          <td>2.117726</td>
          <td>2.658230</td>
          <td>0.677977</td>
          <td>0.835150</td>
          <td>0.658404</td>
          <td>1.226313</td>
          <td>0.787257</td>
          <td>0.834253</td>
          <td>2.076018</td>
          <td>2.148842</td>
          <td>2.622809</td>
          <td>2.690103</td>
        </tr>
        <tr>
          <th>3</th>
          <td>LinearRegression</td>
          <td>b-reg</td>
          <td>default</td>
          <td>NaN</td>
          <td>predict</td>
          <td>0</td>
          <td>{}</td>
          <td>NaN</td>
          <td>50</td>
          <td>python</td>
          <td>1.0.2</td>
          <td>1</td>
          <td>50</td>
          <td>1</td>
          <td>489</td>
          <td>1</td>
          <td>0</td>
          <td>skl2onnx</td>
          <td>1.11</td>
          <td>1</td>
          <td>489</td>
          <td>1</td>
          <td>0</td>
          <td>OK 15/1</td>
          <td>0.402319</td>
          <td>0.399174</td>
          <td>0.409233</td>
          <td>0.441200</td>
          <td>0.539927</td>
          <td>0.397949</td>
          <td>0.403915</td>
          <td>0.397709</td>
          <td>0.400972</td>
          <td>0.406222</td>
          <td>0.412706</td>
          <td>0.430927</td>
          <td>0.448560</td>
          <td>0.529116</td>
          <td>0.554031</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 50-51

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 51-57

.. code-block:: default


    _, ax = plot_validate_benchmark(results)
    ax

    # import matplotlib.pyplot as plt
    # plt.show()



.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_inference_standard_002.png
   :alt: RT/SKL-N=1, N=10, N=100, N=1000, N=10000
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_inference_standard_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    array([<AxesSubplot:title={'center':'RT/SKL-N=1'}>,
           <AxesSubplot:title={'center':'N=10'}>,
           <AxesSubplot:title={'center':'N=100'}>,
           <AxesSubplot:title={'center':'N=1000'}>,
           <AxesSubplot:title={'center':'N=10000'}>], dtype=object)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  57.007 seconds)


.. _sphx_glr_download_gyexamples_plot_benchmark_inference_standard.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_benchmark_inference_standard.py <plot_benchmark_inference_standard.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_benchmark_inference_standard.ipynb <plot_benchmark_inference_standard.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
