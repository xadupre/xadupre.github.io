
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "gyexamples/plot_benchmark_onnx_function.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_gyexamples_plot_benchmark_onnx_function.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_gyexamples_plot_benchmark_onnx_function.py:


.. _benchmark-inference-onnx-function:

Compares numpy to onnxruntime on simple functions
=================================================

:epkg:`onnxruntime` can be used a replacement to :epkg:`numpy`.
It can be used to implement a training algorithm,
:epkg:`onnxruntime-training` differentiate an onnx graph and
runs it to compute the gradient. Simple functions are implemented
in ONNX and ran with :epkg:`onnxruntime` to update the weights.
:func:`function_onnx_graph
<onnxcustom.utils.onnx_function.function_onnx_graph>` returns many
functions used to implement a training algorithm.
The following benchmarks compares a couple of implementations:

* `numpy`: an implementation based on numpy, not optimized
* `sess`: inference through an ONNX graph executed with
  method `onnxruntime.InferenceSession.run`
* `bind`: inference through an ONNX graph executed with
  method `onnxruntime.InferenceSession.run_with_iobinding`
* `run`: inference through an ONNX graph executed with
  method `onnxruntime.InferenceSession.run_with_iobinding`
  but without counting the binding assuming input buffers
  are reused and do not need binding again

.. contents::
    :local:

axpy
++++

This function implements :math:`Y = f(X1, X2, \alpha) = \alpha X1 + X2`.

.. GENERATED FROM PYTHON SOURCE LINES 36-52

.. code-block:: default

    import numpy
    from scipy.special import expit
    import pandas
    from tqdm import tqdm
    from cpyquickhelper.numbers.speed_measure import measure_time
    import matplotlib.pyplot as plt
    from onnxruntime import InferenceSession
    from onnxruntime.capi._pybind_state import (  # pylint: disable=E0611
        SessionIOBinding, OrtDevice as C_OrtDevice,
        OrtValue as C_OrtValue)
    from mlprodict.plotting.text_plot import onnx_simple_text_plot
    from onnxcustom.utils.onnx_function import function_onnx_graph

    fct_onx = function_onnx_graph("axpy")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=14
    input: name='X1' type=dtype('float32') shape=()
    input: name='X2' type=dtype('float32') shape=()
    input: name='alpha' type=dtype('float32') shape=(1,)
    Mul(X1, alpha) -> Mu_C0
      Add(Mu_C0, X2) -> Y
    output: name='Y' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 53-54

The numpy implementation is the following.

.. GENERATED FROM PYTHON SOURCE LINES 54-57

.. code-block:: default


    fct_numpy = lambda X1, X2, alpha: X1 * alpha + X2








.. GENERATED FROM PYTHON SOURCE LINES 58-59

The benchmark

.. GENERATED FROM PYTHON SOURCE LINES 59-122

.. code-block:: default



    def reshape(a, dim):
        if len(a.shape) == 2:
            return a[:dim].copy()
        return a


    def bind_and_run(sess, bind, names, args, out_names, device):
        for n, a in zip(names, args):
            bind.bind_ortvalue_input(n, a)
        for o in out_names:
            bind.bind_output(o, device)
        sess.run_with_iobinding(bind, None)
        return bind.get_outputs()


    def nobind_just_run(sess, bind):
        sess.run_with_iobinding(bind, None)


    def benchmark(name, onx, fct_numpy, *args,
                  dims=(1, 10, 100, 200, 500, 1000, 2000, 10000)):
        sess = InferenceSession(onx.SerializeToString())
        device = C_OrtDevice(
            C_OrtDevice.cpu(), C_OrtDevice.default_memory(), 0)
        names = [i.name for i in sess.get_inputs()]
        out_names = [o.name for o in sess.get_outputs()]
        if len(names) != len(args):
            raise RuntimeError(
                "Size mismatch %d != %d." % (len(names), len(args)))

        rows = []
        for dim in tqdm(dims):
            new_args = [reshape(a, dim) for a in args]
            ortvalues = [
                C_OrtValue.ortvalue_from_numpy(a, device)
                for a in new_args]

            ms = measure_time(lambda: fct_numpy(*new_args),
                              repeat=50, number=100)
            ms.update(dict(name=name, impl='numpy', dim=dim))
            rows.append(ms)

            inps = {n: a for n, a in zip(names, new_args)}
            ms = measure_time(lambda: sess.run(None, inps))
            ms.update(dict(name=name, impl='sess', dim=dim))
            rows.append(ms)

            bind = SessionIOBinding(sess._sess)
            ms = measure_time(
                lambda: bind_and_run(
                    sess._sess, bind, names, ortvalues, out_names, device))
            ms.update(dict(name=name, impl='bind_run', dim=dim))
            rows.append(ms)

            ms = measure_time(
                lambda: nobind_just_run(sess._sess, bind))
            ms.update(dict(name=name, impl='run', dim=dim))
            rows.append(ms)

        return rows








.. GENERATED FROM PYTHON SOURCE LINES 123-124

Back to function axpy.

.. GENERATED FROM PYTHON SOURCE LINES 124-137

.. code-block:: default



    rows = benchmark(
        'axpy', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.array([0.5], dtype=numpy.float32))

    all_rows = []
    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:01,  4.46it/s]     25%|##5       | 2/8 [00:00<00:01,  4.42it/s]     38%|###7      | 3/8 [00:00<00:01,  4.07it/s]     50%|#####     | 4/8 [00:00<00:01,  3.88it/s]     62%|######2   | 5/8 [00:01<00:00,  3.62it/s]     75%|#######5  | 6/8 [00:01<00:00,  3.23it/s]     88%|########7 | 7/8 [00:02<00:00,  3.02it/s]    100%|##########| 8/8 [00:02<00:00,  2.90it/s]    100%|##########| 8/8 [00:02<00:00,  3.29it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.004020</td>
          <td>0.002472</td>
          <td>0.001767</td>
          <td>0.003834</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.004144</td>
          <td>0.002464</td>
          <td>0.001897</td>
          <td>0.003902</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.004209</td>
          <td>0.003188</td>
          <td>0.001983</td>
          <td>0.004204</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.004304</td>
          <td>0.003303</td>
          <td>0.002080</td>
          <td>0.004269</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.004564</td>
          <td>0.003738</td>
          <td>0.002329</td>
          <td>0.004624</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.005001</td>
          <td>0.004787</td>
          <td>0.002745</td>
          <td>0.005261</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.004988</td>
          <td>0.004789</td>
          <td>0.002764</td>
          <td>0.005207</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.005004</td>
          <td>0.004765</td>
          <td>0.002741</td>
          <td>0.005211</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 138-139

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 139-145

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_001.png
   :alt: axpy lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'axpy\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 146-152

axpyw
+++++

It does :math:`Y, Z = f(X1, X2, G, \alpha, \beta) = (Y, Z)`
where :math:`Z = \beta G + \alpha X1` and
:math:`Y = Z + X2`.

.. GENERATED FROM PYTHON SOURCE LINES 152-157

.. code-block:: default



    fct_onx = function_onnx_graph("axpyw")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=14
    input: name='X1' type=dtype('float32') shape=()
    input: name='X2' type=dtype('float32') shape=()
    input: name='G' type=dtype('float32') shape=()
    input: name='alpha' type=dtype('float32') shape=(1,)
    input: name='beta' type=dtype('float32') shape=(1,)
    Mul(X1, alpha) -> Mu_C0
    Mul(G, beta) -> Mu_C02
      Add(Mu_C0, Mu_C02) -> Z
        Add(Z, X2) -> Y
    output: name='Y' type=dtype('float32') shape=()
    output: name='Z' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 158-159

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 159-175

.. code-block:: default


    fct_numpy = lambda x1, x2, g, alpha, beta: (
        x1 * alpha + x2 + beta * g, x1 * alpha + beta * g)

    rows = benchmark(
        'axpyw', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.array([0.5], dtype=numpy.float32),
        numpy.array([0.5], dtype=numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:03,  1.90it/s]     25%|##5       | 2/8 [00:01<00:03,  1.89it/s]     38%|###7      | 3/8 [00:01<00:02,  1.71it/s]     50%|#####     | 4/8 [00:02<00:02,  1.59it/s]     62%|######2   | 5/8 [00:03<00:02,  1.44it/s]     75%|#######5  | 6/8 [00:04<00:01,  1.25it/s]     88%|########7 | 7/8 [00:05<00:00,  1.15it/s]    100%|##########| 8/8 [00:06<00:00,  1.10it/s]    100%|##########| 8/8 [00:06<00:00,  1.28it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.005410</td>
          <td>0.008006</td>
          <td>0.002002</td>
          <td>0.004804</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.005511</td>
          <td>0.008061</td>
          <td>0.002049</td>
          <td>0.004867</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.005652</td>
          <td>0.010279</td>
          <td>0.002217</td>
          <td>0.005257</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.005859</td>
          <td>0.011089</td>
          <td>0.002417</td>
          <td>0.005517</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.006377</td>
          <td>0.012870</td>
          <td>0.002917</td>
          <td>0.006208</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.007307</td>
          <td>0.016126</td>
          <td>0.003762</td>
          <td>0.007902</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.007499</td>
          <td>0.016227</td>
          <td>0.003889</td>
          <td>0.007580</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.007290</td>
          <td>0.016235</td>
          <td>0.003779</td>
          <td>0.007562</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 176-177

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 177-183

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_002.png
   :alt: axpyw lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_002.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'axpyw\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 184-190

axpyw2
++++++

It implements :math:`Y, Z = f(X1, X2, G, \alpha, \beta) = (Y, Z)`
where :math:`Z = \beta G + \alpha X1` and
:math:`Y = \beta * Z + \alpha X1 + X2`.

.. GENERATED FROM PYTHON SOURCE LINES 190-194

.. code-block:: default


    fct_onx = function_onnx_graph("axpyw2")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=14
    input: name='X1' type=dtype('float32') shape=()
    input: name='X2' type=dtype('float32') shape=()
    input: name='G' type=dtype('float32') shape=()
    input: name='alpha' type=dtype('float32') shape=(1,)
    input: name='beta' type=dtype('float32') shape=(1,)
    Mul(X1, alpha) -> Mu_C0
    Mul(G, beta) -> Mu_C03
      Add(Mu_C0, Mu_C03) -> Z
        Mul(Z, beta) -> Mu_C02
      Add(Mu_C0, Mu_C02) -> Ad_C0
        Add(Ad_C0, X2) -> Y
    output: name='Y' type=dtype('float32') shape=()
    output: name='Z' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 195-196

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 196-214

.. code-block:: default


    fct_numpy = lambda x1, x2, g, alpha, beta: (
        x1 * alpha + x2 + beta * (x1 * alpha + beta * g),
        x1 * alpha + beta * g)

    rows = benchmark(
        'axpyw2', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.array([0.5], dtype=numpy.float32),
        numpy.array([0.5], dtype=numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:04,  1.42it/s]     25%|##5       | 2/8 [00:01<00:04,  1.42it/s]     38%|###7      | 3/8 [00:02<00:03,  1.27it/s]     50%|#####     | 4/8 [00:03<00:03,  1.18it/s]     62%|######2   | 5/8 [00:04<00:02,  1.06it/s]     75%|#######5  | 6/8 [00:05<00:02,  1.09s/it]     88%|########7 | 7/8 [00:07<00:01,  1.20s/it]    100%|##########| 8/8 [00:08<00:00,  1.27s/it]    100%|##########| 8/8 [00:08<00:00,  1.07s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.005715</td>
          <td>0.011349</td>
          <td>0.002276</td>
          <td>0.005124</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.005753</td>
          <td>0.011395</td>
          <td>0.002312</td>
          <td>0.005138</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.006031</td>
          <td>0.014726</td>
          <td>0.002566</td>
          <td>0.005628</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.006341</td>
          <td>0.015799</td>
          <td>0.002866</td>
          <td>0.006004</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.007087</td>
          <td>0.018475</td>
          <td>0.003629</td>
          <td>0.007236</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.008660</td>
          <td>0.023100</td>
          <td>0.004913</td>
          <td>0.008972</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.008596</td>
          <td>0.023859</td>
          <td>0.004916</td>
          <td>0.009152</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.008592</td>
          <td>0.023808</td>
          <td>0.004910</td>
          <td>0.009274</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 215-219

copy
++++

It implements a copy.

.. GENERATED FROM PYTHON SOURCE LINES 219-223

.. code-block:: default


    fct_onx = function_onnx_graph("copy")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=15
    input: name='X' type=dtype('float32') shape=()
    Identity(X) -> Y
    output: name='Y' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 224-225

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 225-236

.. code-block:: default


    fct_numpy = lambda x: x.copy()

    rows = benchmark(
        'copy', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:00,  9.82it/s]     25%|##5       | 2/8 [00:00<00:00,  9.80it/s]     38%|###7      | 3/8 [00:00<00:00,  9.28it/s]     50%|#####     | 4/8 [00:00<00:00,  8.91it/s]     62%|######2   | 5/8 [00:00<00:00,  8.43it/s]     75%|#######5  | 6/8 [00:00<00:00,  7.76it/s]     88%|########7 | 7/8 [00:00<00:00,  7.38it/s]    100%|##########| 8/8 [00:01<00:00,  7.18it/s]    100%|##########| 8/8 [00:01<00:00,  7.89it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.002721</td>
          <td>0.000649</td>
          <td>0.001098</td>
          <td>0.002707</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.002737</td>
          <td>0.000627</td>
          <td>0.001103</td>
          <td>0.002724</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.002757</td>
          <td>0.000836</td>
          <td>0.001135</td>
          <td>0.002853</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.002794</td>
          <td>0.000900</td>
          <td>0.001172</td>
          <td>0.002910</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.002894</td>
          <td>0.001054</td>
          <td>0.001247</td>
          <td>0.003066</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.002964</td>
          <td>0.001348</td>
          <td>0.001341</td>
          <td>0.003318</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.002971</td>
          <td>0.001361</td>
          <td>0.001360</td>
          <td>0.003253</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.002981</td>
          <td>0.001324</td>
          <td>0.001353</td>
          <td>0.003254</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 237-238

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 238-244

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_003.png
   :alt: copy lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_003.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'copy\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 245-249

grad_loss_absolute_error
++++++++++++++++++++++++

It implements :math:`Y = f(X1, X2) = \lVert X1 - X2 \rVert`.

.. GENERATED FROM PYTHON SOURCE LINES 249-253

.. code-block:: default


    fct_onx = function_onnx_graph("grad_loss_absolute_error")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=14
    input: name='X1' type=dtype('float32') shape=(0, 0)
    input: name='X2' type=dtype('float32') shape=(0, 0)
    init: name='Re_Reshapecst' type=dtype('int64') shape=(1,) -- array([-1])
    Sub(X1, X2) -> Su_C0
      Sign(Su_C0) -> Y_grad
      Abs(Su_C0) -> Ab_Y0
        ReduceSum(Ab_Y0) -> Re_reduced0
          Reshape(Re_reduced0, Re_Reshapecst) -> Y
    output: name='Y' type=dtype('float32') shape=()
    output: name='Y_grad' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 254-255

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 255-268

.. code-block:: default


    fct_numpy = lambda x1, x2: (
        numpy.abs(x1 - x2).sum(), numpy.sign(x1 - x2))

    rows = benchmark(
        'grad_loss_absolute_error', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:02,  2.56it/s]     25%|##5       | 2/8 [00:00<00:02,  2.55it/s]     38%|###7      | 3/8 [00:01<00:02,  2.26it/s]     50%|#####     | 4/8 [00:01<00:01,  2.04it/s]     62%|######2   | 5/8 [00:02<00:01,  1.74it/s]     75%|#######5  | 6/8 [00:03<00:01,  1.38it/s]     88%|########7 | 7/8 [00:04<00:00,  1.21it/s]    100%|##########| 8/8 [00:05<00:00,  1.12it/s]    100%|##########| 8/8 [00:05<00:00,  1.41it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.004892</td>
          <td>0.005378</td>
          <td>0.002343</td>
          <td>0.004455</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.004940</td>
          <td>0.005400</td>
          <td>0.002387</td>
          <td>0.004474</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.005286</td>
          <td>0.007336</td>
          <td>0.002758</td>
          <td>0.005016</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.005728</td>
          <td>0.008320</td>
          <td>0.003188</td>
          <td>0.005466</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.006940</td>
          <td>0.010785</td>
          <td>0.004406</td>
          <td>0.006787</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.008976</td>
          <td>0.015394</td>
          <td>0.006398</td>
          <td>0.008920</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.009048</td>
          <td>0.015723</td>
          <td>0.006436</td>
          <td>0.008967</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.009012</td>
          <td>0.015590</td>
          <td>0.006411</td>
          <td>0.008881</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 269-270

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 270-276

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_004.png
   :alt: grad_loss_absolute_error lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_004.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'grad_loss_absolute_error\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 277-281

grad_loss_square_error
++++++++++++++++++++++

It implements :math:`Y = f(X1, X2) = \lVert X1 - X2 \rVert^2`.

.. GENERATED FROM PYTHON SOURCE LINES 281-285

.. code-block:: default


    fct_onx = function_onnx_graph("grad_loss_square_error")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=14
    input: name='X1' type=dtype('float32') shape=(0, 0)
    input: name='X2' type=dtype('float32') shape=(0, 0)
    init: name='Mu_Mulcst' type=dtype('float32') shape=(1,) -- array([1.], dtype=float32)
    init: name='Re_Reshapecst' type=dtype('int64') shape=(1,) -- array([-1])
    init: name='Mu_Mulcst1' type=dtype('float32') shape=(1,) -- array([-2.], dtype=float32)
    Sub(X1, X2) -> Su_C0
      Mul(Su_C0, Mu_Mulcst1) -> Y_grad
    ReduceSumSquare(Su_C0) -> Re_reduced0
      Mul(Re_reduced0, Mu_Mulcst) -> Mu_C0
        Reshape(Mu_C0, Re_Reshapecst) -> Y
    output: name='Y' type=dtype('float32') shape=()
    output: name='Y_grad' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 286-287

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 287-300

.. code-block:: default


    fct_numpy = lambda x1, x2: (
        ((x1 - x2) ** 2).sum(), (x1 - x2) * (-2))

    rows = benchmark(
        'grad_loss_square_error', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:03,  2.17it/s]     25%|##5       | 2/8 [00:00<00:02,  2.16it/s]     38%|###7      | 3/8 [00:01<00:02,  1.97it/s]     50%|#####     | 4/8 [00:02<00:02,  1.88it/s]     62%|######2   | 5/8 [00:02<00:01,  1.74it/s]     75%|#######5  | 6/8 [00:03<00:01,  1.54it/s]     88%|########7 | 7/8 [00:04<00:00,  1.43it/s]    100%|##########| 8/8 [00:05<00:00,  1.37it/s]    100%|##########| 8/8 [00:05<00:00,  1.57it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.004992</td>
          <td>0.006728</td>
          <td>0.002403</td>
          <td>0.004590</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.004987</td>
          <td>0.006741</td>
          <td>0.002423</td>
          <td>0.004630</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.005123</td>
          <td>0.008606</td>
          <td>0.002535</td>
          <td>0.004961</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.005240</td>
          <td>0.008759</td>
          <td>0.002665</td>
          <td>0.005020</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.005583</td>
          <td>0.010121</td>
          <td>0.003018</td>
          <td>0.005441</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.006175</td>
          <td>0.012511</td>
          <td>0.003565</td>
          <td>0.006238</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.006152</td>
          <td>0.012755</td>
          <td>0.003566</td>
          <td>0.006123</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.006152</td>
          <td>0.012709</td>
          <td>0.003568</td>
          <td>0.006112</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 301-302

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 302-308

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_005.png
   :alt: grad_loss_square_error lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_005.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'grad_loss_square_error\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 309-319

grad_loss_elastic_error
+++++++++++++++++++++++

It implements :math:`Y = f(X1, X2) = \beta \lVert X1 - X2 \rVert +
\alpha \lVert X1 - X2 \rVert^2` or
:math:`Y = f(X1, X2) = \beta \lVert w(X1 - X2) \rVert +
\alpha \lVert (\sqrt{w}(X1 - X2) \rVert^2` if
*weight_name* is not None and its gradient.
*l1_weight* is :math:`\beta` and
*l2_weight* is :math:`\alpha`.

.. GENERATED FROM PYTHON SOURCE LINES 319-323

.. code-block:: default


    fct_onx = function_onnx_graph("grad_loss_elastic_error")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=15
    input: name='X1' type=dtype('float32') shape=(0, 0)
    input: name='X2' type=dtype('float32') shape=(0, 0)
    init: name='Mu_Mulcst' type=dtype('float32') shape=(1,) -- array([0.01], dtype=float32)
    init: name='Re_Reshapecst' type=dtype('int64') shape=(1,) -- array([-1])
    init: name='Mu_Mulcst3' type=dtype('float32') shape=(1,) -- array([-0.02], dtype=float32)
    Identity(Mu_Mulcst) -> Mu_Mulcst1
    Identity(Mu_Mulcst) -> Mu_Mulcst2
    Sub(X1, X2) -> Su_C0
      Mul(Su_C0, Mu_Mulcst3) -> Mu_C05
    Sign(Su_C0) -> Si_output0
      Mul(Si_output0, Mu_Mulcst2) -> Mu_C04
        Add(Mu_C04, Mu_C05) -> Ad_C02
          Identity(Ad_C02) -> Y_grad
      Mul(Su_C0, Su_C0) -> Mu_C03
      Mul(Mu_C03, Mu_Mulcst1) -> Mu_C02
    Abs(Su_C0) -> Ab_Y0
      Mul(Ab_Y0, Mu_Mulcst) -> Mu_C0
        Add(Mu_C0, Mu_C02) -> Ad_C0
          ReduceSum(Ad_C0) -> Re_reduced0
            Reshape(Re_reduced0, Re_Reshapecst) -> Y
    output: name='Y' type=dtype('float32') shape=()
    output: name='Y_grad' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 324-325

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 325-340

.. code-block:: default


    fct_numpy = lambda x1, x2: (
        numpy.abs(x1 - x2).sum() * 0.1 + ((x1 - x2) ** 2).sum() * 0.9,
        numpy.sign(x1 - x2) * 0.1 - 2 * 0.9 * (x1 - x2))

    rows = benchmark(
        'grad_loss_elastic_error', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:01<00:07,  1.12s/it]     25%|##5       | 2/8 [00:02<00:06,  1.12s/it]     38%|###7      | 3/8 [00:03<00:06,  1.23s/it]     50%|#####     | 4/8 [00:05<00:05,  1.33s/it]     62%|######2   | 5/8 [00:06<00:04,  1.48s/it]     75%|#######5  | 6/8 [00:09<00:03,  1.74s/it]     88%|########7 | 7/8 [00:11<00:01,  1.90s/it]    100%|##########| 8/8 [00:13<00:00,  2.00s/it]    100%|##########| 8/8 [00:13<00:00,  1.69s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.006727</td>
          <td>0.018878</td>
          <td>0.004245</td>
          <td>0.006339</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.006791</td>
          <td>0.018810</td>
          <td>0.004312</td>
          <td>0.006345</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.007568</td>
          <td>0.023246</td>
          <td>0.005018</td>
          <td>0.007241</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.008349</td>
          <td>0.024948</td>
          <td>0.005816</td>
          <td>0.008013</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.010447</td>
          <td>0.029153</td>
          <td>0.007927</td>
          <td>0.010274</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.014111</td>
          <td>0.036601</td>
          <td>0.011493</td>
          <td>0.014316</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.014031</td>
          <td>0.036314</td>
          <td>0.011409</td>
          <td>0.014508</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.014107</td>
          <td>0.036410</td>
          <td>0.011520</td>
          <td>0.014311</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 341-342

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 342-348

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_006.png
   :alt: grad_loss_elastic_error lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_006.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'grad_loss_elastic_error\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 349-358

n_penalty_elastic_error
+++++++++++++++++++++++

It implements :math:`Y = f(W) = \beta \lVert W \rVert +
\alpha \lVert W \rVert^2`
*l1_weight* is :math:`\beta` and
*l2_weight* is :math:`\alpha`.
It does that for *n_tensors* and adds all of the results
to an input loss.

.. GENERATED FROM PYTHON SOURCE LINES 358-362

.. code-block:: default


    fct_onx = function_onnx_graph("n_penalty_elastic_error")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=15
    input: name='loss' type=dtype('float32') shape=(1, 1)
    input: name='W0' type=dtype('float32') shape=()
    init: name='Mu_Mulcst' type=dtype('float32') shape=(1,) -- array([0.01], dtype=float32)
    init: name='Re_Reshapecst' type=dtype('int64') shape=(1,) -- array([-1])
    Abs(W0) -> Ab_Y0
      ReduceSum(Ab_Y0) -> Re_reduced0
        Mul(Re_reduced0, Mu_Mulcst) -> Mu_C0
    ReduceSumSquare(W0) -> Re_reduced02
    Identity(Mu_Mulcst) -> Mu_Mulcst1
      Mul(Re_reduced02, Mu_Mulcst1) -> Mu_C02
        Add(Mu_C0, Mu_C02) -> Ad_C01
          Add(loss, Ad_C01) -> Ad_C0
            Reshape(Ad_C0, Re_Reshapecst) -> Y
    output: name='Y' type=dtype('float32') shape=(0,)




.. GENERATED FROM PYTHON SOURCE LINES 363-364

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 364-376

.. code-block:: default


    fct_numpy = lambda loss, x: numpy.abs(x).sum() * 0.1 + ((x) ** 2).sum() * 0.9

    rows = benchmark(
        'n_penalty_elastic_error', fct_onx, fct_numpy,
        numpy.array([[0.5]], dtype=numpy.float32),
        numpy.random.randn(1000, 10).astype(numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:04,  1.45it/s]     25%|##5       | 2/8 [00:01<00:04,  1.45it/s]     38%|###7      | 3/8 [00:02<00:03,  1.38it/s]     50%|#####     | 4/8 [00:02<00:02,  1.34it/s]     62%|######2   | 5/8 [00:03<00:02,  1.28it/s]     75%|#######5  | 6/8 [00:04<00:01,  1.20it/s]     88%|########7 | 7/8 [00:05<00:00,  1.16it/s]    100%|##########| 8/8 [00:06<00:00,  1.13it/s]    100%|##########| 8/8 [00:06<00:00,  1.22it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.004585</td>
          <td>0.011367</td>
          <td>0.002621</td>
          <td>0.004443</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.004578</td>
          <td>0.011417</td>
          <td>0.002631</td>
          <td>0.004412</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.004684</td>
          <td>0.012726</td>
          <td>0.002711</td>
          <td>0.004551</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.004766</td>
          <td>0.013061</td>
          <td>0.002809</td>
          <td>0.004637</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.005022</td>
          <td>0.014097</td>
          <td>0.003079</td>
          <td>0.004913</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.005446</td>
          <td>0.015708</td>
          <td>0.003480</td>
          <td>0.005334</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.005418</td>
          <td>0.015659</td>
          <td>0.003477</td>
          <td>0.005255</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.005448</td>
          <td>0.015799</td>
          <td>0.003486</td>
          <td>0.005266</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 377-378

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 378-384

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_007.png
   :alt: n_penalty_elastic_error lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_007.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'n_penalty_elastic_error\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 385-391

update_penalty_elastic_error
++++++++++++++++++++++++++++

It implements :math:`Y = f(W) = W - 2 \beta W - \alpha sign(W)`
*l1* is :math:`\beta` and
*l2* is :math:`\alpha`.

.. GENERATED FROM PYTHON SOURCE LINES 391-395

.. code-block:: default


    fct_onx = function_onnx_graph("update_penalty_elastic_error")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=14
    input: name='X' type=dtype('float32') shape=()
    init: name='Mu_Mulcst' type=dtype('float32') shape=(1,) -- array([0.9998], dtype=float32)
    init: name='Mu_Mulcst1' type=dtype('float32') shape=(1,) -- array([1.e-04], dtype=float32)
    Mul(X, Mu_Mulcst) -> Mu_C0
    Sign(X) -> Si_output0
      Mul(Si_output0, Mu_Mulcst1) -> Mu_C02
      Sub(Mu_C0, Mu_C02) -> Y
    output: name='Y' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 396-397

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 397-409

.. code-block:: default


    fct_numpy = lambda x: numpy.sign(x) * 0.1 + (x * 0.9 * 2)

    rows = benchmark(
        'update_penalty_elastic_error', fct_onx, fct_numpy,
        numpy.random.randn(1000, 10).astype(numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:00<00:03,  2.26it/s]     25%|##5       | 2/8 [00:00<00:02,  2.26it/s]     38%|###7      | 3/8 [00:01<00:02,  2.00it/s]     50%|#####     | 4/8 [00:02<00:02,  1.81it/s]     62%|######2   | 5/8 [00:02<00:01,  1.56it/s]     75%|#######5  | 6/8 [00:03<00:01,  1.26it/s]     88%|########7 | 7/8 [00:05<00:00,  1.13it/s]    100%|##########| 8/8 [00:06<00:00,  1.05it/s]    100%|##########| 8/8 [00:06<00:00,  1.31it/s]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.003592</td>
          <td>0.006939</td>
          <td>0.001929</td>
          <td>0.003570</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.003595</td>
          <td>0.006948</td>
          <td>0.001966</td>
          <td>0.003547</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.004011</td>
          <td>0.009130</td>
          <td>0.002370</td>
          <td>0.004365</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.004455</td>
          <td>0.010068</td>
          <td>0.002836</td>
          <td>0.004784</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.005754</td>
          <td>0.012711</td>
          <td>0.004112</td>
          <td>0.006313</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.007908</td>
          <td>0.016946</td>
          <td>0.006276</td>
          <td>0.008500</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.007889</td>
          <td>0.016904</td>
          <td>0.006242</td>
          <td>0.008482</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.007912</td>
          <td>0.017042</td>
          <td>0.006264</td>
          <td>0.008486</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 410-411

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 411-417

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_008.png
   :alt: update_penalty_elastic_error lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_008.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'update_penalty_elastic_error\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 418-423

grad_sigmoid_neg_log_loss_error
+++++++++++++++++++++++++++++++

See :func:`_onnx_grad_sigmoid_neg_log_loss_error
<onnxcustom.utils.onnx_function._onnx_grad_sigmoid_neg_log_loss_error>`.

.. GENERATED FROM PYTHON SOURCE LINES 423-427

.. code-block:: default


    fct_onx = function_onnx_graph("grad_sigmoid_neg_log_loss_error")
    print(onnx_simple_text_plot(fct_onx))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    opset: domain='' version=15
    input: name='X1' type=dtype('int64') shape=(0, 0)
    input: name='X2' type=dtype('float32') shape=(0, 0)
    init: name='Su_Subcst' type=dtype('float32') shape=(1,) -- array([1.], dtype=float32)
    init: name='Cl_Clipcst' type=dtype('float32') shape=(1,) -- array([1.e-05], dtype=float32)
    init: name='Cl_Clipcst1' type=dtype('float32') shape=(1,) -- array([0.99999], dtype=float32)
    init: name='Re_Reshapecst' type=dtype('int64') shape=(1,) -- array([-1])
    Cast(X1, to=1) -> Ca_output0
      Sub(Su_Subcst, Ca_output0) -> Su_C0
    Sigmoid(X2) -> Si_Y0
      Clip(Si_Y0, Cl_Clipcst, Cl_Clipcst1) -> Cl_output0
        Log(Cl_output0) -> Lo_output02
      Mul(Ca_output0, Lo_output02) -> Mu_C02
    Identity(Su_Subcst) -> Su_Subcst1
      Sub(Su_Subcst1, Cl_output0) -> Su_C02
        Log(Su_C02) -> Lo_output0
        Mul(Su_C0, Lo_output0) -> Mu_C0
        Add(Mu_C0, Mu_C02) -> Ad_C0
          Neg(Ad_C0) -> Ne_Y0
            ReduceSum(Ne_Y0) -> Re_reduced0
              Reshape(Re_reduced0, Re_Reshapecst) -> Y
      Sub(Cl_output0, Ca_output0) -> Y_grad
    output: name='Y' type=dtype('float32') shape=()
    output: name='Y_grad' type=dtype('float32') shape=()




.. GENERATED FROM PYTHON SOURCE LINES 428-429

benchmark

.. GENERATED FROM PYTHON SOURCE LINES 429-449

.. code-block:: default



    def loss(x1, x2, eps=1e-5):
        pr = expit(x2)
        cl = numpy.clip(pr, eps, 1 - eps)
        lo = - (1 - x1) * numpy.log(1 - cl) - x1 * numpy.log(cl)
        return lo


    fct_numpy = lambda x1, x2: (loss(x1, x2).mean(), expit(x2) - x1)

    rows = benchmark(
        'grad_sigmoid_neg_log_loss_error', fct_onx, fct_numpy,
        (numpy.random.randn(1000, 1) > 0).astype(numpy.int64),
        numpy.random.randn(1000, 10).astype(numpy.float32))

    all_rows.extend(rows)
    piv = pandas.DataFrame(rows).pivot('dim', 'impl', 'average')
    piv





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

      0%|          | 0/8 [00:00<?, ?it/s]     12%|#2        | 1/8 [00:01<00:12,  1.81s/it]     25%|##5       | 2/8 [00:03<00:11,  1.87s/it]     38%|###7      | 3/8 [00:06<00:12,  2.41s/it]     50%|#####     | 4/8 [00:10<00:12,  3.13s/it]     62%|######2   | 5/8 [00:18<00:14,  4.74s/it]     75%|#######5  | 6/8 [00:32<00:15,  7.71s/it]     88%|########7 | 7/8 [00:45<00:09,  9.60s/it]    100%|##########| 8/8 [00:59<00:00, 10.84s/it]    100%|##########| 8/8 [00:59<00:00,  7.38s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th>impl</th>
          <th>bind_run</th>
          <th>numpy</th>
          <th>run</th>
          <th>sess</th>
        </tr>
        <tr>
          <th>dim</th>
          <th></th>
          <th></th>
          <th></th>
          <th></th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>1</th>
          <td>0.007246</td>
          <td>0.032292</td>
          <td>0.004600</td>
          <td>0.006824</td>
        </tr>
        <tr>
          <th>10</th>
          <td>0.007825</td>
          <td>0.034267</td>
          <td>0.005167</td>
          <td>0.007362</td>
        </tr>
        <tr>
          <th>100</th>
          <td>0.011676</td>
          <td>0.054584</td>
          <td>0.009018</td>
          <td>0.011367</td>
        </tr>
        <tr>
          <th>200</th>
          <td>0.015957</td>
          <td>0.075253</td>
          <td>0.013220</td>
          <td>0.015670</td>
        </tr>
        <tr>
          <th>500</th>
          <td>0.028750</td>
          <td>0.135132</td>
          <td>0.025942</td>
          <td>0.028400</td>
        </tr>
        <tr>
          <th>1000</th>
          <td>0.049898</td>
          <td>0.239883</td>
          <td>0.046879</td>
          <td>0.050397</td>
        </tr>
        <tr>
          <th>2000</th>
          <td>0.050270</td>
          <td>0.240150</td>
          <td>0.047119</td>
          <td>0.049828</td>
        </tr>
        <tr>
          <th>10000</th>
          <td>0.050023</td>
          <td>0.240576</td>
          <td>0.046890</td>
          <td>0.049994</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 450-451

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 451-457

.. code-block:: default


    name = rows[0]['name']
    ax = piv.plot(logx=True, logy=True)
    ax.set_title(name + "\nlower is better")





.. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_009.png
   :alt: grad_sigmoid_neg_log_loss_error lower is better
   :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_009.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none


    Text(0.5, 1.0, 'grad_sigmoid_neg_log_loss_error\nlower is better')



.. GENERATED FROM PYTHON SOURCE LINES 458-460

Results
+++++++

.. GENERATED FROM PYTHON SOURCE LINES 460-464

.. code-block:: default


    df = pandas.DataFrame(all_rows)
    df






.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>average</th>
          <th>deviation</th>
          <th>min_exec</th>
          <th>max_exec</th>
          <th>repeat</th>
          <th>number</th>
          <th>ttime</th>
          <th>context_size</th>
          <th>name</th>
          <th>impl</th>
          <th>dim</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.002472</td>
          <td>0.000016</td>
          <td>0.002451</td>
          <td>0.002533</td>
          <td>50</td>
          <td>100</td>
          <td>0.123616</td>
          <td>64</td>
          <td>axpy</td>
          <td>numpy</td>
          <td>1</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.003834</td>
          <td>0.000048</td>
          <td>0.003807</td>
          <td>0.003975</td>
          <td>10</td>
          <td>50</td>
          <td>0.038343</td>
          <td>64</td>
          <td>axpy</td>
          <td>sess</td>
          <td>1</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.004020</td>
          <td>0.000032</td>
          <td>0.004004</td>
          <td>0.004114</td>
          <td>10</td>
          <td>50</td>
          <td>0.040200</td>
          <td>64</td>
          <td>axpy</td>
          <td>bind_run</td>
          <td>1</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.001767</td>
          <td>0.000022</td>
          <td>0.001750</td>
          <td>0.001827</td>
          <td>10</td>
          <td>50</td>
          <td>0.017672</td>
          <td>64</td>
          <td>axpy</td>
          <td>run</td>
          <td>1</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.002464</td>
          <td>0.000014</td>
          <td>0.002445</td>
          <td>0.002531</td>
          <td>50</td>
          <td>100</td>
          <td>0.123204</td>
          <td>64</td>
          <td>axpy</td>
          <td>numpy</td>
          <td>10</td>
        </tr>
        <tr>
          <th>...</th>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
          <td>...</td>
        </tr>
        <tr>
          <th>315</th>
          <td>0.047119</td>
          <td>0.000050</td>
          <td>0.047072</td>
          <td>0.047253</td>
          <td>10</td>
          <td>50</td>
          <td>0.471192</td>
          <td>64</td>
          <td>grad_sigmoid_neg_log_loss_error</td>
          <td>run</td>
          <td>2000</td>
        </tr>
        <tr>
          <th>316</th>
          <td>0.240576</td>
          <td>0.000649</td>
          <td>0.239843</td>
          <td>0.242718</td>
          <td>50</td>
          <td>100</td>
          <td>12.028781</td>
          <td>64</td>
          <td>grad_sigmoid_neg_log_loss_error</td>
          <td>numpy</td>
          <td>10000</td>
        </tr>
        <tr>
          <th>317</th>
          <td>0.049994</td>
          <td>0.000101</td>
          <td>0.049930</td>
          <td>0.050287</td>
          <td>10</td>
          <td>50</td>
          <td>0.499941</td>
          <td>64</td>
          <td>grad_sigmoid_neg_log_loss_error</td>
          <td>sess</td>
          <td>10000</td>
        </tr>
        <tr>
          <th>318</th>
          <td>0.050023</td>
          <td>0.000121</td>
          <td>0.049916</td>
          <td>0.050353</td>
          <td>10</td>
          <td>50</td>
          <td>0.500229</td>
          <td>64</td>
          <td>grad_sigmoid_neg_log_loss_error</td>
          <td>bind_run</td>
          <td>10000</td>
        </tr>
        <tr>
          <th>319</th>
          <td>0.046890</td>
          <td>0.000041</td>
          <td>0.046851</td>
          <td>0.047002</td>
          <td>10</td>
          <td>50</td>
          <td>0.468904</td>
          <td>64</td>
          <td>grad_sigmoid_neg_log_loss_error</td>
          <td>run</td>
          <td>10000</td>
        </tr>
      </tbody>
    </table>
    <p>320 rows × 11 columns</p>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 465-466

Pivot

.. GENERATED FROM PYTHON SOURCE LINES 466-472

.. code-block:: default


    piv = pandas.pivot_table(
        df, index=['name', 'impl'], columns='dim', values='average')
    piv
    print(piv)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    dim                                          1      ...     10000
    name                            impl                ...          
    axpy                            bind_run  0.004020  ...  0.005004
                                    numpy     0.002472  ...  0.004765
                                    run       0.001767  ...  0.002741
                                    sess      0.003834  ...  0.005211
    axpyw                           bind_run  0.005410  ...  0.007290
                                    numpy     0.008006  ...  0.016235
                                    run       0.002002  ...  0.003779
                                    sess      0.004804  ...  0.007562
    axpyw2                          bind_run  0.005715  ...  0.008592
                                    numpy     0.011349  ...  0.023808
                                    run       0.002276  ...  0.004910
                                    sess      0.005124  ...  0.009274
    copy                            bind_run  0.002721  ...  0.002981
                                    numpy     0.000649  ...  0.001324
                                    run       0.001098  ...  0.001353
                                    sess      0.002707  ...  0.003254
    grad_loss_absolute_error        bind_run  0.004892  ...  0.009012
                                    numpy     0.005378  ...  0.015590
                                    run       0.002343  ...  0.006411
                                    sess      0.004455  ...  0.008881
    grad_loss_elastic_error         bind_run  0.006727  ...  0.014107
                                    numpy     0.018878  ...  0.036410
                                    run       0.004245  ...  0.011520
                                    sess      0.006339  ...  0.014311
    grad_loss_square_error          bind_run  0.004992  ...  0.006152
                                    numpy     0.006728  ...  0.012709
                                    run       0.002403  ...  0.003568
                                    sess      0.004590  ...  0.006112
    grad_sigmoid_neg_log_loss_error bind_run  0.007246  ...  0.050023
                                    numpy     0.032292  ...  0.240576
                                    run       0.004600  ...  0.046890
                                    sess      0.006824  ...  0.049994
    n_penalty_elastic_error         bind_run  0.004585  ...  0.005448
                                    numpy     0.011367  ...  0.015799
                                    run       0.002621  ...  0.003486
                                    sess      0.004443  ...  0.005266
    update_penalty_elastic_error    bind_run  0.003592  ...  0.007912
                                    numpy     0.006939  ...  0.017042
                                    run       0.001929  ...  0.006264
                                    sess      0.003570  ...  0.008486

    [40 rows x 8 columns]




.. GENERATED FROM PYTHON SOURCE LINES 473-474

Graph.

.. GENERATED FROM PYTHON SOURCE LINES 474-498

.. code-block:: default


    fig, ax = None, None


    for i, name in enumerate(sorted(set(df['name']))):
        if fig is None:
            fig, ax = plt.subplots(2, 2, figsize=(8, 12), sharex=True)
        x, y = (i % 4) // 2, (i % 4) % 2
        piv = df[df.name == name].pivot('dim', 'impl', 'average')
        piv.plot(ax=ax[x, y], logx=True, logy=True)
        ax[x, y].set_title(name)
        ax[x, y].xaxis.set_label_text("")
        if i % 4 == 3:
            fig.suptitle("lower is better")
            fig.tight_layout()
            fig, ax = None, None


    if fig is not None:
        fig.suptitle("lower is better")
        fig.tight_layout()


    # plt.show()



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_010.png
         :alt: lower is better, axpy, axpyw, axpyw2, copy
         :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_010.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_011.png
         :alt: lower is better, grad_loss_absolute_error, grad_loss_elastic_error, grad_loss_square_error, grad_sigmoid_neg_log_loss_error
         :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_011.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_012.png
         :alt: lower is better, n_penalty_elastic_error, update_penalty_elastic_error
         :srcset: /gyexamples/images/sphx_glr_plot_benchmark_onnx_function_012.png
         :class: sphx-glr-multi-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 2 minutes  28.826 seconds)


.. _sphx_glr_download_gyexamples_plot_benchmark_onnx_function.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download sphx-glr-download-python

     :download:`Download Python source code: plot_benchmark_onnx_function.py <plot_benchmark_onnx_function.py>`



  .. container:: sphx-glr-download sphx-glr-download-jupyter

     :download:`Download Jupyter notebook: plot_benchmark_onnx_function.ipynb <plot_benchmark_onnx_function.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
