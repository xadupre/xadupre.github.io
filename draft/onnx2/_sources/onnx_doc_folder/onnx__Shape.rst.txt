
.. _l-onnx-doc-Shape:

=====
Shape
=====

.. contents::
    :local:


.. _l-onnx-op-shape-15:

Shape - 15
==========

**Version**

* **name**: `Shape (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape>`_
* **domain**: **main**
* **since_version**: **15**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 15**.

**Summary**

Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.
Optional attributes start and end can be used to compute a slice of the input tensor's shape.
If start axis is omitted, the slice starts from axis 0.
The end axis, if specified, is exclusive (and the returned value will not include the size of that axis).
If the end axis is omitted, the axes upto the last one will be included.
Negative axes indicate counting back from the last axis.
Note that axes will be clamped to the range [0, r-1], where r is the
rank of the input tensor if they are out-of-range (after adding r in the case of
negative axis). Thus, specifying any end value > r is equivalent to specifying an end
value of r, and specifying any start value < -r is equivalent to specifying a start
value of 0.

For example:
Input tensor with shape: [2, 3, 4]
No attributes specified.
Output: [2, 3, 4]

Input tensor with shape: [2, 3, 4]
start: -1
Output: [4]

Input tensor with shape: [2, 3, 4]
end: -1
Output: [2, 3]

Input tensor with shape: [2, 3, 4]
start: 1
end: 2
Output: [3]

**Attributes**

* **end**:
  (Optional) Ending axis for slicing the shape. Negative value means
  counting dimensions from the back. If omitted, sizes of all axes
  upto (including) the last one will be included.
* **start**:
  (Optional) Starting axis for slicing the shape. Default value is
  0.Negative value means counting dimensions from the back.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **shape** (heterogeneous) - **T1**:
  Shape of the input tensor

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Input tensor can be of arbitrary type.
* **T1** in (
  tensor(int64)
  ):
  Constrain output to int64 tensor.

**Examples**

**default**

::

    import numpy as np
    import onnx

    x = np.array(
        [
            [1, 2, 3],
            [4, 5, 6],
        ]
    ).astype(np.float32)
    test_shape("_example", x)  # preserve names of original test cases

    x = np.random.randn(3, 4, 5).astype(np.float32)

    test_shape("", x)  # preserve names of original test cases

    test_shape("_start_1", x, start=1)

    test_shape("_end_1", x, end=1)

    test_shape("_start_negative_1", x, start=-1)

    test_shape("_end_negative_1", x, end=-1)

    test_shape("_start_1_end_negative_1", x, start=1, end=-1)

    test_shape("_start_1_end_2", x, start=1, end=2)

    test_shape("_clip_start", x, start=-10)

    test_shape("_clip_end", x, end=10)

.. toctree::
    text_diff_Shape_13_15

.. _l-onnx-op-shape-13:

Shape - 13
==========

**Version**

* **name**: `Shape (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **shape** (heterogeneous) - **T1**:
  Shape of the input tensor

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Input tensor can be of arbitrary type.
* **T1** in (
  tensor(int64)
  ):
  Constrain output to int64 tensor.

.. toctree::
    text_diff_Shape_1_13

.. _l-onnx-op-shape-1:

Shape - 1
=========

**Version**

* **name**: `Shape (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Shape>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Takes a tensor as input and outputs an 1D int64 tensor containing the shape of the input tensor.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **shape** (heterogeneous) - **T1**:
  Shape of the input tensor

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Input tensor can be of arbitrary type.
* **T1** in (
  tensor(int64)
  ):
  Constrain output to int64 tensor.
