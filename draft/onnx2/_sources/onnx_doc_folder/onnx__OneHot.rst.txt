
.. _l-onnx-doc-OneHot:

======
OneHot
======

.. contents::
    :local:


.. _l-onnx-op-onehot-11:

OneHot - 11
===========

**Version**

* **name**: `OneHot (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#OneHot>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Produces a one-hot tensor based on inputs.
The locations represented by the index values in the 'indices' input tensor will have 'on_value'
and the other locations will have 'off_value' in the output tensor, where 'on_value' and 'off_value'
are specified as part of required input argument 'values', which is a two-element tensor of format
[off_value, on_value]. The rank of the output tensor will be one greater than the rank of the
input tensor. The additional dimension is for one-hot representation. The additional dimension will
be inserted at the position specified by 'axis'. If 'axis' is not specified then then additional
dimension will be inserted as the innermost dimension, i.e. axis=-1. The size of the additional
dimension is specified by required scalar input 'depth'. The type of the output tensor is the same
as the type of the 'values' input. Any entries in the 'indices' input tensor with values outside
the range [-depth, depth-1] will result in one-hot representation with all 'off_value' values in the
output tensor.

when axis = 0:
output[input[i, j, k], i, j, k] = 1 for all i, j, k and 0 otherwise.

when axis = -1:
output[i, j, k, input[i, j, k]] = 1 for all i, j, k and 0 otherwise.

**Attributes**

* **axis**:
  (Optional) Axis along which one-hot representation in added.
  Default: axis=-1. axis=-1 means that the additional dimension will
  be inserted as the innermost/last dimension in the output tensor.
  Negative value means counting dimensions from the back. Accepted
  range is [-r-1, r] where r = rank(indices).

**Inputs**

* **indices** (heterogeneous) - **T1**:
  Input tensor containing indices. Any entries in the 'indices' input
  tensor with values outside the range [-depth, depth-1] will result
  in one-hot representation with all 'off_value' values in the output
  tensor.In case 'indices' is of non-integer type, the values will be
  casted to int64 before use.
* **depth** (heterogeneous) - **T2**:
  Scalar specifying the number of classes in one-hot tensor. This is
  also the size of the one-hot dimension (specified by 'axis'
  attribute) added on in the output tensor. The values in the
  'indices' input tensor are expected to be in the range [-depth,
  depth-1]. In case 'depth' is of non-integer type, it will be casted
  to int64 before use.
* **values** (heterogeneous) - **T3**:
  Rank 1 tensor containing exactly two elements, in the format
  [off_value, on_value], where 'on_value' is the value used for
  filling locations specified in 'indices' input tensor, and
  'off_value' is the value used for filling locations other than those
  specified in 'indices' input tensor.

**Outputs**

* **output** (heterogeneous) - **T3**:
  Tensor of rank one greater than input tensor 'indices', i.e.
  rank(output) = rank(indices) + 1. The data type for the elements of
  the output tensor is the same as the type of input 'values' is used.

**Type Constraints**

* **T1** in (
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input to only numeric types.
* **T2** in (
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input to only numeric types.
* **T3** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain to any tensor type.

**Examples**

**_without_axis**

::

    import numpy as np
    import onnx

    on_value = 5
    off_value = 2
    output_type = np.int32
    node = onnx.helper.make_node(
        "OneHot", inputs=["indices", "depth", "values"], outputs=["y"]
    )
    indices = np.array([0, 7, 8], dtype=np.int64)
    depth = np.float32(12)
    values = np.array([off_value, on_value], dtype=output_type)
    y = one_hot(indices, depth, dtype=output_type)
    y = y * (on_value - off_value) + off_value
    expect(
        node,
        inputs=[indices, depth, values],
        outputs=[y],
        name="test_onehot_without_axis",
    )

**_with_axis**

::

    import numpy as np
    import onnx

    axisValue = 1
    on_value = 3
    off_value = 1
    output_type = np.float32
    node = onnx.helper.make_node(
        "OneHot",
        inputs=["indices", "depth", "values"],
        outputs=["y"],
        axis=axisValue,
    )
    indices = np.array([[1, 9], [2, 4]], dtype=np.float32)
    depth = np.float32(10)
    values = np.array([off_value, on_value], dtype=output_type)
    y = one_hot(indices, depth, axis=axisValue, dtype=output_type)
    y = y * (on_value - off_value) + off_value
    expect(
        node,
        inputs=[indices, depth, values],
        outputs=[y],
        name="test_onehot_with_axis",
    )

**_with_negative_indices**

::

    import numpy as np
    import onnx

    axisValue = 1
    on_value = 3
    off_value = 1
    output_type = np.float32
    node = onnx.helper.make_node(
        "OneHot",
        inputs=["indices", "depth", "values"],
        outputs=["y"],
        axis=axisValue,
    )
    indices = np.array([0, -7, -8], dtype=np.int64)

    # print(y)
    # [[3. 1. 1. 1. 1. 1. 1. 1. 1. 1.]
    #  [1. 1. 1. 3. 1. 1. 1. 1. 1. 1.]
    #  [1. 1. 3. 1. 1. 1. 1. 1. 1. 1.]]

    depth = np.float32(10)
    values = np.array([off_value, on_value], dtype=output_type)
    y = one_hot(indices, depth, axis=axisValue, dtype=output_type)
    y = y * (on_value - off_value) + off_value
    expect(
        node,
        inputs=[indices, depth, values],
        outputs=[y],
        name="test_onehot_negative_indices",
    )

**_with_negative_axis**

::

    import numpy as np
    import onnx

    axisValue = -2
    on_value = 3
    off_value = 1
    output_type = np.float32
    node = onnx.helper.make_node(
        "OneHot",
        inputs=["indices", "depth", "values"],
        outputs=["y"],
        axis=axisValue,
    )
    indices = np.array([[1, 9], [2, 4]], dtype=np.float32)
    depth = np.float32(10)
    values = np.array([off_value, on_value], dtype=output_type)
    y = one_hot(indices, depth, axis=axisValue, dtype=output_type)
    y = y * (on_value - off_value) + off_value
    expect(
        node,
        inputs=[indices, depth, values],
        outputs=[y],
        name="test_onehot_with_negative_axis",
    )

.. toctree::
    text_diff_OneHot_9_11

.. _l-onnx-op-onehot-9:

OneHot - 9
==========

**Version**

* **name**: `OneHot (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#OneHot>`_
* **domain**: **main**
* **since_version**: **9**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 9**.

**Summary**

Produces a one-hot tensor based on inputs.
The locations represented by the index values in the 'indices' input tensor will have 'on_value'
and the other locations will have 'off_value' in the output tensor, where 'on_value' and 'off_value'
are specified as part of required input argument 'values', which is a two-element tensor of format
[off_value, on_value]. The rank of the output tensor will be one greater than the rank of the
input tensor. The additional dimension is for one-hot representation. The additional dimension will
be inserted at the position specified by 'axis'. If 'axis' is not specified then then additional
dimension will be inserted as the innermost dimension, i.e. axis=-1. The size of the additional
dimension is specified by required scalar input 'depth'. The type of the output tensor is the same
as the type of the 'values' input. Any entries in the 'indices' input tensor with values outside
the range [0, depth) will result in one-hot representation with all 'off_value' values in the
output tensor.

**Attributes**

* **axis**:
  (Optional) Axis along which one-hot representation in added.
  Default: axis=-1. axis=-1 means that the additional dimension will
  be inserted as the innermost/last dimension in the output tensor.

**Inputs**

* **indices** (heterogeneous) - **T1**:
  Input tensor containing indices. The values must be non-negative
  integers. Any entries in the 'indices' input tensor with values
  outside the range [0, depth) will result in one-hot representation
  with all 'off_value' values in the output tensor.In case 'indices'
  is of non-integer type, the values will be casted to int64 before
  use.
* **depth** (heterogeneous) - **T2**:
  Scalar specifying the number of classes in one-hot tensor. This is
  also the size of the one-hot dimension (specified by 'axis'
  attribute) added on in the output tensor. The values in the
  'indices' input tensor are expected to be in the range [0, depth).
  In case 'depth' is of non-integer type, it will be casted to int64
  before use.
* **values** (heterogeneous) - **T3**:
  Rank 1 tensor containing exactly two elements, in the format
  [off_value, on_value], where 'on_value' is the value used for
  filling locations specified in 'indices' input tensor, and
  'off_value' is the value used for filling locations other than those
  specified in 'indices' input tensor.

**Outputs**

* **output** (heterogeneous) - **T3**:
  Tensor of rank one greater than input tensor 'indices', i.e.
  rank(output) = rank(indices) + 1. The data type for the elements of
  the output tensor is the same as the type of input 'values' is used.

**Type Constraints**

* **T1** in (
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input to only numeric types.
* **T2** in (
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input to only numeric types.
* **T3** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain to any tensor type.
