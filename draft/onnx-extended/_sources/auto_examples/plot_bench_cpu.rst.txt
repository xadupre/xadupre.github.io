
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/plot_bench_cpu.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        Click :ref:`here <sphx_glr_download_auto_examples_plot_bench_cpu.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_bench_cpu.py:


.. _l-example-bench-cpu:

Measuring CPU performance
=========================

Processor caches must be taken into account when writing an algorithm,
see `Memory part 2: CPU caches <https://lwn.net/Articles/252125/>`_
from Ulrich Drepper.

Cache Performance
+++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 14-51

.. code-block:: default

    from tqdm import tqdm
    import matplotlib.pyplot as plt
    from pyquickhelper.loghelper import run_cmd
    from pandas import DataFrame, concat
    from onnx_extended.ext_test_case import unit_test_going
    from onnx_extended.validation.cpu._validation import (
        benchmark_cache,
        benchmark_cache_tree,
    )

    obs = []
    step = 2**12
    for i in tqdm(range(step, 2**20 + step, step)):
        res = min(
            [
                benchmark_cache(i, False),
                benchmark_cache(i, False),
                benchmark_cache(i, False),
            ]
        )
        if res < 0:
            # overflow
            continue
        obs.append(dict(size=i, perf=res))

    df = DataFrame(obs)
    mean = df.perf.mean()
    lag = 32
    for i in range(2, df.shape[0]):
        df.loc[i, "smooth"] = df.loc[i - 8 : i + 8, "perf"].median()
        if i > lag and i < df.shape[0] - lag:
            df.loc[i, "delta"] = (
                mean
                + df.loc[i : i + lag, "perf"].mean()
                - df.loc[i - lag + 1 : i + 1, "perf"]
            ).mean()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/256 [00:00<?, ?it/s]     48%|####8     | 123/256 [00:00<00:00, 1219.97it/s]     96%|#########5| 245/256 [00:00<00:00, 671.12it/s]     100%|##########| 256/256 [00:00<00:00, 680.30it/s]




.. GENERATED FROM PYTHON SOURCE LINES 52-54

Cache size estimator
++++++++++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 54-59

.. code-block:: default


    cache_size_index = int(df.delta.argmax())
    cache_size = df.loc[cache_size_index, "size"] * 2
    print(f"L2 cache size estimation is {cache_size / 2 ** 20:1.3f} Mb.")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    L2 cache size estimation is 0.680 Mb.




.. GENERATED FROM PYTHON SOURCE LINES 60-62

Verification
++++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 62-74

.. code-block:: default


    try:
        out, err = run_cmd("lscpu", wait=True)
        print("\n".join(_ for _ in out.split("\n") if "cache:" in _))
    except Exception as e:
        print(f"failed due to {e}")

    df = df.set_index("size")
    fig, ax = plt.subplots(1, 1, figsize=(12, 4))
    df.plot(ax=ax, title="Cache Performance time/size", logy=True)
    fig.savefig("plot_benchmark_cpu_array.png")




.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_001.png
   :alt: Cache Performance time/size
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_001.png
   :class: sphx-glr-single-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    L1d cache:                       128 KiB (4 instances)
    L1i cache:                       128 KiB (4 instances)
    L2 cache:                        1 MiB (4 instances)
    L3 cache:                        8 MiB (1 instance)




.. GENERATED FROM PYTHON SOURCE LINES 75-81

TreeEnsemble Performance
++++++++++++++++++++++++

We simulate the computation of a TreeEnsemble
of 50 features, 100 trees and depth of 10
(so :math:`2^10` nodes.)

.. GENERATED FROM PYTHON SOURCE LINES 81-111

.. code-block:: default


    dfs = []
    cols = []
    drop = []
    for n in tqdm(range(10)):
        res = benchmark_cache_tree(
            n_rows=2000,
            n_features=50,
            n_trees=100,
            tree_size=1024,
            max_depth=10,
            search_step=64,
        )
        res = [[max(r.row, i), r.time] for i, r in enumerate(res)]
        df = DataFrame(res)
        df.columns = [f"i{n}", f"time{n}"]
        dfs.append(df)
        cols.append(df.columns[-1])
        drop.append(df.columns[0])
        if unit_test_going() and len(dfs) >= 3:
            break

    df = concat(dfs, axis=1).reset_index(drop=True)
    df["i"] = df["i0"]
    df = df.drop(drop, axis=1)
    df["time_avg"] = df[cols].mean(axis=1)
    df["time_med"] = df[cols].median(axis=1)

    df.head()





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

      0%|          | 0/10 [00:00<?, ?it/s]     10%|#         | 1/10 [00:01<00:09,  1.10s/it]     20%|##        | 2/10 [00:02<00:09,  1.22s/it]     30%|###       | 3/10 [00:03<00:08,  1.19s/it]     40%|####      | 4/10 [00:04<00:07,  1.22s/it]     50%|#####     | 5/10 [00:06<00:06,  1.25s/it]     60%|######    | 6/10 [00:07<00:04,  1.23s/it]     70%|#######   | 7/10 [00:08<00:03,  1.30s/it]     80%|########  | 8/10 [00:09<00:02,  1.27s/it]     90%|######### | 9/10 [00:11<00:01,  1.26s/it]    100%|##########| 10/10 [00:12<00:00,  1.17s/it]    100%|##########| 10/10 [00:12<00:00,  1.22s/it]


.. raw:: html

    <div class="output_subarea output_html rendered_html output_result">
    <div>
    <style scoped>
        .dataframe tbody tr th:only-of-type {
            vertical-align: middle;
        }

        .dataframe tbody tr th {
            vertical-align: top;
        }

        .dataframe thead th {
            text-align: right;
        }
    </style>
    <table border="1" class="dataframe">
      <thead>
        <tr style="text-align: right;">
          <th></th>
          <th>time0</th>
          <th>time1</th>
          <th>time2</th>
          <th>time3</th>
          <th>time4</th>
          <th>time5</th>
          <th>time6</th>
          <th>time7</th>
          <th>time8</th>
          <th>time9</th>
          <th>i</th>
          <th>time_avg</th>
          <th>time_med</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <th>0</th>
          <td>0.038144</td>
          <td>0.034087</td>
          <td>0.047519</td>
          <td>0.033915</td>
          <td>0.034304</td>
          <td>0.040687</td>
          <td>0.035867</td>
          <td>0.051919</td>
          <td>0.041203</td>
          <td>0.035901</td>
          <td>0</td>
          <td>0.039355</td>
          <td>0.037022</td>
        </tr>
        <tr>
          <th>1</th>
          <td>0.038144</td>
          <td>0.034087</td>
          <td>0.047519</td>
          <td>0.033915</td>
          <td>0.034304</td>
          <td>0.040687</td>
          <td>0.035867</td>
          <td>0.051919</td>
          <td>0.041203</td>
          <td>0.035901</td>
          <td>1</td>
          <td>0.039355</td>
          <td>0.037022</td>
        </tr>
        <tr>
          <th>2</th>
          <td>0.038144</td>
          <td>0.034087</td>
          <td>0.047519</td>
          <td>0.033915</td>
          <td>0.034304</td>
          <td>0.040687</td>
          <td>0.035867</td>
          <td>0.051919</td>
          <td>0.041203</td>
          <td>0.035901</td>
          <td>2</td>
          <td>0.039355</td>
          <td>0.037022</td>
        </tr>
        <tr>
          <th>3</th>
          <td>0.038144</td>
          <td>0.034087</td>
          <td>0.047519</td>
          <td>0.033915</td>
          <td>0.034304</td>
          <td>0.040687</td>
          <td>0.035867</td>
          <td>0.051919</td>
          <td>0.041203</td>
          <td>0.035901</td>
          <td>3</td>
          <td>0.039355</td>
          <td>0.037022</td>
        </tr>
        <tr>
          <th>4</th>
          <td>0.038144</td>
          <td>0.034087</td>
          <td>0.047519</td>
          <td>0.033915</td>
          <td>0.034304</td>
          <td>0.040687</td>
          <td>0.035867</td>
          <td>0.051919</td>
          <td>0.041203</td>
          <td>0.035901</td>
          <td>4</td>
          <td>0.039355</td>
          <td>0.037022</td>
        </tr>
      </tbody>
    </table>
    </div>
    </div>
    <br />
    <br />

.. GENERATED FROM PYTHON SOURCE LINES 112-114

Estimation
++++++++++

.. GENERATED FROM PYTHON SOURCE LINES 114-122

.. code-block:: default


    print("Optimal batch size is among:")
    dfi = df[["time_med", "i"]].groupby("time_med").min()
    dfi_min = set(dfi["i"])
    dfsub = df[df["i"].isin(dfi_min)]
    dfs = dfsub.sort_values("time_med").reset_index()
    print(dfs[["i", "time_med", "time_avg"]].head(10))





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Optimal batch size is among:
          i  time_med  time_avg
    0   704  0.033590  0.035638
    1   512  0.034039  0.035084
    2   448  0.034549  0.036290
    3   768  0.034759  0.036731
    4  1408  0.035074  0.037413
    5   320  0.035154  0.042175
    6  1664  0.035267  0.039321
    7   960  0.035772  0.038349
    8   640  0.035871  0.035799
    9  1344  0.035922  0.037078




.. GENERATED FROM PYTHON SOURCE LINES 123-124

One possible estimation

.. GENERATED FROM PYTHON SOURCE LINES 124-129

.. code-block:: default


    subdfs = dfs[:20]
    avg = (subdfs["i"] / subdfs["time_avg"]).sum() / (subdfs["time_avg"] ** (-1)).sum()
    print(f"Estimation: {avg}")





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Estimation: 827.0797076889988




.. GENERATED FROM PYTHON SOURCE LINES 130-131

Plots.

.. GENERATED FROM PYTHON SOURCE LINES 131-139

.. code-block:: default


    cols_time = ["time_avg", "time_med"]
    fig, ax = plt.subplots(2, 1, figsize=(12, 6))
    df.set_index("i").drop(cols_time, axis=1).plot(
        ax=ax[0], title="TreeEnsemble Performance time per row", logy=True, linewidth=0.2
    )
    df.set_index("i")[cols_time].plot(ax=ax[1], linewidth=1.0, logy=True)
    fig.savefig("plot_bench_cpu.png")



.. image-sg:: /auto_examples/images/sphx_glr_plot_bench_cpu_002.png
   :alt: TreeEnsemble Performance time per row
   :srcset: /auto_examples/images/sphx_glr_plot_bench_cpu_002.png
   :class: sphx-glr-single-img






.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  13.827 seconds)


.. _sphx_glr_download_auto_examples_plot_bench_cpu.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example


    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: plot_bench_cpu.py <plot_bench_cpu.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: plot_bench_cpu.ipynb <plot_bench_cpu.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
