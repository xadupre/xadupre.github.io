
.. _l-onnx-doc-Less:

====
Less
====

.. contents::
    :local:


.. _l-onnx-op-less-13:

Less - 13
=========

**Version**

* **name**: `Less (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Less>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Returns the tensor resulted from performing the `less` logical operation
elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).

This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check `Broadcasting in ONNX <https://github.com/onnx/onnx/blob/master/docs/Broadcasting.md>`_.

**Inputs**

* **A** (heterogeneous) - **T**:
  First input operand for the logical operator.
* **B** (heterogeneous) - **T**:
  Second input operand for the logical operator.

**Outputs**

* **C** (heterogeneous) - **T1**:
  Result tensor.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input types to all numeric tensors.
* **T1** in (
  tensor(bool)
  ):
  Constrain output to boolean tensor.

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Less",
        inputs=["x", "y"],
        outputs=["less"],
    )

    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.random.randn(3, 4, 5).astype(np.float32)
    z = np.less(x, y)
    expect(node, inputs=[x, y], outputs=[z], name="test_less")

**_less_broadcast**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Less",
        inputs=["x", "y"],
        outputs=["less"],
    )

    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.random.randn(5).astype(np.float32)
    z = np.less(x, y)
    expect(node, inputs=[x, y], outputs=[z], name="test_less_bcast")

.. toctree::

    text_diff_Less_9_13

.. _l-onnx-op-less-9:

Less - 9
========

**Version**

* **name**: `Less (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Less>`_
* **domain**: **main**
* **since_version**: **9**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 9**.

**Summary**

Returns the tensor resulted from performing the `less` logical operation
elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).

This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check `Broadcasting in ONNX <https://github.com/onnx/onnx/blob/master/docs/Broadcasting.md>`_.

**Inputs**

* **A** (heterogeneous) - **T**:
  First input operand for the logical operator.
* **B** (heterogeneous) - **T**:
  Second input operand for the logical operator.

**Outputs**

* **C** (heterogeneous) - **T1**:
  Result tensor.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input types to all numeric tensors.
* **T1** in (
  tensor(bool)
  ):
  Constrain output to boolean tensor.

.. toctree::

    text_diff_Less_7_13
    text_diff_Less_7_9

.. _l-onnx-op-less-7:

Less - 7
========

**Version**

* **name**: `Less (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Less>`_
* **domain**: **main**
* **since_version**: **7**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 7**.

**Summary**

Returns the tensor resulted from performing the `less` logical operation
elementwise on the input tensors `A` and `B` (with Numpy-style broadcasting support).

This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check `Broadcasting in ONNX <https://github.com/onnx/onnx/blob/master/docs/Broadcasting.md>`_.

**Inputs**

* **A** (heterogeneous) - **T**:
  First input operand for the logical operator.
* **B** (heterogeneous) - **T**:
  Second input operand for the logical operator.

**Outputs**

* **C** (heterogeneous) - **T1**:
  Result tensor.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input to float tensors.
* **T1** in (
  tensor(bool)
  ):
  Constrain output to boolean tensor.

.. toctree::

    text_diff_Less_1_13
    text_diff_Less_1_9
    text_diff_Less_1_7

.. _l-onnx-op-less-1:

Less - 1
========

**Version**

* **name**: `Less (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Less>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Returns the tensor resulted from performing the `less` logical operation
elementwise on the input tensors `A` and `B`.

If broadcasting is enabled, the right-hand-side argument will be broadcasted
to match the shape of left-hand-side argument. See the doc of `Add` for a
detailed description of the broadcasting rules.

**Attributes**

* **axis**:
  If set, defines the broadcast dimensions.
* **broadcast**:
  Enable broadcasting

**Inputs**

* **A** (heterogeneous) - **T**:
  Left input tensor for the logical operator.
* **B** (heterogeneous) - **T**:
  Right input tensor for the logical operator.

**Outputs**

* **C** (heterogeneous) - **T1**:
  Result tensor.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input to float tensors.
* **T1** in (
  tensor(bool)
  ):
  Constrain output to boolean tensor.
