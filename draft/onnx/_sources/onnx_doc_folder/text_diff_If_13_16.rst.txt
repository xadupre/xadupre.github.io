
.. _l-onnx-op-if-d13-16:

If - 13 vs 16
=============

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_If_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/If13
    +++ b/If16
    @@ -1 +1 @@
      If conditional
  
      **Attributes**
  
      * **else_branch** (required):
        Graph to run if condition is false. Has N outputs: values you wish
        to be live-out to the enclosing scope. The number of outputs must
        match the number of outputs in the then_branch.
      * **then_branch** (required):
        Graph to run if condition is true. Has N outputs: values you wish to
        be live-out to the enclosing scope. The number of outputs must match
        the number of outputs in the else_branch.
  
      **Inputs**
  
      * **cond** (heterogeneous) - **B**:
        Condition for the if
  
      **Outputs**
  
      Between 1 and 2147483647 outputs.
  
      * **outputs** (variadic) - **V**:
        Values that are live-out to the enclosing scope. The return values
        in the then_branch and else_branch must be of the same data
        type. The then_branch and else_branch may produce tensors with
        the same element type and different shapes. If corresponding outputs
        from the then-branch and the else-branch have static shapes S1 and
        S2, then the shape of the corresponding output variable of the if-
        node (if present) must be compatible with both S1 and S2 as it
        represents the union of both possible shapes.For example, if in a
        model file, the first output of then_branch is typed float tensor
        with shape [2] and the first output of else_branch is another
        float tensor with shape [3], If's first output should have (a) no
        shape set, or (b) a shape of rank 1 with neither dim_value nor
        dim_param set, or (c) a shape of rank 1 with a unique dim_param.
        In contrast, the first output cannot have the shape [2] since [2]
        and [3] are not compatible.
  
      **Type Constraints**
  
      * **V** in (
    -   optional(seq(tensor(bfloat16))),
    -   optional(seq(tensor(bool))),
    -   optional(seq(tensor(complex128))),
    -   optional(seq(tensor(complex64))),
    -   optional(seq(tensor(double))),
    -   optional(seq(tensor(float))),
    -   optional(seq(tensor(float16))),
    -   optional(seq(tensor(int16))),
    -   optional(seq(tensor(int32))),
    -   optional(seq(tensor(int64))),
    -   optional(seq(tensor(int8))),
    -   optional(seq(tensor(string))),
    -   optional(seq(tensor(uint16))),
    -   optional(seq(tensor(uint32))),
    -   optional(seq(tensor(uint64))),
    -   optional(seq(tensor(uint8))),
    -   optional(tensor(bfloat16)),
    -   optional(tensor(bool)),
    -   optional(tensor(complex128)),
    -   optional(tensor(complex64)),
    -   optional(tensor(double)),
    -   optional(tensor(float)),
    -   optional(tensor(float16)),
    -   optional(tensor(int16)),
    -   optional(tensor(int32)),
    -   optional(tensor(int64)),
    -   optional(tensor(int8)),
    -   optional(tensor(string)),
    -   optional(tensor(uint16)),
    -   optional(tensor(uint32)),
    -   optional(tensor(uint64)),
    -   optional(tensor(uint8)),
    -   seq(tensor(bfloat16)),
        seq(tensor(bool)),
        seq(tensor(complex128)),
        seq(tensor(complex64)),
        seq(tensor(double)),
        seq(tensor(float)),
        seq(tensor(float16)),
        seq(tensor(int16)),
        seq(tensor(int32)),
        seq(tensor(int64)),
        seq(tensor(int8)),
        seq(tensor(string)),
        seq(tensor(uint16)),
        seq(tensor(uint32)),
        seq(tensor(uint64)),
        seq(tensor(uint8)),
    -   tensor(bfloat16),
        tensor(bool),
        tensor(complex128),
        tensor(complex64),
        tensor(double),
        tensor(float),
        tensor(float16),
        tensor(int16),
        tensor(int32),
        tensor(int64),
        tensor(int8),
        tensor(string),
        tensor(uint16),
        tensor(uint32),
        tensor(uint64),
        tensor(uint8)
        ):
    +   All Tensor and Sequence types
    -   All Tensor, Sequence(Tensor), Optional(Tensor), and
    -   Optional(Sequence(Tensor)) types
      * **B** in (
        tensor(bool)
        ):
        Only bool
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_If_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>