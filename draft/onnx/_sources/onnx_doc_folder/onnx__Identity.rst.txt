
.. _l-onnx-doc-Identity:

========
Identity
========

.. contents::
    :local:


.. _l-onnx-op-identity-16:

Identity - 16
=============

**Version**

* **name**: `Identity (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Identity>`_
* **domain**: **main**
* **since_version**: **16**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 16**.

**Summary**

Identity operator

**Inputs**

* **input** (heterogeneous) - **V**:
  Input tensor

**Outputs**

* **output** (heterogeneous) - **V**:
  Tensor to copy input into.

**Type Constraints**

* **V** in (
  optional(seq(tensor(bool))),
  optional(seq(tensor(complex128))),
  optional(seq(tensor(complex64))),
  optional(seq(tensor(double))),
  optional(seq(tensor(float))),
  optional(seq(tensor(float16))),
  optional(seq(tensor(int16))),
  optional(seq(tensor(int32))),
  optional(seq(tensor(int64))),
  optional(seq(tensor(int8))),
  optional(seq(tensor(string))),
  optional(seq(tensor(uint16))),
  optional(seq(tensor(uint32))),
  optional(seq(tensor(uint64))),
  optional(seq(tensor(uint8))),
  optional(tensor(bool)),
  optional(tensor(complex128)),
  optional(tensor(complex64)),
  optional(tensor(double)),
  optional(tensor(float)),
  optional(tensor(float16)),
  optional(tensor(int16)),
  optional(tensor(int32)),
  optional(tensor(int64)),
  optional(tensor(int8)),
  optional(tensor(string)),
  optional(tensor(uint16)),
  optional(tensor(uint32)),
  optional(tensor(uint64)),
  optional(tensor(uint8)),
  seq(tensor(bool)),
  seq(tensor(complex128)),
  seq(tensor(complex64)),
  seq(tensor(double)),
  seq(tensor(float)),
  seq(tensor(float16)),
  seq(tensor(int16)),
  seq(tensor(int32)),
  seq(tensor(int64)),
  seq(tensor(int8)),
  seq(tensor(string)),
  seq(tensor(uint16)),
  seq(tensor(uint32)),
  seq(tensor(uint64)),
  seq(tensor(uint8)),
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor, sequence, and
  optional types.

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Identity&#34;,
        inputs=[&#34;x&#34;],
        outputs=[&#34;y&#34;],
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    expect(node, inputs=[data], outputs=[data], name=&#34;test_identity&#34;)

**_sequence**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Identity&#34;,
        inputs=[&#34;x&#34;],
        outputs=[&#34;y&#34;],
    )

    data = [
        np.array(
            [
                [
                    [
                        [1, 2],
                        [3, 4],
                    ]
                ]
            ],
            dtype=np.float32,
        ),
        np.array(
            [
                [
                    [
                        [2, 3],
                        [1, 5],
                    ]
                ]
            ],
            dtype=np.float32,
        ),
    ]

    expect(node, inputs=[data], outputs=[data], name=&#34;test_identity_sequence&#34;)

**_identity_opt**

::

    import numpy as np
    import onnx

    ten_in_tp = onnx.helper.make_tensor_type_proto(
        onnx.TensorProto.FLOAT, shape=[5]
    )
    seq_in_tp = onnx.helper.make_sequence_type_proto(ten_in_tp)
    opt_in_tp = onnx.helper.make_optional_type_proto(seq_in_tp)

    identity_node = onnx.helper.make_node(
        &#34;Identity&#34;, inputs=[&#34;opt_in&#34;], outputs=[&#34;opt_out&#34;]
    )

    x = [np.array([1, 2, 3, 4, 5]).astype(np.float32)]

    expect(
        identity_node,
        inputs=[x],
        outputs=[x],
        name=&#34;test_identity_opt&#34;,
        opset_imports=[onnx.helper.make_opsetid(&#34;&#34;, 16)],
        input_type_protos=[opt_in_tp],
        output_type_protos=[opt_in_tp],
    )

.. toctree::

    text_diff_Identity_14_16

.. _l-onnx-op-identity-14:

Identity - 14
=============

**Version**

* **name**: `Identity (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Identity>`_
* **domain**: **main**
* **since_version**: **14**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 14**.

**Summary**

Identity operator

**Inputs**

* **input** (heterogeneous) - **V**:
  Input tensor

**Outputs**

* **output** (heterogeneous) - **V**:
  Tensor to copy input into.

**Type Constraints**

* **V** in (
  seq(tensor(bool)),
  seq(tensor(complex128)),
  seq(tensor(complex64)),
  seq(tensor(double)),
  seq(tensor(float)),
  seq(tensor(float16)),
  seq(tensor(int16)),
  seq(tensor(int32)),
  seq(tensor(int64)),
  seq(tensor(int8)),
  seq(tensor(string)),
  seq(tensor(uint16)),
  seq(tensor(uint32)),
  seq(tensor(uint64)),
  seq(tensor(uint8)),
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor and sequence types.

.. toctree::

    text_diff_Identity_13_14

.. _l-onnx-op-identity-13:

Identity - 13
=============

**Version**

* **name**: `Identity (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Identity>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Identity operator

**Inputs**

* **input** (heterogeneous) - **T**:
  Input tensor

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor to copy input into.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

.. toctree::

    text_diff_Identity_1_13

.. _l-onnx-op-identity-1:

Identity - 1
============

**Version**

* **name**: `Identity (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Identity>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Identity operator

**Inputs**

* **input** (heterogeneous) - **T**:
  Input tensor

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor to copy input into.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.
