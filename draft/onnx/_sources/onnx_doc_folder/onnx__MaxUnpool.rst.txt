
.. _l-onnx-doc-MaxUnpool:

=========
MaxUnpool
=========

.. contents::
    :local:


.. _l-onnx-op-maxunpool-11:

MaxUnpool - 11
==============

**Version**

* **name**: `MaxUnpool (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#MaxUnpool>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

MaxUnpool essentially computes the partial inverse of the MaxPool op.
 The input information to this op is typically the output information from a MaxPool op. The first
 input tensor X is the tensor that needs to be unpooled, which is typically the pooled tensor (first output)
 from MaxPool. The second input tensor, I, contains the indices to the (locally maximal) elements corrsponding
 to the elements in the first input tensor X. Input tensor I is typically the second output of the MaxPool op.
 The third (optional) input is a tensor that specifies the output size of the unpooling operation.

MaxUnpool is intended to do &#39;partial&#39; inverse of the MaxPool op. &#39;Partial&#39; because all the non-maximal
 values from the original input to MaxPool are set to zero in the output of the MaxUnpool op. Pooling
 the result of an unpooling operation should give back the original input to the unpooling op.

MaxUnpool can produce the same output size for several input sizes, which makes unpooling op ambiguous.
 The third input argument, output_size, is meant to disambiguate the op and produce output tensor of
 known/predictable size.

In addition to the inputs, MaxUnpool takes three attributes, namely kernel_shape, strides, and pads,
 which define the exact unpooling op. The attributes typically have the same values as the corrsponding
 pooling op that the unpooling op is trying to invert.

**Attributes**

* **kernel_shape** (required):
  The size of the kernel along each axis.
* **pads**:
  Padding for the beginning and ending along each spatial axis, it can
  take any value greater than or equal to 0. The value represent the
  number of pixels added to the beginning and end part of the
  corresponding axis. `pads` format should be as follow [x1_begin,
  x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels
  added at the beginning of axis `i` and xi_end, the number of pixels
  added at the end of axis `i`. This attribute cannot be used
  simultaneously with auto_pad attribute. If not present, the padding
  defaults to 0 along start and end of each spatial axis.
* **strides**:
  Stride along each spatial axis. If not present, the stride defaults
  to 1 along each spatial axis.

**Inputs**

Between 2 and 3 inputs.

* **X** (heterogeneous) - **T1**:
  Input data tensor that has to be unpooled. This tensor is typically
  the first output of the MaxPool op.Dimensions for image case are (N
  x C x H x W), where N is the batch size, C is the number of
  channels, and H and W are the height and the width of the data. For
  non-image case, the dimensions are in the form of (N x C x D1 x D2
  ... Dn), where N is the batch size. Optionally, if dimension
  denotation is in effect, the operation expects the input data tensor
  to arrive with the dimension denotation of [DATA_BATCH,
  DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].
* **I** (heterogeneous) - **T2**:
  Input data tensor containing the indices corresponding to elements
  in the first input tensor X.This tensor is typically the second
  output of the MaxPool op.Dimensions must be the same as input tensor
  X. The indices are linear, i.e. computed considering the tensor as
  flattened 1-D tensor, assuming row-major storage. Also, the linear
  indices should not consider padding. So the values in indices are in
  the range [0, N x C x D1 x ... x Dn).
* **output_shape** (optional, heterogeneous) - **T2**:
  The shape of the output can be explicitly set which will cause pads
  values to be auto generated. If &#39;output_shape&#39; is specified, &#39;pads&#39;
  values are ignored.

**Outputs**

* **output** (heterogeneous) - **T1**:
  Output data tensor that contains the result of the unpooling.

**Type Constraints**

* **T1** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
* **T2** in (
  tensor(int64)
  ):
  Constrain index tensor to int64

**Examples**

**_without_output_shape**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;MaxUnpool&#34;,
        inputs=[&#34;xT&#34;, &#34;xI&#34;],
        outputs=[&#34;y&#34;],
        kernel_shape=[2, 2],
        strides=[2, 2],
    )
    xT = np.array([[[[1, 2], [3, 4]]]], dtype=np.float32)
    xI = np.array([[[[5, 7], [13, 15]]]], dtype=np.int64)
    y = np.array(
        [[[[0, 0, 0, 0], [0, 1, 0, 2], [0, 0, 0, 0], [0, 3, 0, 4]]]],
        dtype=np.float32,
    )
    expect(
        node,
        inputs=[xT, xI],
        outputs=[y],
        name=&#34;test_maxunpool_export_without_output_shape&#34;,
    )

**_with_output_shape**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;MaxUnpool&#34;,
        inputs=[&#34;xT&#34;, &#34;xI&#34;, &#34;output_shape&#34;],
        outputs=[&#34;y&#34;],
        kernel_shape=[2, 2],
        strides=[2, 2],
    )
    xT = np.array([[[[5, 6], [7, 8]]]], dtype=np.float32)
    xI = np.array([[[[5, 7], [13, 15]]]], dtype=np.int64)
    output_shape = np.array((1, 1, 5, 5), dtype=np.int64)
    y = np.array(
        [
            [
                [
                    [0, 0, 0, 0, 0],
                    [0, 5, 0, 6, 0],
                    [0, 0, 0, 0, 0],
                    [0, 7, 0, 8, 0],
                    [0, 0, 0, 0, 0],
                ]
            ]
        ],
        dtype=np.float32,
    )
    expect(
        node,
        inputs=[xT, xI, output_shape],
        outputs=[y],
        name=&#34;test_maxunpool_export_with_output_shape&#34;,
    )

.. toctree::

    text_diff_MaxUnpool_9_11

.. _l-onnx-op-maxunpool-9:

MaxUnpool - 9
=============

**Version**

* **name**: `MaxUnpool (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#MaxUnpool>`_
* **domain**: **main**
* **since_version**: **9**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 9**.

**Summary**

MaxUnpool essentially computes the partial inverse of the MaxPool op.
 The input information to this op is typically the output information from a MaxPool op. The first
 input tensor X is the tensor that needs to be unpooled, which is typically the pooled tensor (first output)
 from MaxPool. The second input tensor, I, contains the indices to the (locally maximal) elements corrsponding
 to the elements in the first input tensor X. Input tensor I is typically the second output of the MaxPool op.
 The third (optional) input is a tensor that specifies the output size of the unpooling operation.

MaxUnpool is intended to do &#39;partial&#39; inverse of the MaxPool op. &#39;Partial&#39; because all the non-maximal
 values from the original input to MaxPool are set to zero in the output of the MaxUnpool op. Pooling
 the result of an unpooling operation should give back the original input to the unpooling op.

MaxUnpool can produce the same output size for several input sizes, which makes unpooling op ambiguous.
 The third input argument, output_size, is meant to disambiguate the op and produce output tensor of
 known/predictable size.

In addition to the inputs, MaxUnpool takes three attributes, namely kernel_shape, strides, and pads,
 which define the exact unpooling op. The attributes typically have the same values as the corrsponding
 pooling op that the unpooling op is trying to invert.

**Attributes**

* **kernel_shape** (required):
  The size of the kernel along each axis.
* **pads**:
  Padding for the beginning and ending along each spatial axis, it can
  take any value greater than or equal to 0. The value represent the
  number of pixels added to the beginning and end part of the
  corresponding axis. `pads` format should be as follow [x1_begin,
  x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels
  added at the beginning of axis `i` and xi_end, the number of pixels
  added at the end of axis `i`. This attribute cannot be used
  simultaneously with auto_pad attribute. If not present, the padding
  defaults to 0 along start and end of each spatial axis.
* **strides**:
  Stride along each spatial axis.

**Inputs**

Between 2 and 3 inputs.

* **X** (heterogeneous) - **T1**:
  Input data tensor that has to be unpooled. This tensor is typically
  the first output of the MaxPool op.Dimensions for image case are (N
  x C x H x W), where N is the batch size, C is the number of
  channels, and H and W are the height and the width of the data. For
  non-image case, the dimensions are in the form of (N x C x D1 x D2
  ... Dn), where N is the batch size. Optionally, if dimension
  denotation is in effect, the operation expects the input data tensor
  to arrive with the dimension denotation of [DATA_BATCH,
  DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].
* **I** (heterogeneous) - **T2**:
  Input data tensor containing the indices corresponding to elements
  in the first input tensor X.This tensor is typically the second
  output of the MaxPool op.Dimensions must be the same as input tensor
  X. The indices are linear, i.e. computed considering the tensor as
  flattened 1-D tensor, assuming row-major storage. Also, the linear
  indices should not consider padding. So the values in indices are in
  the range [0, N x C x D1 x ... x Dn).
* **output_shape** (optional, heterogeneous) - **T2**:
  The shape of the output can be explicitly set which will cause pads
  values to be auto generated. If &#39;output_shape&#39; is specified, &#39;pads&#39;
  values are ignored.

**Outputs**

* **output** (heterogeneous) - **T1**:
  Output data tensor that contains the result of the unpooling.

**Type Constraints**

* **T1** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
* **T2** in (
  tensor(int64)
  ):
  Constrain index tensor to int64
