LRN - 1 vs 13
=============

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_LRN_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/LRN1
    +++ b/LRN13
    @@ -1 +1 @@
      Local Response Normalization proposed in the [AlexNet paper](https://papers.nips.cc/paper/4824-imagenet-classification-with-deep-convolutional-neural-networks.pdf).
      It normalizes over local input regions.
      The local region is defined across the channels. For an element X[n, c, d1, ..., dk] in a tensor
      of shape (N x C x D1 x D2, ..., Dk), its region is
      {X[n, i, d1, ..., dk] | max(0, c - floor((size - 1) / 2)) &amp;lt;= i &amp;lt;= min(C - 1, c + ceil((size - 1) / 2))}.
  
      square_sum[n, c, d1, ..., dk] = sum(X[n, i, d1, ..., dk] ^ 2),
      where max(0, c - floor((size - 1) / 2)) &amp;lt;= i &amp;lt;= min(C - 1, c + ceil((size - 1) / 2)).
  
      Y[n, c, d1, ..., dk] = X[n, c, d1, ..., dk] / (bias + alpha / size * square_sum[n, c, d1, ..., dk] ) ^ beta
  
      **Attributes**
  
      * **alpha**:
        Scaling parameter.
      * **beta**:
        The exponent.
      * **bias**:
  
      * **size** (required):
        The number of channels to sum over
  
      **Inputs**
  
      * **X** (heterogeneous) - **T**:
        Input data tensor from the previous operator; dimensions for image
        case are (N x C x H x W), where N is the batch size, C is the number
        of channels, and H and W are the height and the width of the data.
        For non image case, the dimensions are in the form of (N x C x D1 x
        D2 ... Dn), where N is the batch size. Optionally, if dimension
        denotation is in effect, the operation expects the input data tensor
        to arrive with the dimension denotation of [DATA_BATCH,
        DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].
  
      **Outputs**
  
      * **Y** (heterogeneous) - **T**:
        Output tensor, which has the shape and type as input tensor
  
      **Type Constraints**
  
      * **T** in (
    +   tensor(bfloat16),
        tensor(double),
        tensor(float),
        tensor(float16)
        ):
        Constrain input and output  types to float tensors.
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_LRN_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>