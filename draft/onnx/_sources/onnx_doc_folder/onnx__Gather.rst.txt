
.. _l-onnx-doc-Gather:

======
Gather
======

.. contents::
    :local:


.. _l-onnx-op-gather-13:

Gather - 13
===========

**Version**

* **name**: `Gather (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Gather>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Given `data` tensor of rank r &gt;= 1, and `indices` tensor of rank q, gather
entries of the axis dimension of `data` (by default outer-most one as axis=0) indexed by `indices`, and concatenates
them in an output tensor of rank q + (r - 1).

axis = 0 :

Let
k = indices[i_{0}, ..., i_{q-1}]
Then
output[i_{0}, ..., i_{q-1}, j_{0}, ..., j_{r-2}] = input[k , j_{0}, ..., j_{r-2}]

::

      data = [
          [1.0, 1.2],
          [2.3, 3.4],
          [4.5, 5.7],
      ]
      indices = [
          [0, 1],
          [1, 2],
      ]
      output = [
          [
              [1.0, 1.2],
              [2.3, 3.4],
          ],
          [
              [2.3, 3.4],
              [4.5, 5.7],
          ],
      ]

axis = 1 :

Let
k = indices[i_{0}, ..., i_{q-1}]
Then
output[j_{0}, i_{0}, ..., i_{q-1}, j_{1}, ..., j_{r-2}] = input[j_{0}, k, j_{1}, ..., j_{r-2}]

::

      data = [
          [1.0, 1.2, 1.9],
          [2.3, 3.4, 3.9],
          [4.5, 5.7, 5.9],
      ]
      indices = [
          [0, 2],
      ]
      axis = 1,
      output = [
              [[1.0, 1.9]],
              [[2.3, 3.9]],
              [[4.5, 5.9]],
      ]

**Attributes**

* **axis**:
  Which axis to gather on. Negative value means counting dimensions
  from the back. Accepted range is [-r, r-1] where r = rank(data).

**Inputs**

* **data** (heterogeneous) - **T**:
  Tensor of rank r &gt;= 1.
* **indices** (heterogeneous) - **Tind**:
  Tensor of int32/int64 indices, of any rank q. All index values are
  expected to be within bounds [-s, s-1] along axis of size s. It is
  an error if any of the index values are out of bounds.

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor of rank q + (r - 1).

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to any tensor type.
* **Tind** in (
  tensor(int32),
  tensor(int64)
  ):
  Constrain indices to integer types

**Examples**

**_gather_0**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Gather&#34;,
        inputs=[&#34;data&#34;, &#34;indices&#34;],
        outputs=[&#34;y&#34;],
        axis=0,
    )
    data = np.random.randn(5, 4, 3, 2).astype(np.float32)
    indices = np.array([0, 1, 3])
    y = np.take(data, indices, axis=0)

    expect(
        node,
        inputs=[data, indices.astype(np.int64)],
        outputs=[y],
        name=&#34;test_gather_0&#34;,
    )

**_gather_1**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Gather&#34;,
        inputs=[&#34;data&#34;, &#34;indices&#34;],
        outputs=[&#34;y&#34;],
        axis=1,
    )
    data = np.random.randn(5, 4, 3, 2).astype(np.float32)
    indices = np.array([0, 1, 3])
    y = np.take(data, indices, axis=1)

    expect(
        node,
        inputs=[data, indices.astype(np.int64)],
        outputs=[y],
        name=&#34;test_gather_1&#34;,
    )

**_gather_2d_indices**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Gather&#34;,
        inputs=[&#34;data&#34;, &#34;indices&#34;],
        outputs=[&#34;y&#34;],
        axis=1,
    )
    data = np.random.randn(3, 3).astype(np.float32)
    indices = np.array([[0, 2]])
    y = np.take(data, indices, axis=1)

    expect(
        node,
        inputs=[data, indices.astype(np.int64)],
        outputs=[y],
        name=&#34;test_gather_2d_indices&#34;,
    )

**_gather_negative_indices**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Gather&#34;,
        inputs=[&#34;data&#34;, &#34;indices&#34;],
        outputs=[&#34;y&#34;],
        axis=0,
    )
    data = np.arange(10).astype(np.float32)
    indices = np.array([0, -9, -10])
    y = np.take(data, indices, axis=0)

    # print(y)
    # [0. 1. 0.]

    expect(
        node,
        inputs=[data, indices.astype(np.int64)],
        outputs=[y],
        name=&#34;test_gather_negative_indices&#34;,
    )

.. toctree::

    text_diff_Gather_11_13

.. _l-onnx-op-gather-11:

Gather - 11
===========

**Version**

* **name**: `Gather (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Gather>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Given `data` tensor of rank r &gt;= 1, and `indices` tensor of rank q, gather
entries of the axis dimension of `data` (by default outer-most one as axis=0) indexed by `indices`, and concatenates
them in an output tensor of rank q + (r - 1).

axis = 0 :

Let
k = indices[i_{0}, ..., i_{q-1}]
Then
output[i_{0}, ..., i_{q-1}, j_{0}, ..., j_{r-2}] = input[k , j_{0}, ..., j_{r-2}]

::

      data = [
          [1.0, 1.2],
          [2.3, 3.4],
          [4.5, 5.7],
      ]
      indices = [
          [0, 1],
          [1, 2],
      ]
      output = [
          [
              [1.0, 1.2],
              [2.3, 3.4],
          ],
          [
              [2.3, 3.4],
              [4.5, 5.7],
          ],
      ]

axis = 1 :

Let
k = indices[i_{0}, ..., i_{q-1}]
Then
output[i_{0}, ..., i_{q-1}, j_{0}, ..., j_{r-2}] = input[j_{0}, k, j_{1}, ..., j_{r-2}]

::

      data = [
          [1.0, 1.2, 1.9],
          [2.3, 3.4, 3.9],
          [4.5, 5.7, 5.9],
      ]
      indices = [
          [0, 2],
      ]
      axis = 1,
      output = [
          [
              [1.0, 1.9],
              [2.3, 3.9],
              [4.5, 5.9],
          ],
      ]

**Attributes**

* **axis**:
  Which axis to gather on. Negative value means counting dimensions
  from the back. Accepted range is [-r, r-1] where r = rank(data).

**Inputs**

* **data** (heterogeneous) - **T**:
  Tensor of rank r &gt;= 1.
* **indices** (heterogeneous) - **Tind**:
  Tensor of int32/int64 indices, of any rank q. All index values are
  expected to be within bounds [-s, s-1] along axis of size s. It is
  an error if any of the index values are out of bounds.

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor of rank q + (r - 1).

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to any tensor type.
* **Tind** in (
  tensor(int32),
  tensor(int64)
  ):
  Constrain indices to integer types

.. toctree::

    text_diff_Gather_1_11

.. _l-onnx-op-gather-1:

Gather - 1
==========

**Version**

* **name**: `Gather (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Gather>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Given `data` tensor of rank r &gt;= 1, and `indices` tensor of rank q, gather
entries of the axis dimension of `data` (by default outer-most one as axis=0) indexed by `indices`, and concatenates
them in an output tensor of rank q + (r - 1).
Example 1:
::

      data = [
          [1.0, 1.2],
          [2.3, 3.4],
          [4.5, 5.7],
      ]
      indices = [
          [0, 1],
          [1, 2],
      ]
      output = [
          [
              [1.0, 1.2],
              [2.3, 3.4],
          ],
          [
              [2.3, 3.4],
              [4.5, 5.7],
          ],
      ]

Example 2:
::

      data = [
          [1.0, 1.2, 1.9],
          [2.3, 3.4, 3.9],
          [4.5, 5.7, 5.9],
      ]
      indices = [
          [0, 2],
      ]
      axis = 1,
      output = [
          [
              [1.0, 1.9],
              [2.3, 3.9],
              [4.5, 5.9],
          ],
      ]

**Attributes**

* **axis**:
  Which axis to gather on. Negative value means counting dimensions
  from the back. Accepted range is [-r, r-1]

**Inputs**

* **data** (heterogeneous) - **T**:
  Tensor of rank r &gt;= 1.
* **indices** (heterogeneous) - **Tind**:
  Tensor of int32/int64 indices, of any rank q. All index values are
  expected to be within bounds. It is an error if any of the index
  values are out of bounds.

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor of rank q + (r - 1).

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to any tensor type.
* **Tind** in (
  tensor(int32),
  tensor(int64)
  ):
  Constrain indices to integer types
