Mod - 10 vs 13
==============

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_Mod_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/Mod10
    +++ b/Mod13
    @@ -1 +1 @@
      Performs element-wise binary modulus (with Numpy-style broadcasting support).
        The sign of the remainder is the same as that of the Divisor.
  
        Mod operator can also behave like C fmod() or numpy.fmod. In this case, the sign of the remainder however, will be the same as the Dividend
        (in contrast to integer mod). To force a behavior like numpy.fmod() an 'fmod' Attribute is provided.
        This attribute is set to 0 by default causing the behavior to be like integer mod.
        Setting this attribute to 1 causes the remainder to be calculated similar to that of numpy.fmod().
  
        If the input type is floating point, then fmod attribute must be set to 1.
  
        In case of dividend being zero, the results will be platform dependent.
  
      This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check Broadcasting in ONNX &amp;lt;https://github.com/onnx/onnx/blob/master/docs/Broadcasting.md&amp;gt;_.
  
      **Attributes**
  
      * **fmod**:
        Whether the operator should behave like fmod (default=0 meaning it
        will do integer mods); Set this to 1 to force fmod treatment
  
      **Inputs**
  
      * **A** (heterogeneous) - **T**:
        Dividend tensor
      * **B** (heterogeneous) - **T**:
        Divisor tensor
  
      **Outputs**
  
      * **C** (heterogeneous) - **T**:
        Remainder tensor
  
      **Type Constraints**
  
      * **T** in (
    +   tensor(bfloat16),
        tensor(double),
        tensor(float),
        tensor(float16),
        tensor(int16),
        tensor(int32),
        tensor(int64),
        tensor(int8),
        tensor(uint16),
        tensor(uint32),
        tensor(uint64),
        tensor(uint8)
        ):
        Constrain input and output types to high-precision numeric tensors.
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_Mod_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>