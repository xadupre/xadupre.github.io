
.. _l-onnx-doc-Transpose:

=========
Transpose
=========

.. contents::
    :local:


.. _l-onnx-op-transpose-13:

Transpose - 13
==============

**Version**

* **name**: `Transpose (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Transpose>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Transpose the input tensor similar to numpy.transpose. For example, when
perm=(1, 0, 2), given an input tensor of shape (1, 2, 3), the output shape
will be (2, 1, 3).

**Attributes**

* **perm**:
  A list of integers. By default, reverse the dimensions, otherwise
  permute the axes according to the values given.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **transposed** (heterogeneous) - **T**:
  Transposed output.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

**Examples**

**_default**

::

    import numpy as np
    import onnx

    shape = (2, 3, 4)
    data = np.random.random_sample(shape).astype(np.float32)

    node = onnx.helper.make_node(
        &#34;Transpose&#34;, inputs=[&#34;data&#34;], outputs=[&#34;transposed&#34;]
    )

    transposed = np.transpose(data)
    expect(node, inputs=[data], outputs=[transposed], name=&#34;test_transpose_default&#34;)

**_all_permutations**

::

    import numpy as np
    import onnx

    shape = (2, 3, 4)
    data = np.random.random_sample(shape).astype(np.float32)
    permutations = list(itertools.permutations(np.arange(len(shape))))

    for i in range(len(permutations)):
        node = onnx.helper.make_node(
            &#34;Transpose&#34;,
            inputs=[&#34;data&#34;],
            outputs=[&#34;transposed&#34;],
            perm=permutations[i],
        )
        transposed = np.transpose(data, permutations[i])
        expect(
            node,
            inputs=[data],
            outputs=[transposed],
            name=&#34;test_transpose_all_permutations_&#34; + str(i),
        )

.. toctree::

    text_diff_Transpose_1_13

.. _l-onnx-op-transpose-1:

Transpose - 1
=============

**Version**

* **name**: `Transpose (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Transpose>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Transpose the input tensor similar to numpy.transpose. For example, when
perm=(1, 0, 2), given an input tensor of shape (1, 2, 3), the output shape
will be (2, 1, 3).

**Attributes**

* **perm**:
  A list of integers. By default, reverse the dimensions, otherwise
  permute the axes according to the values given.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **transposed** (heterogeneous) - **T**:
  Transposed output.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.
