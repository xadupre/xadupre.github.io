
.. _l-onnx-doc-HardSigmoid:

===========
HardSigmoid
===========

.. contents::
    :local:


.. _l-onnx-op-hardsigmoid-6:

HardSigmoid - 6
===============

**Version**

* **name**: `HardSigmoid (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#HardSigmoid>`_
* **domain**: **main**
* **since_version**: **6**
* **function**: True
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 6**.

**Summary**

HardSigmoid takes one input data (Tensor<T>) and produces one output data
(Tensor<T>) where the HardSigmoid function, y = max(0, min(1, alpha * x + beta)),
is applied to the tensor elementwise.

**Attributes**

* **alpha**:
  Value of alpha.
* **beta**:
  Value of beta.

**Inputs**

* **X** (heterogeneous) - **T**:
  Input tensor

**Outputs**

* **Y** (heterogeneous) - **T**:
  Output tensor

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "HardSigmoid", inputs=["x"], outputs=["y"], alpha=0.5, beta=0.6
    )

    x = np.array([-1, 0, 1]).astype(np.float32)
    y = np.clip(x * 0.5 + 0.6, 0, 1)  # expected output [0.1, 0.6, 1.]
    expect(node, inputs=[x], outputs=[y], name="test_hardsigmoid_example")

    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.clip(x * 0.5 + 0.6, 0, 1)
    expect(node, inputs=[x], outputs=[y], name="test_hardsigmoid")

**_hardsigmoid_default**

::

    import numpy as np
    import onnx

    default_alpha = 0.2
    default_beta = 0.5
    node = onnx.helper.make_node(
        "HardSigmoid",
        inputs=["x"],
        outputs=["y"],
    )
    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.clip(x * default_alpha + default_beta, 0, 1)
    expect(node, inputs=[x], outputs=[y], name="test_hardsigmoid_default")

.. toctree::

    text_diff_HardSigmoid_1_6

.. _l-onnx-op-hardsigmoid-1:

HardSigmoid - 1
===============

**Version**

* **name**: `HardSigmoid (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#HardSigmoid>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: False

This version of the operator has been available
**since version 1**.

**Summary**

HardSigmoid takes one input data (Tensor<T>) and produces one output data
(Tensor<T>) where the HardSigmoid function, y = max(0, min(1, alpha * x + beta)),
is applied to the tensor elementwise.

**Attributes**

* **alpha**:
  Value of alpha default to 0.2
* **beta**:
  Value of beta default to 0.5
* **consumed_inputs**:
  legacy optimization attribute.

**Inputs**

* **X** (heterogeneous) - **T**:
  Input tensor

**Outputs**

* **Y** (heterogeneous) - **T**:
  Output tensor

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
