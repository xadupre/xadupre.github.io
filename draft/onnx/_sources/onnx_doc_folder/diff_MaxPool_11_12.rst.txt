MaxPool - 11 vs 12
==================

.. raw:: html


    <div id="div_MaxPool_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/MaxPool11
    +++ b/MaxPool12
    @@ -1 +1 @@
      MaxPool consumes an input tensor X and applies max pooling across
      the tensor according to kernel sizes, stride sizes, and pad lengths.
      max pooling consisting of computing the max on all values of a
      subset of the input tensor according to the kernel size and downsampling the
      data into the output tensor Y for further processing. The output spatial shape will be following:
      ::
  
          output_spatial_shape[i] = floor((input_spatial_shape[i] + pad_shape[i] - ((kernel_spatial_shape[i] - 1) * dilations[i] + 1)) / strides_spatial_shape[i] + 1)
  
      or
      ::
  
          output_spatial_shape[i] = ceil((input_spatial_shape[i] + pad_shape[i] - ((kernel_spatial_shape[i] - 1) * dilations[i] + 1)) / strides_spatial_shape[i] + 1)
  
      if ceil_mode is enabled
  
      ::
  
          * pad_shape[i] is sum of pads along axis i
  
      auto_pad is a DEPRECATED attribute. If you are using them currently, the output spatial shape will be following:
      ::
  
          VALID: output_spatial_shape[i] = ceil((input_spatial_shape[i] - ((kernel_spatial_shape[i] - 1) * dilations[i] + 1) + 1) / strides_spatial_shape[i])
          SAME_UPPER or SAME_LOWER: output_spatial_shape[i] = ceil(input_spatial_shape[i] / strides_spatial_shape[i])
  
      And pad shape will be following if SAME_UPPER or SAME_LOWER:
      ::
  
          pad_shape[i] = (output_spatial_shape[i] - 1) * strides_spatial_shape[i] + ((kernel_spatial_shape[i] - 1) * dilations[i] + 1) - input_spatial_shape[i]
  
      The output of each pooling window is maximum number of elements exclude pad.
  
      **Attributes**
  
      * **auto_pad**:
        auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID.
        Where default value is NOTSET, which means explicit padding is used.
    -   SAME_UPPER or SAME_LOWER mean pad the input so that the output
    ?                                                       ----
    +   SAME_UPPER or SAME_LOWER mean pad the input so that output_shape[i]
    ?                                                             +++++++++
    -   spatial size match the input.In case of odd number add the extra
    -   padding at the end for SAME_UPPER and at the beginning for
    -   SAME_LOWER. VALID mean no padding.
    +   = ceil(input_shape[i] / strides[i]) for each axis i. The padding
    +   is split between the two sides equally or almost equally (depending
    +   on whether it is even or odd). In case the padding is an odd number,
    +   the extra padding is added at the end for SAME_UPPER and at the
    +   beginning for SAME_LOWER.
      * **ceil_mode**:
        Whether to use ceil or floor (default) to compute the output shape.
      * **dilations**:
        Dilation value along each spatial axis of filter. If not present,
        the dilation defaults to 1 along each spatial axis.
      * **kernel_shape** (required):
        The size of the kernel along each axis.
      * **pads**:
        Padding for the beginning and ending along each spatial axis, it can
        take any value greater than or equal to 0. The value represent the
        number of pixels added to the beginning and end part of the
        corresponding axis. pads format should be as follow [x1_begin,
        x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels
        added at the beginning of axis i and xi_end, the number of pixels
        added at the end of axis i. This attribute cannot be used
        simultaneously with auto_pad attribute. If not present, the padding
        defaults to 0 along start and end of each spatial axis.
      * **storage_order**:
        The storage order of the tensor. 0 is row major, and 1 is column
        major.
      * **strides**:
        Stride along each spatial axis. If not present, the stride defaults
        to 1 along each spatial axis.
  
      **Inputs**
  
      * **X** (heterogeneous) - **T**:
        Input data tensor from the previous operator; dimensions for image
        case are (N x C x H x W), where N is the batch size, C is the number
        of channels, and H and W are the height and the width of the data.
        For non image case, the dimensions are in the form of (N x C x D1 x
        D2 ... Dn), where N is the batch size. Optionally, if dimension
        denotation is in effect, the operation expects the input data tensor
        to arrive with the dimension denotation of [DATA_BATCH,
        DATA_CHANNEL, DATA_FEATURE, DATA_FEATURE ...].
  
      **Outputs**
  
      Between 1 and 2 outputs.
  
      * **Y** (heterogeneous) - **T**:
        Output data tensor from average or max pooling across the input
        tensor. Dimensions will vary based on various kernel, stride, and
        pad sizes. Floor value of the dimension is used
      * **Indices** (optional, heterogeneous) - **I**:
        Indices tensor from max pooling across the input tensor. The
        dimensions of indices are the same as output tensor. The values in
        indices of are the indices of the selected values during pooling.
        The indices are computed as flatten 1-D tensor, and the indices do
        not consider padding. So the values in indices are in [0, N x C x D1
        x ... x Dn).
  
      **Type Constraints**
  
      * **T** in (
        tensor(double),
        tensor(float),
    -   tensor(float16)
    +   tensor(float16),
    ?                  +
    +   tensor(int8),
    +   tensor(uint8)
        ):
    -   Constrain input and output types to float tensors.
    +   Constrain input and output types to float and 8 bit tensors.
    ?                                             ++++++++++
      * **I** in (
        tensor(int64)
        ):
        Constrain index tensor to int64
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_MaxPool_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>