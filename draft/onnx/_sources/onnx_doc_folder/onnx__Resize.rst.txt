
.. _l-onnx-doc-Resize:

======
Resize
======

.. contents::
    :local:


.. _l-onnx-op-resize-18:
Resize - 18
===========
**Version**
* **name**: `Resize (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Resize>`_
* **domain**: **main**
* **since_version**: **18**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 18**.

**Summary**

Resize the input tensor. In general, it calculates every value in the output tensor as a weighted average of neighborhood (a.k.a. sampling locations) in the input tensor.
Each dimension value of the output tensor is: <br/>
  `output_dimension = floor(input_dimension * (roi_end - roi_start) * scale)` <br/>
if input \"sizes\" is not specified.

**Attributes**
* **antialias**:
  If set to 1, "linear" and "cubic" interpolation modes will use an
  antialiasing filter when downscaling. Antialiasing is achieved by
  stretching the resampling filter by a factor max(1, 1 / scale),
  which means that when downsampling, more input pixels contribute to
  an output pixel.
* **axes**:
  If provided, it specifies a subset of axes that 'roi', 'scales' and
  'sizes' refer to. If not provided, all axes are assumed [0, 1, ...,
  r-1], where r = rank(data). Non-specified dimensions are interpreted
  as non-resizable. Negative value means counting dimensions from the
  back. Accepted range is [-r, r-1], where r = rank(data). Behavior is
  undefined if an axis is repeated.
* **coordinate_transformation_mode**:
   This attribute describes how to transform the coordinate in the
  resized tensor to the coordinate in the original tensor. <br/>  The
  coordinate of each dimension is transformed individually. Let's
  describe a case using axis x as an example. Denote x_resized as the
  coordinate of axis x in the resized tensor, x_original as the
  coordinate of axis x in the original tensor, `length_original` as
  the length of the original tensor in axis x, length_resized as the
  length of the resized tensor in axis x, roi_x = (start_x, end_x) of
  the axis x in input "roi", `scale = length_resized /
  length_original`, <br/>  if coordinate_transformation_mode is
  `"half_pixel"`, <br/> `x_original = (x_resized + 0.5) / scale - 0.5`
  <br/>  if coordinate_transformation_mode is `"pytorch_half_pixel"`,
  <br/> `x_original = length_resized > 1 ? (x_resized + 0.5) / scale -
  0.5 : 0` <br/>  if coordinate_transformation_mode is
  `"align_corners"`, <br/> `x_original = x_resized * (length_original
  - 1) / (length_resized - 1)` <br/>  if
  coordinate_transformation_mode is `"asymmetric"`, <br/> `x_original
  = x_resized / scale` <br/>  if coordinate_transformation_mode is
  `"tf_crop_and_resize"`, <br/> `x_original = length_resized > 1 ?
  start_x * (length_original - 1) + x_resized * (end_x - start_x) *
  (length_original - 1) / (length_resized - 1) : 0.5 * (start_x +
  end_x) * (length_original - 1)` .
* **cubic_coeff_a**:
  The coefficient 'a' used in cubic interpolation. Two common choice
  are -0.5 (in some cases of TensorFlow) and -0.75 (in PyTorch). Check
  out Equation (4) in https://ieeexplore.ieee.org/document/1163711 for
  the details. This attribute is valid only if mode is "cubic".
* **exclude_outside**:
  If set to 1, the weight of sampling locations outside the tensor
  will be set to 0 and the weight will be renormalized so that their
  sum is 1.0. The default value is 0.
* **extrapolation_value**:
  When coordinate_transformation_mode is "tf_crop_and_resize" and
  x_original is outside the range [0, length_original - 1], this value
  is used as the corresponding output value. Default is 0.0f.
* **keep_aspect_ratio_policy**:
   This attribute describes how to interpret the `sizes` input with
  regard to keeping the original aspect ratio of the input, and it is
  not applicable when the `scales` input is used. <br/>  Given a set
  of `sizes`, associated with a subset of `axes` (explicitly provided
  or default), and assuming `d = axes[i]`, with `i` being the index of
  the provided `sizes`. <br/>  If `keep_aspect_ratio_policy` is
  `"stretch"`, the original aspect ratio is disregarded, and the input
  is resized to the specified size: <br/> `out_size[d] = sizes[i]`
  <br/>  If `keep_aspect_ratio_policy` is `"not_larger"`, the sizes
  are adjusted so that no extent of the output is larger than the
  specified size, while keeping the original aspect ratio: <br/>
  `scale = Min(sizes[i] / in_size[d])` <br/> `out_size[d] =
  round_int(scale * in_size[i])` <br/>  If `keep_aspect_ratio_policy`
  is `"not_smaller"`, the sizes are adjusted so that no extent of the
  output is smaller than the specified size, while keeping the
  original aspect ratio: <br/> `scale = Max(sizes[i] / in_size[d])`
  <br/> `out_size[d] = round_int(scale * in_size[i])` <br/>  For non-
  resizable axes (those not specified in `axes`), the output size will
  be equal to the input size.  Note: `round_int` stands for computing
  the nearest integer value, rounding halfway cases up.
* **mode**:
  Three interpolation modes: "nearest" (default), "linear" and
  "cubic". The "linear" mode includes linear interpolation for 1D
  tensor and N-linear interpolation for N-D tensor (for example,
  bilinear interpolation for 2D tensor). The "cubic" mode includes
  cubic interpolation for 1D tensor and N-cubic interpolation for N-D
  tensor (for example, bicubic interpolation for 2D tensor).
* **nearest_mode**:
  Four modes: "round_prefer_floor" (default, as known as round half
  down), "round_prefer_ceil" (as known as round half up), "floor",
  "ceil". Only used by nearest interpolation. It indicates how to get
  "nearest" pixel in input tensor from x_original, so this attribute
  is valid only if "mode" is "nearest".

**Inputs**
Between 1 and 4 inputs.

* **X** (heterogeneous) - **T1**:
  N-D tensor
* **roi** (optional, heterogeneous) - **T2**:
  1-D tensor given as [start1, ..., startN, end1, ..., endN], where N
  is the rank of X or the length of axes, if provided. The RoIs'
  coordinates are normalized in the coordinate system of the input
  image. It only takes effect when coordinate_transformation_mode is
  "tf_crop_and_resize"
* **scales** (optional, heterogeneous) - **tensor(float)**:
  The scale array along each dimension. It takes value greater than 0.
  If it's less than 1, it's sampling down, otherwise, it's upsampling.
  The number of elements of 'scales' should be the same as the rank of
  input 'X' or the length of 'axes', if provided. One of 'scales' and
  'sizes' MUST be specified and it is an error if both are specified.
  If 'sizes' is needed, the user can use an empty string as the name
  of 'scales' in this operator's input list.
* **sizes** (optional, heterogeneous) - **tensor(int64)**:
  Target size of the output tensor. Its interpretation depends on the
  'keep_aspect_ratio_policy' value.The number of elements of 'sizes'
  should be the same as the rank of input 'X', or the length of
  'axes', if provided. Only one of 'scales' and 'sizes' can be
  specified.

**Outputs**

* **Y** (heterogeneous) - **T1**:
  N-D tensor after resizing

**Type Constraints**
* **T1** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input 'X' and output 'Y' to all tensor types.
* **T2** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain roi type to float or double.

**Examples**

**_resize_upsample_scales_nearest**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="nearest",
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 3.0], dtype=np.float32)

    # [[[[1. 1. 1. 2. 2. 2.]
    #    [1. 1. 1. 2. 2. 2.]
    #    [3. 3. 3. 4. 4. 4.]
    #    [3. 3. 3. 4. 4. 4.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_nearest",
    )

**_resize_downsample_scales_nearest**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="nearest",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 0.6, 0.6], dtype=np.float32)

    # [[[[1. 3.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_downsample_scales_nearest",
    )

**_resize_upsample_sizes_nearest**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 7, 8], dtype=np.int64)

    # [[[[1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), output_size=sizes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest",
    )

**_resize_downsample_sizes_nearest**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 1, 3], dtype=np.int64)

    # [[[[1. 2. 4.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), output_size=sizes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_downsample_sizes_nearest",
    )

**_resize_upsample_scales_linear**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="linear",
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 2.0], dtype=np.float32)

    # [[[[1.   1.25 1.75 2.  ]
    #    [1.5  1.75 2.25 2.5 ]
    #    [2.5  2.75 3.25 3.5 ]
    #    [3.   3.25 3.75 4.  ]]]]
    output = interpolate_nd(
        data, lambda x, _: linear_coeffs(x), scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_linear",
    )

**_resize_upsample_scales_linear_align_corners**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="linear",
        coordinate_transformation_mode="align_corners",
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 2.0], dtype=np.float32)

    # [[[[1.         1.33333333 1.66666667 2.        ]
    #    [1.66666667 2.         2.33333333 2.66666667]
    #    [2.33333333 2.66666667 3.         3.33333333]
    #    [3.         3.33333333 3.66666667 4.        ]]]]
    output = interpolate_nd(
        data,
        lambda x, _: linear_coeffs(x),
        scale_factors=scales,
        coordinate_transformation_mode="align_corners",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_linear_align_corners",
    )

**_resize_downsample_scales_linear**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="linear",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 0.6, 0.6], dtype=np.float32)

    # [[[[2.6666665 4.3333331]]]]
    output = interpolate_nd(
        data, lambda x, _: linear_coeffs(x), scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_downsample_scales_linear",
    )

**_resize_downsample_scales_linear_align_corners**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="linear",
        coordinate_transformation_mode="align_corners",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 0.6, 0.6], dtype=np.float32)

    # [[[[1.       3.142857]]]]
    output = interpolate_nd(
        data,
        lambda x, _: linear_coeffs(x),
        scale_factors=scales,
        coordinate_transformation_mode="align_corners",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_downsample_scales_linear_align_corners",
    )

**_resize_upsample_scales_cubic**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="cubic",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 2.0], dtype=np.float32)

    # [[[[ 0.47265625  0.76953125  1.24609375  1.875       2.28125
    #      2.91015625  3.38671875  3.68359375]
    #    [ 1.66015625  1.95703125  2.43359375  3.0625      3.46875
    #      4.09765625  4.57421875  4.87109375]
    #    [ 3.56640625  3.86328125  4.33984375  4.96875     5.375
    #      6.00390625  6.48046875  6.77734375]
    #    [ 6.08203125  6.37890625  6.85546875  7.484375    7.890625
    #      8.51953125  8.99609375  9.29296875]
    #    [ 7.70703125  8.00390625  8.48046875  9.109375    9.515625
    #     10.14453125 10.62109375 10.91796875]
    #    [10.22265625 10.51953125 10.99609375 11.625      12.03125
    #     12.66015625 13.13671875 13.43359375]
    #    [12.12890625 12.42578125 12.90234375 13.53125    13.9375
    #     14.56640625 15.04296875 15.33984375]
    #    [13.31640625 13.61328125 14.08984375 14.71875    15.125
    #     15.75390625 16.23046875 16.52734375]]]]
    output = interpolate_nd(
        data, lambda x, _: cubic_coeffs(x), scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_cubic",
    )

**_resize_upsample_scales_cubic_align_corners**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="cubic",
        coordinate_transformation_mode="align_corners",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 2.0], dtype=np.float32)

    # [[[[ 1.          1.34110787  1.80029155  2.32944606  2.67055394
    #      3.19970845  3.65889213  4.        ]
    #    [ 2.36443149  2.70553936  3.16472303  3.69387755  4.03498542
    #      4.56413994  5.02332362  5.36443149]
    #    [ 4.20116618  4.54227405  5.00145773  5.53061224  5.87172012
    #      6.40087464  6.86005831  7.20116618]
    #    [ 6.31778426  6.65889213  7.1180758   7.64723032  7.98833819
    #      8.51749271  8.97667638  9.31778426]
    #    [ 7.68221574  8.02332362  8.48250729  9.01166181  9.35276968
    #      9.8819242  10.34110787 10.68221574]
    #    [ 9.79883382 10.13994169 10.59912536 11.12827988 11.46938776
    #     11.99854227 12.45772595 12.79883382]
    #    [11.63556851 11.97667638 12.43586006 12.96501458 13.30612245
    #     13.83527697 14.29446064 14.63556851]
    #    [13.         13.34110787 13.80029155 14.32944606 14.67055394
    #     15.19970845 15.65889213 16.        ]]]]
    output = interpolate_nd(
        data,
        lambda x, _: cubic_coeffs(x),
        scale_factors=scales,
        coordinate_transformation_mode="align_corners",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_cubic_align_corners",
    )

**_resize_downsample_scales_cubic**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="cubic",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 0.8, 0.8], dtype=np.float32)

    # [[[[ 1.47119141  2.78125     4.08251953]
    #    [ 6.71142578  8.02148438  9.32275391]
    #    [11.91650391 13.2265625  14.52783203]]]]
    output = interpolate_nd(
        data, lambda x, _: cubic_coeffs(x), scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_downsample_scales_cubic",
    )

**_resize_downsample_scales_cubic_align_corners**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="cubic",
        coordinate_transformation_mode="align_corners",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 0.8, 0.8], dtype=np.float32)

    # [[[[ 1.          2.39519159  3.79038317]
    #    [ 6.58076634  7.97595793  9.37114951]
    #    [12.16153268 13.55672427 14.95191585]]]]
    output = interpolate_nd(
        data,
        lambda x, _: cubic_coeffs(x),
        scale_factors=scales,
        coordinate_transformation_mode="align_corners",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_downsample_scales_cubic_align_corners",
    )

**_resize_upsample_sizes_cubic**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="cubic",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 9, 10], dtype=np.int64)

    # [[[[ 0.45507922  0.64057922  0.97157922  1.42257922  1.90732922
    #      2.22332922  2.70807922  3.15907922  3.49007922  3.67557922]
    #    [ 1.39437963  1.57987963  1.91087963  2.36187963  2.84662963
    #      3.16262963  3.64737963  4.09837963  4.42937963  4.61487963]
    #    [ 2.95130693  3.13680693  3.46780693  3.91880693  4.40355693
    #      4.71955693  5.20430693  5.65530693  5.98630693  6.17180693]
    #    [ 5.20525069  5.39075069  5.72175069  6.17275069  6.65750069
    #      6.97350069  7.45825069  7.90925069  8.24025069  8.42575069]
    #    [ 6.88975     7.07525     7.40625     7.85725     8.342
    #      8.658       9.14275     9.59375     9.92475    10.11025   ]
    #    [ 8.57424931  8.75974931  9.09074931  9.54174931 10.02649931
    #     10.34249931 10.82724931 11.27824931 11.60924931 11.79474931]
    #    [10.82819307 11.01369307 11.34469307 11.79569307 12.28044307
    #     12.59644307 13.08119307 13.53219307 13.86319307 14.04869307]
    #    [12.38512037 12.57062037 12.90162037 13.35262037 13.83737037
    #     14.15337037 14.63812037 15.08912037 15.42012037 15.60562037]
    #    [13.32442078 13.50992078 13.84092078 14.29192078 14.77667078
    #     15.09267078 15.57742078 16.02842078 16.35942078 16.54492078]]]]
    output = interpolate_nd(
        data, lambda x, _: cubic_coeffs(x), output_size=sizes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_cubic",
    )

**_resize_downsample_sizes_cubic**
::
        node = onnx.helper.make_node(
            "Resize",
            inputs=["X", "", "", "sizes"],
            outputs=["Y"],
            mode="cubic",
        )

        data = np.array(
            [
                [
                    [
                        [1, 2, 3, 4],
                        [5, 6, 7, 8],
                        [9, 10, 11, 12],
                        [13, 14, 15, 16],
                    ]
                ]
            ],
            dtype=np.float32,
        )

        sizes = np.array([1, 1, 3, 3], dtype=np.int64)

        # [[[[ 1.63078704  3.00462963  4.37847222]
        #    [ 7.12615741  8.5         9.87384259]
        #    [12.62152778 13.99537037 15.36921296]]]]
        output = interpolate_nd(
            data, lambda x, _: cubic_coeffs(x), output_size=sizes
        ).astype(np.float32)

        expect(
            node,
            inputs=[data, sizes],
            outputs=[output],
            name="test_resize_downsample_sizes_cubic",
        )

    # TensorFlow v1 bicubic with half_pixel_centers=True

**_resize_upsample_scales_cubic_A_n0p5_exclude_outside**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="cubic",
        cubic_coeff_a=-0.5,
        exclude_outside=True,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 2.0], dtype=np.float32)

    # [[[[ 0.55882353  0.81494204  1.35698249  1.89705882  2.39705882
    #      2.93713516  3.47917561  3.73529412]
    #    [ 1.58329755  1.83941606  2.38145651  2.92153285  3.42153285
    #      3.96160918  4.50364964  4.75976814]
    #    [ 3.75145936  4.00757787  4.54961832  5.08969466  5.58969466
    #      6.12977099  6.67181144  6.92792995]
    #    [ 5.91176471  6.16788321  6.70992366  7.25        7.75
    #      8.29007634  8.83211679  9.08823529]
    #    [ 7.91176471  8.16788321  8.70992366  9.25        9.75
    #     10.29007634 10.83211679 11.08823529]
    #    [10.07207005 10.32818856 10.87022901 11.41030534 11.91030534
    #     12.45038168 12.99242213 13.24854064]
    #    [12.24023186 12.49635036 13.03839082 13.57846715 14.07846715
    #     14.61854349 15.16058394 15.41670245]
    #    [13.26470588 13.52082439 14.06286484 14.60294118 15.10294118
    #     15.64301751 16.18505796 16.44117647]]]]
    output = interpolate_nd(
        data,
        lambda x, _: cubic_coeffs(x, A=-0.5),
        scale_factors=scales,
        exclude_outside=True,
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_cubic_A_n0p5_exclude_outside",
    )

**_resize_downsample_scales_cubic_A_n0p5_exclude_outside**
::
        node = onnx.helper.make_node(
            "Resize",
            inputs=["X", "", "scales"],
            outputs=["Y"],
            mode="cubic",
            cubic_coeff_a=-0.5,
            exclude_outside=True,
        )

        data = np.array(
            [
                [
                    [
                        [1, 2, 3, 4],
                        [5, 6, 7, 8],
                        [9, 10, 11, 12],
                        [13, 14, 15, 16],
                    ]
                ]
            ],
            dtype=np.float32,
        )

        scales = np.array([1.0, 1.0, 0.8, 0.8], dtype=np.float32)

        # [[[[ 1.36812675  2.6695014   4.0133367 ]
        #    [ 6.57362535  7.875       9.2188353 ]
        #    [11.94896657 13.25034122 14.59417652]]]]
        output = interpolate_nd(
            data,
            lambda x, _: cubic_coeffs(x, A=-0.5),
            scale_factors=scales,
            exclude_outside=True,
        ).astype(np.float32)

        expect(
            node,
            inputs=[data, scales],
            outputs=[output],
            name="test_resize_downsample_scales_cubic_A_n0p5_exclude_outside",
        )

    # TensorFlow v1 bicubic with half_pixel_centers=False

**_resize_upsample_scales_cubic_asymmetric**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="cubic",
        coordinate_transformation_mode="asymmetric",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 2.0, 2.0], dtype=np.float32)

    # [[[[ 1.       1.40625  2.       2.5      3.       3.59375  4.
    #      4.09375]
    #    [ 2.625    3.03125  3.625    4.125    4.625    5.21875  5.625
    #      5.71875]
    #    [ 5.       5.40625  6.       6.5      7.       7.59375  8.
    #      8.09375]
    #    [ 7.       7.40625  8.       8.5      9.       9.59375 10.
    #     10.09375]
    #    [ 9.       9.40625 10.      10.5     11.      11.59375 12.
    #     12.09375]
    #    [11.375   11.78125 12.375   12.875   13.375   13.96875 14.375
    #     14.46875]
    #    [13.      13.40625 14.      14.5     15.      15.59375 16.
    #     16.09375]
    #    [13.375   13.78125 14.375   14.875   15.375   15.96875 16.375
    #     16.46875]]]]
    output = interpolate_nd(
        data,
        lambda x, _: cubic_coeffs(x, A=-0.75),
        scale_factors=scales,
        coordinate_transformation_mode="asymmetric",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_cubic_asymmetric",
    )

**_resize_tf_crop_and_resize**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "roi", "", "sizes"],
        outputs=["Y"],
        mode="linear",
        coordinate_transformation_mode="tf_crop_and_resize",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    # Note: for some rois, the result may be different with that of TF for inaccurate floating point
    roi = np.array([0, 0, 0.4, 0.6, 1, 1, 0.6, 0.8], dtype=np.float32)
    sizes = np.array([1, 1, 3, 3], dtype=np.int64)

    # [[[[ 7.6000004  7.9        8.2      ]
    #    [ 8.8        9.1        9.400001 ]
    #    [10.        10.3       10.6      ]]]]
    output = interpolate_nd(
        data,
        lambda x, _: linear_coeffs(x),
        output_size=sizes,
        roi=roi,
        coordinate_transformation_mode="tf_crop_and_resize",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, roi, sizes],
        outputs=[output],
        name="test_resize_tf_crop_and_resize",
    )

**_resize_tf_crop_and_resize_extrapolation_value**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "roi", "", "sizes"],
        outputs=["Y"],
        mode="linear",
        coordinate_transformation_mode="tf_crop_and_resize",
        extrapolation_value=10.0,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    # Note: for some rois, the result may be different with that of TF for inaccurate floating point
    roi = np.array([0, 0, 0.4, 0.6, 1, 1, 1.2, 1.7], dtype=np.float32)
    sizes = np.array([1, 1, 3, 3], dtype=np.int64)

    # [[[[ 7.6000004 10.        10.       ]
    #    [12.400001  10.        10.       ]
    #    [10.        10.        10.       ]]]]
    output = interpolate_nd(
        data,
        lambda x, _: linear_coeffs(x),
        output_size=sizes,
        roi=roi,
        coordinate_transformation_mode="tf_crop_and_resize",
        extrapolation_value=10.0,
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, roi, sizes],
        outputs=[output],
        name="test_resize_tf_crop_and_resize",
    )

**_resize_downsample_sizes_linear_pytorch_half_pixel**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="linear",
        coordinate_transformation_mode="pytorch_half_pixel",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 3, 1], dtype=np.int64)

    # [[[[ 1.6666666]
    #    [ 7.       ]
    #    [12.333333 ]]]]
    output = interpolate_nd(
        data,
        lambda x, _: linear_coeffs(x),
        output_size=sizes,
        coordinate_transformation_mode="pytorch_half_pixel",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_downsample_sizes_linear_pytorch_half_pixel",
    )

**_resize_upsample_sizes_nearest_floor_align_corners**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        coordinate_transformation_mode="align_corners",
        nearest_mode="floor",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 8, 8], dtype=np.int64)

    # [[[[ 1.  1.  1.  2.  2.  3.  3.  4.]
    #    [ 1.  1.  1.  2.  2.  3.  3.  4.]
    #    [ 1.  1.  1.  2.  2.  3.  3.  4.]
    #    [ 5.  5.  5.  6.  6.  7.  7.  8.]
    #    [ 5.  5.  5.  6.  6.  7.  7.  8.]
    #    [ 9.  9.  9. 10. 10. 11. 11. 12.]
    #    [ 9.  9.  9. 10. 10. 11. 11. 12.]
    #    [13. 13. 13. 14. 14. 15. 15. 16.]]]]
    output = interpolate_nd(
        data,
        lambda x, _: nearest_coeffs(x, mode="floor"),
        output_size=sizes,
        coordinate_transformation_mode="align_corners",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest_floor_align_corners",
    )

**_resize_upsample_sizes_nearest_round_prefer_ceil_asymmetric**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        coordinate_transformation_mode="asymmetric",
        nearest_mode="round_prefer_ceil",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 8, 8], dtype=np.int64)

    # [[[[ 1.  2.  2.  3.  3.  4.  4.  4.]
    #    [ 5.  6.  6.  7.  7.  8.  8.  8.]
    #    [ 5.  6.  6.  7.  7.  8.  8.  8.]
    #    [ 9. 10. 10. 11. 11. 12. 12. 12.]
    #    [ 9. 10. 10. 11. 11. 12. 12. 12.]
    #    [13. 14. 14. 15. 15. 16. 16. 16.]
    #    [13. 14. 14. 15. 15. 16. 16. 16.]
    #    [13. 14. 14. 15. 15. 16. 16. 16.]]]]
    output = interpolate_nd(
        data,
        lambda x, _: nearest_coeffs(x, mode="round_prefer_ceil"),
        output_size=sizes,
        coordinate_transformation_mode="asymmetric",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest_round_prefer_ceil_asymmetric",
    )

**_resize_upsample_sizes_nearest_ceil_half_pixel**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        coordinate_transformation_mode="half_pixel",
        nearest_mode="ceil",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 8, 8], dtype=np.int64)

    # [[[[ 1.  2.  2.  3.  3.  4.  4.  4.]
    #    [ 5.  6.  6.  7.  7.  8.  8.  8.]
    #    [ 5.  6.  6.  7.  7.  8.  8.  8.]
    #    [ 9. 10. 10. 11. 11. 12. 12. 12.]
    #    [ 9. 10. 10. 11. 11. 12. 12. 12.]
    #    [13. 14. 14. 15. 15. 16. 16. 16.]
    #    [13. 14. 14. 15. 15. 16. 16. 16.]
    #    [13. 14. 14. 15. 15. 16. 16. 16.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x, mode="ceil"), output_size=sizes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest_ceil_half_pixel",
    )

**_resize_downsample_scales_linear_antialias**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="linear",
        antialias=1,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 0.6, 0.6], dtype=np.float32)

    # [[[[ 2.875  4.5  ]
    #    [ 9.375 11.   ]]]]
    output = interpolate_nd(
        data, linear_coeffs_antialias, scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_downsample_scales_linear_antialias",
    )

**_resize_downsample_sizes_linear_antialias**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="linear",
        antialias=1,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 3, 3], dtype=np.int64)

    # [[[[ 2.3636363  3.590909   4.818182 ]
    #    [ 7.2727275  8.5        9.727273 ]
    #    [12.181818  13.409091  14.636364 ]]]]
    output = interpolate_nd(
        data, linear_coeffs_antialias, output_size=sizes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_downsample_sizes_linear_antialias",
    )

**_resize_downsample_scales_cubic_antialias**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="cubic",
        antialias=1,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([1.0, 1.0, 0.6, 0.6], dtype=np.float32)

    # [[[[ 2.5180721  4.2858863]
    #    [ 9.589329  11.357142 ]]]]
    output = interpolate_nd(
        data, cubic_coeffs_antialias, scale_factors=scales
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_downsample_scales_cubic_antialias",
    )

**_resize_downsample_sizes_cubic_antialias**
::
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="cubic",
        antialias=1,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 1, 3, 3], dtype=np.int64)

    # [[[[ 1.7750092  3.1200073  4.4650054]
    #    [ 7.1550016  8.5        9.844998 ]
    #    [12.534994  13.8799925 15.224991 ]]]]
    output = interpolate_nd(data, cubic_coeffs_antialias, output_size=sizes).astype(
        np.float32
    )

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_downsample_sizes_cubic_antialias",
    )

**_resize_upsample_scales_nearest_axes_2_3**
::
    axes = [2, 3]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([2.0, 3.0], dtype=np.float32)

    # [[[[1. 1. 1. 2. 2. 2.]
    #    [1. 1. 1. 2. 2. 2.]
    #    [3. 3. 3. 4. 4. 4.]
    #    [3. 3. 3. 4. 4. 4.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), scale_factors=scales, axes=axes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_nearest_axes_2_3",
    )

**_resize_upsample_scales_nearest_axes_3_2**
::
    axes = [3, 2]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "scales"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    scales = np.array([3.0, 2.0], dtype=np.float32)

    # [[[[1. 1. 1. 2. 2. 2.]
    #    [1. 1. 1. 2. 2. 2.]
    #    [3. 3. 3. 4. 4. 4.]
    #    [3. 3. 3. 4. 4. 4.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), scale_factors=scales, axes=axes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, scales],
        outputs=[output],
        name="test_resize_upsample_scales_nearest_axes_3_2",
    )

**_resize_upsample_sizes_nearest_axes_2_3**
::
    axes = [2, 3]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([7, 8], dtype=np.int64)

    # [[[[1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), output_size=sizes, axes=axes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest_axes_2_3",
    )

**_resize_upsample_sizes_nearest_axes_3_2**
::
    axes = [3, 2]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([8, 7], dtype=np.int64)

    # [[[[1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]]]]
    output = interpolate_nd(
        data, lambda x, _: nearest_coeffs(x), output_size=sizes, axes=axes
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest_axes_3_2",
    )

**_resize_tf_crop_and_resize_axes_2_3**
::
    axes = [2, 3]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "roi", "", "sizes"],
        outputs=["Y"],
        mode="linear",
        coordinate_transformation_mode="tf_crop_and_resize",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    # Note: for some rois, the result may be different with that of TF for inaccurate floating point
    roi = np.array([0.4, 0.6, 0.6, 0.8], dtype=np.float32)
    sizes = np.array([3, 3], dtype=np.int64)

    # [[[[ 7.6000004  7.9        8.2      ]
    #    [ 8.8        9.1        9.400001 ]
    #    [10.        10.3       10.6      ]]]]
    output = interpolate_nd(
        data,
        lambda x, _: linear_coeffs(x),
        output_size=sizes,
        roi=roi,
        axes=axes,
        coordinate_transformation_mode="tf_crop_and_resize",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, roi, sizes],
        outputs=[output],
        name="test_resize_tf_crop_and_resize_axes_2_3",
    )

**_resize_tf_crop_and_resize_axes_3_2**
::
    axes = [3, 2]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "roi", "", "sizes"],
        outputs=["Y"],
        mode="linear",
        coordinate_transformation_mode="tf_crop_and_resize",
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                    [9, 10, 11, 12],
                    [13, 14, 15, 16],
                ]
            ]
        ],
        dtype=np.float32,
    )

    # Note: for some rois, the result may be different with that of TF for inaccurate floating point
    roi = np.array([0.6, 0.4, 0.8, 0.6], dtype=np.float32)
    sizes = np.array([3, 3], dtype=np.int64)

    # [[[[ 7.6000004  7.9        8.2      ]
    #    [ 8.8        9.1        9.400001 ]
    #    [10.        10.3       10.6      ]]]]
    output = interpolate_nd(
        data,
        lambda x, _: linear_coeffs(x),
        output_size=sizes,
        roi=roi,
        axes=axes,
        coordinate_transformation_mode="tf_crop_and_resize",
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, roi, sizes],
        outputs=[output],
        name="test_resize_tf_crop_and_resize_axes_3_2",
    )

**_resize_upsample_sizes_nearest_not_larger**
::
    keep_aspect_ratio_policy = "not_larger"
    axes = [2, 3]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([7, 8], dtype=np.int64)  # Results in 7x7

    # [[[[1. 1. 1. 1. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2.]
    #    [3. 3. 3. 3. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4.]]]]
    output = interpolate_nd(
        data,
        lambda x, _: nearest_coeffs(x),
        output_size=sizes,
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest_not_larger",
    )

**_resize_upsample_sizes_nearest_not_smaller**
::
    keep_aspect_ratio_policy = "not_smaller"
    axes = [2, 3]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    )

    data = np.array(
        [
            [
                [
                    [1, 2],
                    [3, 4],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([7, 8], dtype=np.int64)  # Results in 8x8

    # [[[[1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [1. 1. 1. 1. 2. 2. 2. 2.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]
    #    [3. 3. 3. 3. 4. 4. 4. 4.]]]]
    output = interpolate_nd(
        data,
        lambda x, _: nearest_coeffs(x),
        output_size=sizes,
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_upsample_sizes_nearest_not_larger",
    )

**_resize_downsample_sizes_nearest_not_larger**
::
    keep_aspect_ratio_policy = "not_larger"
    axes = [2, 3]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 3], dtype=np.int64)  # Results in 1x2

    # [[[[1. 3.]]]]
    output = interpolate_nd(
        data,
        lambda x, _: nearest_coeffs(x),
        output_size=sizes,
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_downsample_sizes_nearest_not_larger",
    )

**_resize_downsample_sizes_nearest_not_smaller**
::
    keep_aspect_ratio_policy = "not_smaller"
    axes = [2, 3]
    node = onnx.helper.make_node(
        "Resize",
        inputs=["X", "", "", "sizes"],
        outputs=["Y"],
        mode="nearest",
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    )

    data = np.array(
        [
            [
                [
                    [1, 2, 3, 4],
                    [5, 6, 7, 8],
                ]
            ]
        ],
        dtype=np.float32,
    )

    sizes = np.array([1, 3], dtype=np.int64)  # Results in 2x3

    # [[[[1. 2. 4.]
    #    [5. 6. 8.]]]]
    output = interpolate_nd(
        data,
        lambda x, _: nearest_coeffs(x),
        output_size=sizes,
        axes=axes,
        keep_aspect_ratio_policy=keep_aspect_ratio_policy,
    ).astype(np.float32)

    expect(
        node,
        inputs=[data, sizes],
        outputs=[output],
        name="test_resize_downsample_sizes_nearest_not_smaller",
    )

**Differences**

.. raw:: html

        <table class="diff" id="difflib_chg_to191__top"
               cellspacing="0" cellpadding="0" rules="groups" >
            <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
            <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>

            <tbody>
                <tr><td class="diff_next" id="difflib_chg_to191__0"><a href="#difflib_chg_to191__0">f</a></td><td class="diff_header" id="from191_1">1</td><td nowrap="nowrap">Resize&nbsp;the&nbsp;input&nbsp;tensor.&nbsp;In&nbsp;general,&nbsp;it&nbsp;calculates&nbsp;every&nbsp;value&nbsp;in&nbsp;the&nbsp;output&nbsp;tensor&nbsp;as&nbsp;a&nbsp;weighted&nbsp;average&nbsp;of&nbsp;neighborhood&nbsp;(a.k.a.&nbsp;sampling&nbsp;locations)&nbsp;in&nbsp;the&nbsp;input&nbsp;tensor.</td><td class="diff_next"><a href="#difflib_chg_to191__0">f</a></td><td class="diff_header" id="to191_1">1</td><td nowrap="nowrap">Resize&nbsp;the&nbsp;input&nbsp;tensor.&nbsp;In&nbsp;general,&nbsp;it&nbsp;calculates&nbsp;every&nbsp;value&nbsp;in&nbsp;the&nbsp;output&nbsp;tensor&nbsp;as&nbsp;a&nbsp;weighted&nbsp;average&nbsp;of&nbsp;neighborhood&nbsp;(a.k.a.&nbsp;sampling&nbsp;locations)&nbsp;in&nbsp;the&nbsp;input&nbsp;tensor.</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__1"><a href="#difflib_chg_to191__1">n</a></td><td class="diff_header" id="from191_2">2</td><td nowrap="nowrap">Each&nbsp;dimension&nbsp;value&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor&nbsp;is:</td><td class="diff_next"><a href="#difflib_chg_to191__1">n</a></td><td class="diff_header" id="to191_2">2</td><td nowrap="nowrap">Each&nbsp;dimension&nbsp;value&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor&nbsp;is:<span class="diff_add">&nbsp;&lt;br/&gt;</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_3">3</td><td nowrap="nowrap">&nbsp;&nbsp;output_dimension&nbsp;=&nbsp;floor(input_dimension&nbsp;*&nbsp;(roi_end&nbsp;-&nbsp;roi_start)&nbsp;*&nbsp;scale)&nbsp;<span class="diff_chg">if&nbsp;input&nbsp;\"sizes\"&nbsp;is&nbsp;not&nbsp;specified.</span></td><td class="diff_next"></td><td class="diff_header" id="to191_3">3</td><td nowrap="nowrap">&nbsp;&nbsp;output_dimension&nbsp;=&nbsp;floor(input_dimension&nbsp;*&nbsp;(roi_end&nbsp;-&nbsp;roi_start)&nbsp;*&nbsp;scale)&nbsp;<span class="diff_chg">&lt;br/&gt;</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_4">4</td><td nowrap="nowrap"><span class="diff_add">if&nbsp;input&nbsp;\"sizes\"&nbsp;is&nbsp;not&nbsp;specified.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_4">4</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_5">5</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_5">5</td><td nowrap="nowrap">**Attributes**</td><td class="diff_next"></td><td class="diff_header" id="to191_6">6</td><td nowrap="nowrap">**Attributes**</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__2">n</a></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"><a href="#difflib_chg_to191__2">n</a></td><td class="diff_header" id="to191_7">7</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**antialias**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_8">8</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;If&nbsp;set&nbsp;to&nbsp;1,&nbsp;"linear"&nbsp;and&nbsp;"cubic"&nbsp;interpolation&nbsp;modes&nbsp;will&nbsp;use&nbsp;an</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_9">9</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;antialiasing&nbsp;filter&nbsp;when&nbsp;downscaling.&nbsp;Antialiasing&nbsp;is&nbsp;achieved&nbsp;by</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_10">10</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;stretching&nbsp;the&nbsp;resampling&nbsp;filter&nbsp;by&nbsp;a&nbsp;factor&nbsp;max(1,&nbsp;1&nbsp;/&nbsp;scale),</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_11">11</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;which&nbsp;means&nbsp;that&nbsp;when&nbsp;downsampling,&nbsp;more&nbsp;input&nbsp;pixels&nbsp;contribute&nbsp;to</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_12">12</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;an&nbsp;output&nbsp;pixel.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_13">13</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**axes**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_14">14</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;If&nbsp;provided,&nbsp;it&nbsp;specifies&nbsp;a&nbsp;subset&nbsp;of&nbsp;axes&nbsp;that&nbsp;'roi',&nbsp;'scales'&nbsp;and</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_15">15</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;'sizes'&nbsp;refer&nbsp;to.&nbsp;If&nbsp;not&nbsp;provided,&nbsp;all&nbsp;axes&nbsp;are&nbsp;assumed&nbsp;[0,&nbsp;1,&nbsp;...,</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_16">16</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;r-1],&nbsp;where&nbsp;r&nbsp;=&nbsp;rank(data).&nbsp;Non-specified&nbsp;dimensions&nbsp;are&nbsp;interpreted</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_17">17</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;as&nbsp;non-resizable.&nbsp;Negative&nbsp;value&nbsp;means&nbsp;counting&nbsp;dimensions&nbsp;from&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_18">18</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;back.&nbsp;Accepted&nbsp;range&nbsp;is&nbsp;[-r,&nbsp;r-1],&nbsp;where&nbsp;r&nbsp;=&nbsp;rank(data).&nbsp;Behavior&nbsp;is</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_19">19</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;undefined&nbsp;if&nbsp;an&nbsp;axis&nbsp;is&nbsp;repeated.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_6">6</td><td nowrap="nowrap">*&nbsp;**coordinate_transformation_mode**:</td><td class="diff_next"></td><td class="diff_header" id="to191_20">20</td><td nowrap="nowrap">*&nbsp;**coordinate_transformation_mode**:</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__2"></td><td class="diff_header" id="from191_7">7</td><td nowrap="nowrap">&nbsp;&nbsp;&nbsp;This&nbsp;attribute&nbsp;describes&nbsp;how&nbsp;to&nbsp;transform&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to191_21">21</td><td nowrap="nowrap">&nbsp;&nbsp;&nbsp;This&nbsp;attribute&nbsp;describes&nbsp;how&nbsp;to&nbsp;transform&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_8">8</td><td nowrap="nowrap">&nbsp;&nbsp;resized&nbsp;tensor&nbsp;to&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor.&nbsp;&lt;br/&gt;&nbsp;&nbsp;The</td><td class="diff_next"></td><td class="diff_header" id="to191_22">22</td><td nowrap="nowrap">&nbsp;&nbsp;resized&nbsp;tensor&nbsp;to&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor.&nbsp;&lt;br/&gt;&nbsp;&nbsp;The</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_9">9</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;each&nbsp;dimension&nbsp;is&nbsp;transformed&nbsp;individually.&nbsp;Let's</td><td class="diff_next"></td><td class="diff_header" id="to191_23">23</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;each&nbsp;dimension&nbsp;is&nbsp;transformed&nbsp;individually.&nbsp;Let's</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__3"></td><td class="diff_header" id="from191_10">10</td><td nowrap="nowrap">&nbsp;&nbsp;describe&nbsp;a&nbsp;case&nbsp;using&nbsp;axis&nbsp;x&nbsp;as&nbsp;an&nbsp;example.&nbsp;Denote&nbsp;x_resized&nbsp;as&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to191_24">24</td><td nowrap="nowrap">&nbsp;&nbsp;describe&nbsp;a&nbsp;case&nbsp;using&nbsp;axis&nbsp;x&nbsp;as&nbsp;an&nbsp;example.&nbsp;Denote&nbsp;x_resized&nbsp;as&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_11">11</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;resized&nbsp;tensor,&nbsp;x_original&nbsp;as&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to191_25">25</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;resized&nbsp;tensor,&nbsp;x_original&nbsp;as&nbsp;the</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__3">n</a></td><td class="diff_header" id="from191_12">12</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor,&nbsp;length_original&nbsp;as<span class="diff_sub">&nbsp;the</span></td><td class="diff_next"><a href="#difflib_chg_to191__3">n</a></td><td class="diff_header" id="to191_26">26</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor,&nbsp;length_original&nbsp;as</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_13">13</td><td nowrap="nowrap">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;original&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;length_resized&nbsp;as&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to191_27">27</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;the</span>&nbsp;length&nbsp;of&nbsp;the&nbsp;original&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;length_resized&nbsp;as&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_14">14</td><td nowrap="nowrap">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;resized&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;roi_x&nbsp;=&nbsp;(start_x,&nbsp;end_x)&nbsp;of</td><td class="diff_next"></td><td class="diff_header" id="to191_28">28</td><td nowrap="nowrap">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;resized&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;roi_x&nbsp;=&nbsp;(start_x,&nbsp;end_x)&nbsp;of</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__4">n</a></td><td class="diff_header" id="from191_15">15</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;axis&nbsp;x&nbsp;in&nbsp;input&nbsp;"roi",&nbsp;scale&nbsp;=&nbsp;length_resized&nbsp;/<span class="diff_sub">&nbsp;length_original,</span></td><td class="diff_next"><a href="#difflib_chg_to191__4">n</a></td><td class="diff_header" id="to191_29">29</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;axis&nbsp;x&nbsp;in&nbsp;input&nbsp;"roi",&nbsp;scale&nbsp;=&nbsp;length_resized&nbsp;/</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_30">30</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;length_original,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_31">31</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;"half_pixel",&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_16">16</td><td nowrap="nowrap">&nbsp;&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"half_pixel",<span class="diff_sub">&nbsp;&lt;br/&gt;</span></td><td class="diff_next"></td><td class="diff_header" id="to191_32">32</td><td nowrap="nowrap">&nbsp;&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"<span class="diff_add">pytorch_</span>half_pixel",</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_17">17</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;x_original&nbsp;=&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</span></td><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_18">18</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"pytorch_half_pixel",&nbsp;&lt;br/&gt;</span></td><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_19">19</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-<span class="diff_sub">&nbsp;0.5&nbsp;:</span></td><td class="diff_next"></td><td class="diff_header" id="to191_33">33</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;&lt;br/&gt;</span>&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_20">20</td><td nowrap="nowrap">&nbsp;&nbsp;0<span class="diff_chg">,</span>&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is<span class="diff_sub">&nbsp;"align_corners",</span></td><td class="diff_next"></td><td class="diff_header" id="to191_34">34</td><td nowrap="nowrap">&nbsp;&nbsp;0<span class="diff_chg">.5&nbsp;:&nbsp;0</span>&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_21">21</td><td nowrap="nowrap">&nbsp;&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;*&nbsp;(length_original<span class="diff_sub">&nbsp;-&nbsp;1)&nbsp;/</span></td><td class="diff_next"></td><td class="diff_header" id="to191_35">35</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;"align_corners",</span>&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;*&nbsp;(length_original</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_36">36</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;-&nbsp;1)&nbsp;/&nbsp;(length_resized&nbsp;-&nbsp;1)&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_37">37</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"asymmetric",&nbsp;&lt;br/&gt;&nbsp;x_original</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_22">22</td><td nowrap="nowrap">&nbsp;&nbsp;<span class="diff_chg">(length</span>_resized&nbsp;<span class="diff_chg">-&nbsp;1),</span>&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is</td><td class="diff_next"></td><td class="diff_header" id="to191_38">38</td><td nowrap="nowrap">&nbsp;&nbsp;<span class="diff_chg">=&nbsp;x</span>_resized&nbsp;<span class="diff_chg">/&nbsp;scale</span>&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_23">23</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;"asymmetric",&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;/&nbsp;scale,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</span></td><td class="diff_next"></td><td class="diff_header" id="to191_39">39</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;"tf_crop_and_resize",&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_24">24</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize",&nbsp;&lt;br/&gt;</span></td><td class="diff_next"></td><td class="diff_header" id="to191_40">40</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;start_x&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;+&nbsp;x_resized&nbsp;*&nbsp;(end_x&nbsp;-&nbsp;start_x)&nbsp;*</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_25">25</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;start_x&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;+</span></td><td class="diff_next"></td><td class="diff_header" id="to191_41">41</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/&nbsp;(length_resized&nbsp;-&nbsp;1)&nbsp;:&nbsp;0.5&nbsp;*&nbsp;(start_x&nbsp;+</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_26">26</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;x_resized&nbsp;*&nbsp;(end_x&nbsp;-&nbsp;start_x)&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/</span></td><td class="diff_next"></td><td class="diff_header" id="to191_42">42</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;end_x)&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_27">27</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;(length_resized&nbsp;-&nbsp;1)&nbsp;:&nbsp;0.5&nbsp;*&nbsp;(start_x&nbsp;+&nbsp;end_x)&nbsp;*&nbsp;(length_original&nbsp;-</span></td><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__4"></td><td class="diff_header" id="from191_28">28</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;1).</span></td><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_29">29</td><td nowrap="nowrap">*&nbsp;**cubic_coeff_a**:</td><td class="diff_next"></td><td class="diff_header" id="to191_43">43</td><td nowrap="nowrap">*&nbsp;**cubic_coeff_a**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_30">30</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;coefficient&nbsp;'a'&nbsp;used&nbsp;in&nbsp;cubic&nbsp;interpolation.&nbsp;Two&nbsp;common&nbsp;choice</td><td class="diff_next"></td><td class="diff_header" id="to191_44">44</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;coefficient&nbsp;'a'&nbsp;used&nbsp;in&nbsp;cubic&nbsp;interpolation.&nbsp;Two&nbsp;common&nbsp;choice</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_31">31</td><td nowrap="nowrap">&nbsp;&nbsp;are&nbsp;-0.5&nbsp;(in&nbsp;some&nbsp;cases&nbsp;of&nbsp;TensorFlow)&nbsp;and&nbsp;-0.75&nbsp;(in&nbsp;PyTorch).&nbsp;Check</td><td class="diff_next"></td><td class="diff_header" id="to191_45">45</td><td nowrap="nowrap">&nbsp;&nbsp;are&nbsp;-0.5&nbsp;(in&nbsp;some&nbsp;cases&nbsp;of&nbsp;TensorFlow)&nbsp;and&nbsp;-0.75&nbsp;(in&nbsp;PyTorch).&nbsp;Check</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_32">32</td><td nowrap="nowrap">&nbsp;&nbsp;out&nbsp;Equation&nbsp;(4)&nbsp;in&nbsp;https://ieeexplore.ieee.org/document/1163711&nbsp;for</td><td class="diff_next"></td><td class="diff_header" id="to191_46">46</td><td nowrap="nowrap">&nbsp;&nbsp;out&nbsp;Equation&nbsp;(4)&nbsp;in&nbsp;https://ieeexplore.ieee.org/document/1163711&nbsp;for</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__5">n</a></td><td class="diff_header" id="from191_33">33</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;details.&nbsp;This&nbsp;attribute&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;<span class="diff_sub">"</span>mode<span class="diff_sub">"</span>&nbsp;is&nbsp;"cubic".</td><td class="diff_next"><a href="#difflib_chg_to191__5">n</a></td><td class="diff_header" id="to191_47">47</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;details.&nbsp;This&nbsp;attribute&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;mode&nbsp;is&nbsp;"cubic".</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_34">34</td><td nowrap="nowrap">*&nbsp;**exclude_outside**:</td><td class="diff_next"></td><td class="diff_header" id="to191_48">48</td><td nowrap="nowrap">*&nbsp;**exclude_outside**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_35">35</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;set&nbsp;to&nbsp;1,&nbsp;the&nbsp;weight&nbsp;of&nbsp;sampling&nbsp;locations&nbsp;outside&nbsp;the&nbsp;tensor</td><td class="diff_next"></td><td class="diff_header" id="to191_49">49</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;set&nbsp;to&nbsp;1,&nbsp;the&nbsp;weight&nbsp;of&nbsp;sampling&nbsp;locations&nbsp;outside&nbsp;the&nbsp;tensor</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_36">36</td><td nowrap="nowrap">&nbsp;&nbsp;will&nbsp;be&nbsp;set&nbsp;to&nbsp;0&nbsp;and&nbsp;the&nbsp;weight&nbsp;will&nbsp;be&nbsp;renormalized&nbsp;so&nbsp;that&nbsp;their</td><td class="diff_next"></td><td class="diff_header" id="to191_50">50</td><td nowrap="nowrap">&nbsp;&nbsp;will&nbsp;be&nbsp;set&nbsp;to&nbsp;0&nbsp;and&nbsp;the&nbsp;weight&nbsp;will&nbsp;be&nbsp;renormalized&nbsp;so&nbsp;that&nbsp;their</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__5"></td><td class="diff_header" id="from191_37">37</td><td nowrap="nowrap">&nbsp;&nbsp;sum&nbsp;is&nbsp;1.0.&nbsp;The&nbsp;default&nbsp;value&nbsp;is&nbsp;0.</td><td class="diff_next"></td><td class="diff_header" id="to191_51">51</td><td nowrap="nowrap">&nbsp;&nbsp;sum&nbsp;is&nbsp;1.0.&nbsp;The&nbsp;default&nbsp;value&nbsp;is&nbsp;0.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_38">38</td><td nowrap="nowrap">*&nbsp;**extrapolation_value**:</td><td class="diff_next"></td><td class="diff_header" id="to191_52">52</td><td nowrap="nowrap">*&nbsp;**extrapolation_value**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_39">39</td><td nowrap="nowrap">&nbsp;&nbsp;When&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"&nbsp;and</td><td class="diff_next"></td><td class="diff_header" id="to191_53">53</td><td nowrap="nowrap">&nbsp;&nbsp;When&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"&nbsp;and</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_40">40</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;is&nbsp;outside&nbsp;the&nbsp;range&nbsp;[0,&nbsp;length_original&nbsp;-&nbsp;1],&nbsp;this&nbsp;value</td><td class="diff_next"></td><td class="diff_header" id="to191_54">54</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;is&nbsp;outside&nbsp;the&nbsp;range&nbsp;[0,&nbsp;length_original&nbsp;-&nbsp;1],&nbsp;this&nbsp;value</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_41">41</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;used&nbsp;as&nbsp;the&nbsp;corresponding&nbsp;output&nbsp;value.&nbsp;Default&nbsp;is&nbsp;0.0f.</td><td class="diff_next"></td><td class="diff_header" id="to191_55">55</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;used&nbsp;as&nbsp;the&nbsp;corresponding&nbsp;output&nbsp;value.&nbsp;Default&nbsp;is&nbsp;0.0f.</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__6">n</a></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"><a href="#difflib_chg_to191__6">n</a></td><td class="diff_header" id="to191_56">56</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**keep_aspect_ratio_policy**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_57">57</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;&nbsp;This&nbsp;attribute&nbsp;describes&nbsp;how&nbsp;to&nbsp;interpret&nbsp;the&nbsp;sizes&nbsp;input&nbsp;with</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_58">58</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;regard&nbsp;to&nbsp;keeping&nbsp;the&nbsp;original&nbsp;aspect&nbsp;ratio&nbsp;of&nbsp;the&nbsp;input,&nbsp;and&nbsp;it&nbsp;is</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_59">59</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;not&nbsp;applicable&nbsp;when&nbsp;the&nbsp;scales&nbsp;input&nbsp;is&nbsp;used.&nbsp;&lt;br/&gt;&nbsp;&nbsp;Given&nbsp;a&nbsp;set</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_60">60</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;of&nbsp;sizes,&nbsp;associated&nbsp;with&nbsp;a&nbsp;subset&nbsp;of&nbsp;axes&nbsp;(explicitly&nbsp;provided</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_61">61</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;or&nbsp;default),&nbsp;and&nbsp;assuming&nbsp;d&nbsp;=&nbsp;axes[i],&nbsp;with&nbsp;i&nbsp;being&nbsp;the&nbsp;index&nbsp;of</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_62">62</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;the&nbsp;provided&nbsp;sizes.&nbsp;&lt;br/&gt;&nbsp;&nbsp;If&nbsp;keep_aspect_ratio_policy&nbsp;is</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_63">63</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;"stretch",&nbsp;the&nbsp;original&nbsp;aspect&nbsp;ratio&nbsp;is&nbsp;disregarded,&nbsp;and&nbsp;the&nbsp;input</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_64">64</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;is&nbsp;resized&nbsp;to&nbsp;the&nbsp;specified&nbsp;size:&nbsp;&lt;br/&gt;&nbsp;out_size[d]&nbsp;=&nbsp;sizes[i]</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_65">65</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;&lt;br/&gt;&nbsp;&nbsp;If&nbsp;keep_aspect_ratio_policy&nbsp;is&nbsp;"not_larger",&nbsp;the&nbsp;sizes</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_66">66</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;are&nbsp;adjusted&nbsp;so&nbsp;that&nbsp;no&nbsp;extent&nbsp;of&nbsp;the&nbsp;output&nbsp;is&nbsp;larger&nbsp;than&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_67">67</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;specified&nbsp;size,&nbsp;while&nbsp;keeping&nbsp;the&nbsp;original&nbsp;aspect&nbsp;ratio:&nbsp;&lt;br/&gt;</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_68">68</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;scale&nbsp;=&nbsp;Min(sizes[i]&nbsp;/&nbsp;in_size[d])&nbsp;&lt;br/&gt;&nbsp;out_size[d]&nbsp;=</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_69">69</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;round_int(scale&nbsp;*&nbsp;in_size[i])&nbsp;&lt;br/&gt;&nbsp;&nbsp;If&nbsp;keep_aspect_ratio_policy</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_70">70</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;is&nbsp;"not_smaller",&nbsp;the&nbsp;sizes&nbsp;are&nbsp;adjusted&nbsp;so&nbsp;that&nbsp;no&nbsp;extent&nbsp;of&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_71">71</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;output&nbsp;is&nbsp;smaller&nbsp;than&nbsp;the&nbsp;specified&nbsp;size,&nbsp;while&nbsp;keeping&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_72">72</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;original&nbsp;aspect&nbsp;ratio:&nbsp;&lt;br/&gt;&nbsp;scale&nbsp;=&nbsp;Max(sizes[i]&nbsp;/&nbsp;in_size[d])</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__6"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_73">73</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;&lt;br/&gt;&nbsp;out_size[d]&nbsp;=&nbsp;round_int(scale&nbsp;*&nbsp;in_size[i])&nbsp;&lt;br/&gt;&nbsp;&nbsp;For&nbsp;non-</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_74">74</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;resizable&nbsp;axes&nbsp;(those&nbsp;not&nbsp;specified&nbsp;in&nbsp;axes),&nbsp;the&nbsp;output&nbsp;size&nbsp;will</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_75">75</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;be&nbsp;equal&nbsp;to&nbsp;the&nbsp;input&nbsp;size.&nbsp;&nbsp;Note:&nbsp;round_int&nbsp;stands&nbsp;for&nbsp;computing</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_76">76</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;the&nbsp;nearest&nbsp;integer&nbsp;value,&nbsp;rounding&nbsp;halfway&nbsp;cases&nbsp;up.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_42">42</td><td nowrap="nowrap">*&nbsp;**mode**:</td><td class="diff_next"></td><td class="diff_header" id="to191_77">77</td><td nowrap="nowrap">*&nbsp;**mode**:</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__7">n</a></td><td class="diff_header" id="from191_43">43</td><td nowrap="nowrap">&nbsp;&nbsp;Three&nbsp;interpolation&nbsp;modes:&nbsp;nearest&nbsp;(default),&nbsp;linear&nbsp;and<span class="diff_sub">&nbsp;cubic.&nbsp;The</span></td><td class="diff_next"><a href="#difflib_chg_to191__7">n</a></td><td class="diff_header" id="to191_78">78</td><td nowrap="nowrap">&nbsp;&nbsp;Three&nbsp;interpolation&nbsp;modes:&nbsp;<span class="diff_add">"</span>nearest<span class="diff_add">"</span>&nbsp;(default),&nbsp;<span class="diff_add">"</span>linear<span class="diff_add">"</span>&nbsp;and</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_44">44</td><td nowrap="nowrap">&nbsp;&nbsp;"linear"&nbsp;mode&nbsp;includes&nbsp;linear&nbsp;interpolation&nbsp;for&nbsp;1D<span class="diff_sub">&nbsp;tensor&nbsp;and</span></td><td class="diff_next"></td><td class="diff_header" id="to191_79">79</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;"cubic".&nbsp;The</span>&nbsp;"linear"&nbsp;mode&nbsp;includes&nbsp;linear&nbsp;interpolation&nbsp;for&nbsp;1D</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__7"></td><td class="diff_header" id="from191_45">45</td><td nowrap="nowrap">&nbsp;&nbsp;N-linear&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor&nbsp;(for&nbsp;example,<span class="diff_sub">&nbsp;bilinear</span></td><td class="diff_next"></td><td class="diff_header" id="to191_80">80</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;tensor&nbsp;and</span>&nbsp;N-linear&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor&nbsp;(for&nbsp;example,</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_46">46</td><td nowrap="nowrap">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).&nbsp;The&nbsp;"cubic"&nbsp;mode&nbsp;includes<span class="diff_sub">&nbsp;cubic</span></td><td class="diff_next"></td><td class="diff_header" id="to191_81">81</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;bilinear</span>&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).&nbsp;The&nbsp;"cubic"&nbsp;mode&nbsp;includes</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_47">47</td><td nowrap="nowrap">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and&nbsp;N-cubic&nbsp;interpolation&nbsp;for&nbsp;N-D<span class="diff_sub">&nbsp;tensor</span></td><td class="diff_next"></td><td class="diff_header" id="to191_82">82</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;cubic</span>&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and&nbsp;N-cubic&nbsp;interpolation&nbsp;for&nbsp;N-D</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_48">48</td><td nowrap="nowrap">&nbsp;&nbsp;(for&nbsp;example,&nbsp;bicubic&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).</td><td class="diff_next"></td><td class="diff_header" id="to191_83">83</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;tensor</span>&nbsp;(for&nbsp;example,&nbsp;bicubic&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_49">49</td><td nowrap="nowrap">*&nbsp;**nearest_mode**:</td><td class="diff_next"></td><td class="diff_header" id="to191_84">84</td><td nowrap="nowrap">*&nbsp;**nearest_mode**:</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__8">n</a></td><td class="diff_header" id="from191_50">50</td><td nowrap="nowrap">&nbsp;&nbsp;Four&nbsp;modes:&nbsp;round_prefer_floor&nbsp;(default,&nbsp;as&nbsp;known&nbsp;as&nbsp;round&nbsp;half</td><td class="diff_next"><a href="#difflib_chg_to191__8">n</a></td><td class="diff_header" id="to191_85">85</td><td nowrap="nowrap">&nbsp;&nbsp;Four&nbsp;modes:&nbsp;<span class="diff_add">"</span>round_prefer_floor<span class="diff_add">"</span>&nbsp;(default,&nbsp;as&nbsp;known&nbsp;as&nbsp;round&nbsp;half</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_51">51</td><td nowrap="nowrap">&nbsp;&nbsp;down),&nbsp;round_prefer_ceil&nbsp;(as&nbsp;known&nbsp;as&nbsp;round&nbsp;half&nbsp;up),&nbsp;floor,<span class="diff_sub">&nbsp;ceil.</span></td><td class="diff_next"></td><td class="diff_header" id="to191_86">86</td><td nowrap="nowrap">&nbsp;&nbsp;down),&nbsp;<span class="diff_add">"</span>round_prefer_ceil<span class="diff_add">"</span>&nbsp;(as&nbsp;known&nbsp;as&nbsp;round&nbsp;half&nbsp;up),&nbsp;<span class="diff_add">"</span>floor<span class="diff_add">"</span>,</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_52">52</td><td nowrap="nowrap">&nbsp;&nbsp;Only&nbsp;used&nbsp;by&nbsp;nearest&nbsp;interpolation.&nbsp;It&nbsp;indicates&nbsp;how&nbsp;to&nbsp;get</td><td class="diff_next"></td><td class="diff_header" id="to191_87">87</td><td nowrap="nowrap">&nbsp;<span class="diff_add">&nbsp;"ceil".</span>&nbsp;Only&nbsp;used&nbsp;by&nbsp;nearest&nbsp;interpolation.&nbsp;It&nbsp;indicates&nbsp;how&nbsp;to&nbsp;get</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_53">53</td><td nowrap="nowrap">&nbsp;&nbsp;"nearest"&nbsp;pixel&nbsp;in&nbsp;input&nbsp;tensor&nbsp;from&nbsp;x_original,&nbsp;so&nbsp;this&nbsp;attribute</td><td class="diff_next"></td><td class="diff_header" id="to191_88">88</td><td nowrap="nowrap">&nbsp;&nbsp;"nearest"&nbsp;pixel&nbsp;in&nbsp;input&nbsp;tensor&nbsp;from&nbsp;x_original,&nbsp;so&nbsp;this&nbsp;attribute</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_54">54</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"nearest".</td><td class="diff_next"></td><td class="diff_header" id="to191_89">89</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"nearest".</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_55">55</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_90">90</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_56">56</td><td nowrap="nowrap">**Inputs**</td><td class="diff_next"></td><td class="diff_header" id="to191_91">91</td><td nowrap="nowrap">**Inputs**</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_57">57</td><td nowrap="nowrap">Between&nbsp;1&nbsp;and&nbsp;4&nbsp;inputs.</td><td class="diff_next"></td><td class="diff_header" id="to191_92">92</td><td nowrap="nowrap">Between&nbsp;1&nbsp;and&nbsp;4&nbsp;inputs.</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__8"></td><td class="diff_header" id="from191_58">58</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_93">93</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_59">59</td><td nowrap="nowrap">*&nbsp;**X**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td><td class="diff_next"></td><td class="diff_header" id="to191_94">94</td><td nowrap="nowrap">*&nbsp;**X**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_60">60</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor</td><td class="diff_next"></td><td class="diff_header" id="to191_95">95</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_61">61</td><td nowrap="nowrap">*&nbsp;**roi**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**T2**:</td><td class="diff_next"></td><td class="diff_header" id="to191_96">96</td><td nowrap="nowrap">*&nbsp;**roi**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**T2**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_62">62</td><td nowrap="nowrap">&nbsp;&nbsp;1-D&nbsp;tensor&nbsp;given&nbsp;as&nbsp;[start1,&nbsp;...,&nbsp;startN,&nbsp;end1,&nbsp;...,&nbsp;endN],&nbsp;where&nbsp;N</td><td class="diff_next"></td><td class="diff_header" id="to191_97">97</td><td nowrap="nowrap">&nbsp;&nbsp;1-D&nbsp;tensor&nbsp;given&nbsp;as&nbsp;[start1,&nbsp;...,&nbsp;startN,&nbsp;end1,&nbsp;...,&nbsp;endN],&nbsp;where&nbsp;N</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__9">n</a></td><td class="diff_header" id="from191_63">63</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;is&nbsp;the&nbsp;rank&nbsp;of&nbsp;X.&nbsp;The&nbsp;RoIs'&nbsp;coordinates&nbsp;are&nbsp;normalized&nbsp;in&nbsp;the</span></td><td class="diff_next"><a href="#difflib_chg_to191__9">n</a></td><td class="diff_header" id="to191_98">98</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;is&nbsp;the&nbsp;rank&nbsp;of&nbsp;X&nbsp;or&nbsp;the&nbsp;length&nbsp;of&nbsp;axes,&nbsp;if&nbsp;provided.&nbsp;The&nbsp;RoIs'</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_64">64</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;coordinate&nbsp;system&nbsp;of&nbsp;the&nbsp;input&nbsp;image.&nbsp;It&nbsp;only&nbsp;takes&nbsp;effect&nbsp;when</span></td><td class="diff_next"></td><td class="diff_header" id="to191_99">99</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinates&nbsp;are&nbsp;normalized&nbsp;in&nbsp;the&nbsp;coordinate&nbsp;system&nbsp;of&nbsp;the&nbsp;input</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_65">65</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"</span></td><td class="diff_next"></td><td class="diff_header" id="to191_100">100</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;image.&nbsp;It&nbsp;only&nbsp;takes&nbsp;effect&nbsp;when&nbsp;coordinate_transformation_mode&nbsp;is</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__9"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_101">101</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;"tf_crop_and_resize"</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_66">66</td><td nowrap="nowrap">*&nbsp;**scales**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**tensor(float)**:</td><td class="diff_next"></td><td class="diff_header" id="to191_102">102</td><td nowrap="nowrap">*&nbsp;**scales**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**tensor(float)**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_67">67</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;scale&nbsp;array&nbsp;along&nbsp;each&nbsp;dimension.&nbsp;It&nbsp;takes&nbsp;value&nbsp;greater&nbsp;than&nbsp;0.</td><td class="diff_next"></td><td class="diff_header" id="to191_103">103</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;scale&nbsp;array&nbsp;along&nbsp;each&nbsp;dimension.&nbsp;It&nbsp;takes&nbsp;value&nbsp;greater&nbsp;than&nbsp;0.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_68">68</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;it's&nbsp;less&nbsp;than&nbsp;1,&nbsp;it's&nbsp;sampling&nbsp;down,&nbsp;otherwise,&nbsp;it's&nbsp;upsampling.</td><td class="diff_next"></td><td class="diff_header" id="to191_104">104</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;it's&nbsp;less&nbsp;than&nbsp;1,&nbsp;it's&nbsp;sampling&nbsp;down,&nbsp;otherwise,&nbsp;it's&nbsp;upsampling.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_69">69</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'scales'&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of</td><td class="diff_next"></td><td class="diff_header" id="to191_105">105</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'scales'&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to191__10"><a href="#difflib_chg_to191__10">n</a></td><td class="diff_header" id="from191_70">70</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;input&nbsp;'X'.&nbsp;One&nbsp;of&nbsp;'scales'&nbsp;and&nbsp;'sizes'&nbsp;MUST&nbsp;be&nbsp;specified&nbsp;and&nbsp;it&nbsp;is</span></td><td class="diff_next"><a href="#difflib_chg_to191__10">n</a></td><td class="diff_header" id="to191_106">106</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;input&nbsp;'X'&nbsp;or&nbsp;the&nbsp;length&nbsp;of&nbsp;'axes',&nbsp;if&nbsp;provided.&nbsp;One&nbsp;of&nbsp;'scales'&nbsp;and</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_71">71</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;an&nbsp;error&nbsp;if&nbsp;both&nbsp;are&nbsp;specified.&nbsp;If&nbsp;'sizes'&nbsp;is&nbsp;needed,&nbsp;the&nbsp;user&nbsp;can</span></td><td class="diff_next"></td><td class="diff_header" id="to191_107">107</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;'sizes'&nbsp;MUST&nbsp;be&nbsp;specified&nbsp;and&nbsp;it&nbsp;is&nbsp;an&nbsp;error&nbsp;if&nbsp;both&nbsp;are&nbsp;specified.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_72">72</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;use&nbsp;an&nbsp;empty&nbsp;string&nbsp;as&nbsp;the&nbsp;name&nbsp;of&nbsp;'scales'&nbsp;in&nbsp;this&nbsp;operator's&nbsp;input</span></td><td class="diff_next"></td><td class="diff_header" id="to191_108">108</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;If&nbsp;'sizes'&nbsp;is&nbsp;needed,&nbsp;the&nbsp;user&nbsp;can&nbsp;use&nbsp;an&nbsp;empty&nbsp;string&nbsp;as&nbsp;the&nbsp;name</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_73">73</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;list.</span></td><td class="diff_next"></td><td class="diff_header" id="to191_109">109</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;of&nbsp;'scales'&nbsp;in&nbsp;this&nbsp;operator's&nbsp;input&nbsp;list.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_74">74</td><td nowrap="nowrap">*&nbsp;**sizes**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**tensor(int64)**:</td><td class="diff_next"></td><td class="diff_header" id="to191_110">110</td><td nowrap="nowrap">*&nbsp;**sizes**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**tensor(int64)**:</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to191__top">t</a></td><td class="diff_header" id="from191_75">75</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;The&nbsp;size&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor.&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'sizes'</span></td><td class="diff_next"><a href="#difflib_chg_to191__top">t</a></td><td class="diff_header" id="to191_111">111</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;Target&nbsp;size&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor.&nbsp;Its&nbsp;interpretation&nbsp;depends&nbsp;on&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_112">112</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;'keep_aspect_ratio_policy'&nbsp;value.The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'sizes'</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_76">76</td><td nowrap="nowrap">&nbsp;&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of&nbsp;input&nbsp;'X'<span class="diff_chg">.&nbsp;O</span>n<span class="diff_chg">ly&nbsp;one</span>&nbsp;of<span class="diff_sub">&nbsp;'scales'</span></td><td class="diff_next"></td><td class="diff_header" id="to191_113">113</td><td nowrap="nowrap">&nbsp;&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of&nbsp;input&nbsp;'X'<span class="diff_chg">,&nbsp;or&nbsp;the&nbsp;le</span>n<span class="diff_chg">gth</span>&nbsp;of</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_77">77</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;and&nbsp;'sizes'&nbsp;can&nbsp;be&nbsp;specified.</span></td><td class="diff_next"></td><td class="diff_header" id="to191_114">114</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;'axes',&nbsp;if&nbsp;provided.&nbsp;Only&nbsp;one&nbsp;of&nbsp;'scales'&nbsp;and&nbsp;'sizes'&nbsp;can&nbsp;be</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_115">115</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;specified.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_78">78</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_116">116</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_79">79</td><td nowrap="nowrap">**Outputs**</td><td class="diff_next"></td><td class="diff_header" id="to191_117">117</td><td nowrap="nowrap">**Outputs**</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_80">80</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_118">118</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_81">81</td><td nowrap="nowrap">*&nbsp;**Y**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td><td class="diff_next"></td><td class="diff_header" id="to191_119">119</td><td nowrap="nowrap">*&nbsp;**Y**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_82">82</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor&nbsp;after&nbsp;resizing</td><td class="diff_next"></td><td class="diff_header" id="to191_120">120</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor&nbsp;after&nbsp;resizing</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_83">83</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to191_121">121</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_84">84</td><td nowrap="nowrap">**Type&nbsp;Constraints**</td><td class="diff_next"></td><td class="diff_header" id="to191_122">122</td><td nowrap="nowrap">**Type&nbsp;Constraints**</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_85">85</td><td nowrap="nowrap">*&nbsp;**T1**&nbsp;in&nbsp;(</td><td class="diff_next"></td><td class="diff_header" id="to191_123">123</td><td nowrap="nowrap">*&nbsp;**T1**&nbsp;in&nbsp;(</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_86">86</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bfloat16),</td><td class="diff_next"></td><td class="diff_header" id="to191_124">124</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bfloat16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_87">87</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bool),</td><td class="diff_next"></td><td class="diff_header" id="to191_125">125</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bool),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_88">88</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex128),</td><td class="diff_next"></td><td class="diff_header" id="to191_126">126</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex128),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_89">89</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex64),</td><td class="diff_next"></td><td class="diff_header" id="to191_127">127</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_90">90</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td><td class="diff_next"></td><td class="diff_header" id="to191_128">128</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_91">91</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td><td class="diff_next"></td><td class="diff_header" id="to191_129">129</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_92">92</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16),</td><td class="diff_next"></td><td class="diff_header" id="to191_130">130</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_93">93</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int16),</td><td class="diff_next"></td><td class="diff_header" id="to191_131">131</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_94">94</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int32),</td><td class="diff_next"></td><td class="diff_header" id="to191_132">132</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int32),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_95">95</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int64),</td><td class="diff_next"></td><td class="diff_header" id="to191_133">133</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_96">96</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int8),</td><td class="diff_next"></td><td class="diff_header" id="to191_134">134</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int8),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_97">97</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(string),</td><td class="diff_next"></td><td class="diff_header" id="to191_135">135</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(string),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_98">98</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint16),</td><td class="diff_next"></td><td class="diff_header" id="to191_136">136</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_99">99</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint32),</td><td class="diff_next"></td><td class="diff_header" id="to191_137">137</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint32),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_100">100</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint64),</td><td class="diff_next"></td><td class="diff_header" id="to191_138">138</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_101">101</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint8)</td><td class="diff_next"></td><td class="diff_header" id="to191_139">139</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint8)</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_102">102</td><td nowrap="nowrap">&nbsp;&nbsp;):</td><td class="diff_next"></td><td class="diff_header" id="to191_140">140</td><td nowrap="nowrap">&nbsp;&nbsp;):</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_103">103</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;input&nbsp;'X'&nbsp;and&nbsp;output&nbsp;'Y'&nbsp;to&nbsp;all&nbsp;tensor&nbsp;types.</td><td class="diff_next"></td><td class="diff_header" id="to191_141">141</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;input&nbsp;'X'&nbsp;and&nbsp;output&nbsp;'Y'&nbsp;to&nbsp;all&nbsp;tensor&nbsp;types.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_104">104</td><td nowrap="nowrap">*&nbsp;**T2**&nbsp;in&nbsp;(</td><td class="diff_next"></td><td class="diff_header" id="to191_142">142</td><td nowrap="nowrap">*&nbsp;**T2**&nbsp;in&nbsp;(</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_105">105</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td><td class="diff_next"></td><td class="diff_header" id="to191_143">143</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_106">106</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td><td class="diff_next"></td><td class="diff_header" id="to191_144">144</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_107">107</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16)</td><td class="diff_next"></td><td class="diff_header" id="to191_145">145</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16)</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_108">108</td><td nowrap="nowrap">&nbsp;&nbsp;):</td><td class="diff_next"></td><td class="diff_header" id="to191_146">146</td><td nowrap="nowrap">&nbsp;&nbsp;):</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from191_109">109</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;roi&nbsp;type&nbsp;to&nbsp;float&nbsp;or&nbsp;double.</td><td class="diff_next"></td><td class="diff_header" id="to191_147">147</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;roi&nbsp;type&nbsp;to&nbsp;float&nbsp;or&nbsp;double.</td></tr>
            </tbody>
        </table>

.. _l-onnx-op-resize-13:
Resize - 13
===========
**Version**
* **name**: `Resize (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Resize>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Resize the input tensor. In general, it calculates every value in the output tensor as a weighted average of neighborhood (a.k.a. sampling locations) in the input tensor.
Each dimension value of the output tensor is:
  output_dimension = floor(input_dimension * (roi_end - roi_start) * scale) if input \"sizes\" is not specified.

**Attributes**
* **coordinate_transformation_mode**:
   This attribute describes how to transform the coordinate in the
  resized tensor to the coordinate in the original tensor. <br/>  The
  coordinate of each dimension is transformed individually. Let's
  describe a case using axis x as an example. Denote x_resized as the
  coordinate of axis x in the resized tensor, x_original as the
  coordinate of axis x in the original tensor, length_original as the
  length of the original tensor in axis x, length_resized as the
  length of the resized tensor in axis x, roi_x = (start_x, end_x) of
  the axis x in input "roi", scale = length_resized / length_original,
  <br/>  if coordinate_transformation_mode is "half_pixel", <br/>
  x_original = (x_resized + 0.5) / scale - 0.5, <br/>  if
  coordinate_transformation_mode is "pytorch_half_pixel", <br/>
  x_original = length_resized > 1 ? (x_resized + 0.5) / scale - 0.5 :
  0, <br/>  if coordinate_transformation_mode is "align_corners",
  <br/> x_original = x_resized * (length_original - 1) /
  (length_resized - 1), <br/>  if coordinate_transformation_mode is
  "asymmetric", <br/> x_original = x_resized / scale, <br/>  if
  coordinate_transformation_mode is "tf_crop_and_resize", <br/>
  x_original = length_resized > 1 ? start_x * (length_original - 1) +
  x_resized * (end_x - start_x) * (length_original - 1) /
  (length_resized - 1) : 0.5 * (start_x + end_x) * (length_original -
  1).
* **cubic_coeff_a**:
  The coefficient 'a' used in cubic interpolation. Two common choice
  are -0.5 (in some cases of TensorFlow) and -0.75 (in PyTorch). Check
  out Equation (4) in https://ieeexplore.ieee.org/document/1163711 for
  the details. This attribute is valid only if "mode" is "cubic".
* **exclude_outside**:
  If set to 1, the weight of sampling locations outside the tensor
  will be set to 0 and the weight will be renormalized so that their
  sum is 1.0. The default value is 0.
* **extrapolation_value**:
  When coordinate_transformation_mode is "tf_crop_and_resize" and
  x_original is outside the range [0, length_original - 1], this value
  is used as the corresponding output value. Default is 0.0f.
* **mode**:
  Three interpolation modes: nearest (default), linear and cubic. The
  "linear" mode includes linear interpolation for 1D tensor and
  N-linear interpolation for N-D tensor (for example, bilinear
  interpolation for 2D tensor). The "cubic" mode includes cubic
  interpolation for 1D tensor and N-cubic interpolation for N-D tensor
  (for example, bicubic interpolation for 2D tensor).
* **nearest_mode**:
  Four modes: round_prefer_floor (default, as known as round half
  down), round_prefer_ceil (as known as round half up), floor, ceil.
  Only used by nearest interpolation. It indicates how to get
  "nearest" pixel in input tensor from x_original, so this attribute
  is valid only if "mode" is "nearest".

**Inputs**
Between 1 and 4 inputs.

* **X** (heterogeneous) - **T1**:
  N-D tensor
* **roi** (optional, heterogeneous) - **T2**:
  1-D tensor given as [start1, ..., startN, end1, ..., endN], where N
  is the rank of X. The RoIs' coordinates are normalized in the
  coordinate system of the input image. It only takes effect when
  coordinate_transformation_mode is "tf_crop_and_resize"
* **scales** (optional, heterogeneous) - **tensor(float)**:
  The scale array along each dimension. It takes value greater than 0.
  If it's less than 1, it's sampling down, otherwise, it's upsampling.
  The number of elements of 'scales' should be the same as the rank of
  input 'X'. One of 'scales' and 'sizes' MUST be specified and it is
  an error if both are specified. If 'sizes' is needed, the user can
  use an empty string as the name of 'scales' in this operator's input
  list.
* **sizes** (optional, heterogeneous) - **tensor(int64)**:
  The size of the output tensor. The number of elements of 'sizes'
  should be the same as the rank of input 'X'. Only one of 'scales'
  and 'sizes' can be specified.

**Outputs**

* **Y** (heterogeneous) - **T1**:
  N-D tensor after resizing

**Type Constraints**
* **T1** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input 'X' and output 'Y' to all tensor types.
* **T2** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain roi type to float or double.

**Differences**

.. raw:: html

        <table class="diff" id="difflib_chg_to192__top"
               cellspacing="0" cellpadding="0" rules="groups" >
            <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
            <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>

            <tbody>
                <tr><td class="diff_next"><a href="#difflib_chg_to192__0">f</a></td><td class="diff_header" id="from192_1">1</td><td nowrap="nowrap">Resize&nbsp;the&nbsp;input&nbsp;tensor.&nbsp;In&nbsp;general,&nbsp;it&nbsp;calculates&nbsp;every&nbsp;value&nbsp;in&nbsp;the&nbsp;output&nbsp;tensor&nbsp;as&nbsp;a&nbsp;weighted&nbsp;average&nbsp;of&nbsp;neighborhood&nbsp;(a.k.a.&nbsp;sampling&nbsp;locations)&nbsp;in&nbsp;the&nbsp;input&nbsp;tensor.</td><td class="diff_next"><a href="#difflib_chg_to192__0">f</a></td><td class="diff_header" id="to192_1">1</td><td nowrap="nowrap">Resize&nbsp;the&nbsp;input&nbsp;tensor.&nbsp;In&nbsp;general,&nbsp;it&nbsp;calculates&nbsp;every&nbsp;value&nbsp;in&nbsp;the&nbsp;output&nbsp;tensor&nbsp;as&nbsp;a&nbsp;weighted&nbsp;average&nbsp;of&nbsp;neighborhood&nbsp;(a.k.a.&nbsp;sampling&nbsp;locations)&nbsp;in&nbsp;the&nbsp;input&nbsp;tensor.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_2">2</td><td nowrap="nowrap">Each&nbsp;dimension&nbsp;value&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor&nbsp;is:</td><td class="diff_next"></td><td class="diff_header" id="to192_2">2</td><td nowrap="nowrap">Each&nbsp;dimension&nbsp;value&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor&nbsp;is:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_3">3</td><td nowrap="nowrap">&nbsp;&nbsp;output_dimension&nbsp;=&nbsp;floor(input_dimension&nbsp;*&nbsp;(roi_end&nbsp;-&nbsp;roi_start)&nbsp;*&nbsp;scale)&nbsp;if&nbsp;input&nbsp;\"sizes\"&nbsp;is&nbsp;not&nbsp;specified.</td><td class="diff_next"></td><td class="diff_header" id="to192_3">3</td><td nowrap="nowrap">&nbsp;&nbsp;output_dimension&nbsp;=&nbsp;floor(input_dimension&nbsp;*&nbsp;(roi_end&nbsp;-&nbsp;roi_start)&nbsp;*&nbsp;scale)&nbsp;if&nbsp;input&nbsp;\"sizes\"&nbsp;is&nbsp;not&nbsp;specified.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_4">4</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_4">4</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_5">5</td><td nowrap="nowrap">**Attributes**</td><td class="diff_next"></td><td class="diff_header" id="to192_5">5</td><td nowrap="nowrap">**Attributes**</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_6">6</td><td nowrap="nowrap">*&nbsp;**coordinate_transformation_mode**:</td><td class="diff_next"></td><td class="diff_header" id="to192_6">6</td><td nowrap="nowrap">*&nbsp;**coordinate_transformation_mode**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_7">7</td><td nowrap="nowrap">&nbsp;&nbsp;&nbsp;This&nbsp;attribute&nbsp;describes&nbsp;how&nbsp;to&nbsp;transform&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to192_7">7</td><td nowrap="nowrap">&nbsp;&nbsp;&nbsp;This&nbsp;attribute&nbsp;describes&nbsp;how&nbsp;to&nbsp;transform&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_8">8</td><td nowrap="nowrap">&nbsp;&nbsp;resized&nbsp;tensor&nbsp;to&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor.&nbsp;&lt;br/&gt;&nbsp;&nbsp;The</td><td class="diff_next"></td><td class="diff_header" id="to192_8">8</td><td nowrap="nowrap">&nbsp;&nbsp;resized&nbsp;tensor&nbsp;to&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor.&nbsp;&lt;br/&gt;&nbsp;&nbsp;The</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_9">9</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;each&nbsp;dimension&nbsp;is&nbsp;transformed&nbsp;individually.&nbsp;Let's</td><td class="diff_next"></td><td class="diff_header" id="to192_9">9</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;each&nbsp;dimension&nbsp;is&nbsp;transformed&nbsp;individually.&nbsp;Let's</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_10">10</td><td nowrap="nowrap">&nbsp;&nbsp;describe&nbsp;a&nbsp;case&nbsp;using&nbsp;axis&nbsp;x&nbsp;as&nbsp;an&nbsp;example.&nbsp;Denote&nbsp;x_resized&nbsp;as&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to192_10">10</td><td nowrap="nowrap">&nbsp;&nbsp;describe&nbsp;a&nbsp;case&nbsp;using&nbsp;axis&nbsp;x&nbsp;as&nbsp;an&nbsp;example.&nbsp;Denote&nbsp;x_resized&nbsp;as&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_11">11</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;resized&nbsp;tensor,&nbsp;x_original&nbsp;as&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to192_11">11</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;resized&nbsp;tensor,&nbsp;x_original&nbsp;as&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_12">12</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor,&nbsp;length_original&nbsp;as&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to192_12">12</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor,&nbsp;length_original&nbsp;as&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_13">13</td><td nowrap="nowrap">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;original&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;length_resized&nbsp;as&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to192_13">13</td><td nowrap="nowrap">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;original&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;length_resized&nbsp;as&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_14">14</td><td nowrap="nowrap">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;resized&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;roi_x&nbsp;=&nbsp;(start_x,&nbsp;end_x)&nbsp;of</td><td class="diff_next"></td><td class="diff_header" id="to192_14">14</td><td nowrap="nowrap">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;resized&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;roi_x&nbsp;=&nbsp;(start_x,&nbsp;end_x)&nbsp;of</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_15">15</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;axis&nbsp;x&nbsp;in&nbsp;input&nbsp;"roi",&nbsp;scale&nbsp;=&nbsp;length_resized&nbsp;/&nbsp;length_original,</td><td class="diff_next"></td><td class="diff_header" id="to192_15">15</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;axis&nbsp;x&nbsp;in&nbsp;input&nbsp;"roi",&nbsp;scale&nbsp;=&nbsp;length_resized&nbsp;/&nbsp;length_original,</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_16">16</td><td nowrap="nowrap">&nbsp;&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"half_pixel",&nbsp;&lt;br/&gt;</td><td class="diff_next"></td><td class="diff_header" id="to192_16">16</td><td nowrap="nowrap">&nbsp;&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"half_pixel",&nbsp;&lt;br/&gt;</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_17">17</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;=&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</td><td class="diff_next"></td><td class="diff_header" id="to192_17">17</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;=&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_18">18</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"pytorch_half_pixel",&nbsp;&lt;br/&gt;</td><td class="diff_next"></td><td class="diff_header" id="to192_18">18</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"pytorch_half_pixel",&nbsp;&lt;br/&gt;</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to192__0"></td><td class="diff_header" id="from192_19">19</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5&nbsp;:</td><td class="diff_next"></td><td class="diff_header" id="to192_19">19</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5&nbsp;:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_20">20</td><td nowrap="nowrap">&nbsp;&nbsp;0,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"align_corners",</td><td class="diff_next"></td><td class="diff_header" id="to192_20">20</td><td nowrap="nowrap">&nbsp;&nbsp;0,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"align_corners",</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_21">21</td><td nowrap="nowrap">&nbsp;&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/</td><td class="diff_next"></td><td class="diff_header" id="to192_21">21</td><td nowrap="nowrap">&nbsp;&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_22">22</td><td nowrap="nowrap">&nbsp;&nbsp;(length_resized&nbsp;-&nbsp;1),&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is</td><td class="diff_next"></td><td class="diff_header" id="to192_22">22</td><td nowrap="nowrap">&nbsp;&nbsp;(length_resized&nbsp;-&nbsp;1),&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_23">23</td><td nowrap="nowrap">&nbsp;&nbsp;"asymmetric",&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;/&nbsp;scale,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</td><td class="diff_next"></td><td class="diff_header" id="to192_23">23</td><td nowrap="nowrap">&nbsp;&nbsp;"asymmetric",&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;/&nbsp;scale,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to192__1">n</a></td><td class="diff_header" id="from192_24">24</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_half_pixel_for_nn",&nbsp;&lt;br/&gt;</span></td><td class="diff_next"><a href="#difflib_chg_to192__1">n</a></td><td class="diff_header"></td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_25">25</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;x_original&nbsp;=&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</span></td><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_26">26</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize",&nbsp;&lt;br/&gt;</td><td class="diff_next"></td><td class="diff_header" id="to192_24">24</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize",&nbsp;&lt;br/&gt;</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_27">27</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;start_x&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;+</td><td class="diff_next"></td><td class="diff_header" id="to192_25">25</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;start_x&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;+</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_28">28</td><td nowrap="nowrap">&nbsp;&nbsp;x_resized&nbsp;*&nbsp;(end_x&nbsp;-&nbsp;start_x)&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/</td><td class="diff_next"></td><td class="diff_header" id="to192_26">26</td><td nowrap="nowrap">&nbsp;&nbsp;x_resized&nbsp;*&nbsp;(end_x&nbsp;-&nbsp;start_x)&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_29">29</td><td nowrap="nowrap">&nbsp;&nbsp;(length_resized&nbsp;-&nbsp;1)&nbsp;:&nbsp;0.5&nbsp;*&nbsp;(start_x&nbsp;+&nbsp;end_x)&nbsp;*&nbsp;(length_original&nbsp;-</td><td class="diff_next"></td><td class="diff_header" id="to192_27">27</td><td nowrap="nowrap">&nbsp;&nbsp;(length_resized&nbsp;-&nbsp;1)&nbsp;:&nbsp;0.5&nbsp;*&nbsp;(start_x&nbsp;+&nbsp;end_x)&nbsp;*&nbsp;(length_original&nbsp;-</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_30">30</td><td nowrap="nowrap">&nbsp;&nbsp;1).</td><td class="diff_next"></td><td class="diff_header" id="to192_28">28</td><td nowrap="nowrap">&nbsp;&nbsp;1).</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_31">31</td><td nowrap="nowrap">*&nbsp;**cubic_coeff_a**:</td><td class="diff_next"></td><td class="diff_header" id="to192_29">29</td><td nowrap="nowrap">*&nbsp;**cubic_coeff_a**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_32">32</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;coefficient&nbsp;'a'&nbsp;used&nbsp;in&nbsp;cubic&nbsp;interpolation.&nbsp;Two&nbsp;common&nbsp;choice</td><td class="diff_next"></td><td class="diff_header" id="to192_30">30</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;coefficient&nbsp;'a'&nbsp;used&nbsp;in&nbsp;cubic&nbsp;interpolation.&nbsp;Two&nbsp;common&nbsp;choice</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_33">33</td><td nowrap="nowrap">&nbsp;&nbsp;are&nbsp;-0.5&nbsp;(in&nbsp;some&nbsp;cases&nbsp;of&nbsp;TensorFlow)&nbsp;and&nbsp;-0.75&nbsp;(in&nbsp;PyTorch).&nbsp;Check</td><td class="diff_next"></td><td class="diff_header" id="to192_31">31</td><td nowrap="nowrap">&nbsp;&nbsp;are&nbsp;-0.5&nbsp;(in&nbsp;some&nbsp;cases&nbsp;of&nbsp;TensorFlow)&nbsp;and&nbsp;-0.75&nbsp;(in&nbsp;PyTorch).&nbsp;Check</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_34">34</td><td nowrap="nowrap">&nbsp;&nbsp;out&nbsp;Equation&nbsp;(4)&nbsp;in&nbsp;https://ieeexplore.ieee.org/document/1163711&nbsp;for</td><td class="diff_next"></td><td class="diff_header" id="to192_32">32</td><td nowrap="nowrap">&nbsp;&nbsp;out&nbsp;Equation&nbsp;(4)&nbsp;in&nbsp;https://ieeexplore.ieee.org/document/1163711&nbsp;for</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_35">35</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;details.&nbsp;This&nbsp;attribute&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"cubic".</td><td class="diff_next"></td><td class="diff_header" id="to192_33">33</td><td nowrap="nowrap">&nbsp;&nbsp;the&nbsp;details.&nbsp;This&nbsp;attribute&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"cubic".</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_36">36</td><td nowrap="nowrap">*&nbsp;**exclude_outside**:</td><td class="diff_next"></td><td class="diff_header" id="to192_34">34</td><td nowrap="nowrap">*&nbsp;**exclude_outside**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_37">37</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;set&nbsp;to&nbsp;1,&nbsp;the&nbsp;weight&nbsp;of&nbsp;sampling&nbsp;locations&nbsp;outside&nbsp;the&nbsp;tensor</td><td class="diff_next"></td><td class="diff_header" id="to192_35">35</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;set&nbsp;to&nbsp;1,&nbsp;the&nbsp;weight&nbsp;of&nbsp;sampling&nbsp;locations&nbsp;outside&nbsp;the&nbsp;tensor</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_38">38</td><td nowrap="nowrap">&nbsp;&nbsp;will&nbsp;be&nbsp;set&nbsp;to&nbsp;0&nbsp;and&nbsp;the&nbsp;weight&nbsp;will&nbsp;be&nbsp;renormalized&nbsp;so&nbsp;that&nbsp;their</td><td class="diff_next"></td><td class="diff_header" id="to192_36">36</td><td nowrap="nowrap">&nbsp;&nbsp;will&nbsp;be&nbsp;set&nbsp;to&nbsp;0&nbsp;and&nbsp;the&nbsp;weight&nbsp;will&nbsp;be&nbsp;renormalized&nbsp;so&nbsp;that&nbsp;their</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_39">39</td><td nowrap="nowrap">&nbsp;&nbsp;sum&nbsp;is&nbsp;1.0.&nbsp;The&nbsp;default&nbsp;value&nbsp;is&nbsp;0.</td><td class="diff_next"></td><td class="diff_header" id="to192_37">37</td><td nowrap="nowrap">&nbsp;&nbsp;sum&nbsp;is&nbsp;1.0.&nbsp;The&nbsp;default&nbsp;value&nbsp;is&nbsp;0.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_40">40</td><td nowrap="nowrap">*&nbsp;**extrapolation_value**:</td><td class="diff_next"></td><td class="diff_header" id="to192_38">38</td><td nowrap="nowrap">*&nbsp;**extrapolation_value**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_41">41</td><td nowrap="nowrap">&nbsp;&nbsp;When&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"&nbsp;and</td><td class="diff_next"></td><td class="diff_header" id="to192_39">39</td><td nowrap="nowrap">&nbsp;&nbsp;When&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"&nbsp;and</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_42">42</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;is&nbsp;outside&nbsp;the&nbsp;range&nbsp;[0,&nbsp;length_original&nbsp;-&nbsp;1],&nbsp;this&nbsp;value</td><td class="diff_next"></td><td class="diff_header" id="to192_40">40</td><td nowrap="nowrap">&nbsp;&nbsp;x_original&nbsp;is&nbsp;outside&nbsp;the&nbsp;range&nbsp;[0,&nbsp;length_original&nbsp;-&nbsp;1],&nbsp;this&nbsp;value</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_43">43</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;used&nbsp;as&nbsp;the&nbsp;corresponding&nbsp;output&nbsp;value.&nbsp;Default&nbsp;is&nbsp;0.0f.</td><td class="diff_next"></td><td class="diff_header" id="to192_41">41</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;used&nbsp;as&nbsp;the&nbsp;corresponding&nbsp;output&nbsp;value.&nbsp;Default&nbsp;is&nbsp;0.0f.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_44">44</td><td nowrap="nowrap">*&nbsp;**mode**:</td><td class="diff_next"></td><td class="diff_header" id="to192_42">42</td><td nowrap="nowrap">*&nbsp;**mode**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_45">45</td><td nowrap="nowrap">&nbsp;&nbsp;Three&nbsp;interpolation&nbsp;modes:&nbsp;nearest&nbsp;(default),&nbsp;linear&nbsp;and&nbsp;cubic.&nbsp;The</td><td class="diff_next"></td><td class="diff_header" id="to192_43">43</td><td nowrap="nowrap">&nbsp;&nbsp;Three&nbsp;interpolation&nbsp;modes:&nbsp;nearest&nbsp;(default),&nbsp;linear&nbsp;and&nbsp;cubic.&nbsp;The</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_46">46</td><td nowrap="nowrap">&nbsp;&nbsp;"linear"&nbsp;mode&nbsp;includes&nbsp;linear&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and</td><td class="diff_next"></td><td class="diff_header" id="to192_44">44</td><td nowrap="nowrap">&nbsp;&nbsp;"linear"&nbsp;mode&nbsp;includes&nbsp;linear&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_47">47</td><td nowrap="nowrap">&nbsp;&nbsp;N-linear&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor&nbsp;(for&nbsp;example,&nbsp;bilinear</td><td class="diff_next"></td><td class="diff_header" id="to192_45">45</td><td nowrap="nowrap">&nbsp;&nbsp;N-linear&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor&nbsp;(for&nbsp;example,&nbsp;bilinear</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_48">48</td><td nowrap="nowrap">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).&nbsp;The&nbsp;"cubic"&nbsp;mode&nbsp;includes&nbsp;cubic</td><td class="diff_next"></td><td class="diff_header" id="to192_46">46</td><td nowrap="nowrap">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).&nbsp;The&nbsp;"cubic"&nbsp;mode&nbsp;includes&nbsp;cubic</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_49">49</td><td nowrap="nowrap">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and&nbsp;N-cubic&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor</td><td class="diff_next"></td><td class="diff_header" id="to192_47">47</td><td nowrap="nowrap">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and&nbsp;N-cubic&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_50">50</td><td nowrap="nowrap">&nbsp;&nbsp;(for&nbsp;example,&nbsp;bicubic&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).</td><td class="diff_next"></td><td class="diff_header" id="to192_48">48</td><td nowrap="nowrap">&nbsp;&nbsp;(for&nbsp;example,&nbsp;bicubic&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_51">51</td><td nowrap="nowrap">*&nbsp;**nearest_mode**:</td><td class="diff_next"></td><td class="diff_header" id="to192_49">49</td><td nowrap="nowrap">*&nbsp;**nearest_mode**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_52">52</td><td nowrap="nowrap">&nbsp;&nbsp;Four&nbsp;modes:&nbsp;round_prefer_floor&nbsp;(default,&nbsp;as&nbsp;known&nbsp;as&nbsp;round&nbsp;half</td><td class="diff_next"></td><td class="diff_header" id="to192_50">50</td><td nowrap="nowrap">&nbsp;&nbsp;Four&nbsp;modes:&nbsp;round_prefer_floor&nbsp;(default,&nbsp;as&nbsp;known&nbsp;as&nbsp;round&nbsp;half</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_53">53</td><td nowrap="nowrap">&nbsp;&nbsp;down),&nbsp;round_prefer_ceil&nbsp;(as&nbsp;known&nbsp;as&nbsp;round&nbsp;half&nbsp;up),&nbsp;floor,&nbsp;ceil.</td><td class="diff_next"></td><td class="diff_header" id="to192_51">51</td><td nowrap="nowrap">&nbsp;&nbsp;down),&nbsp;round_prefer_ceil&nbsp;(as&nbsp;known&nbsp;as&nbsp;round&nbsp;half&nbsp;up),&nbsp;floor,&nbsp;ceil.</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to192__1"></td><td class="diff_header" id="from192_54">54</td><td nowrap="nowrap">&nbsp;&nbsp;Only&nbsp;used&nbsp;by&nbsp;nearest&nbsp;interpolation.&nbsp;It&nbsp;indicates&nbsp;how&nbsp;to&nbsp;get</td><td class="diff_next"></td><td class="diff_header" id="to192_52">52</td><td nowrap="nowrap">&nbsp;&nbsp;Only&nbsp;used&nbsp;by&nbsp;nearest&nbsp;interpolation.&nbsp;It&nbsp;indicates&nbsp;how&nbsp;to&nbsp;get</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_55">55</td><td nowrap="nowrap">&nbsp;&nbsp;"nearest"&nbsp;pixel&nbsp;in&nbsp;input&nbsp;tensor&nbsp;from&nbsp;x_original,&nbsp;so&nbsp;this&nbsp;attribute</td><td class="diff_next"></td><td class="diff_header" id="to192_53">53</td><td nowrap="nowrap">&nbsp;&nbsp;"nearest"&nbsp;pixel&nbsp;in&nbsp;input&nbsp;tensor&nbsp;from&nbsp;x_original,&nbsp;so&nbsp;this&nbsp;attribute</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_56">56</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"nearest".</td><td class="diff_next"></td><td class="diff_header" id="to192_54">54</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"nearest".</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_57">57</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_55">55</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to192__2"></td><td class="diff_header" id="from192_58">58</td><td nowrap="nowrap">**Inputs**</td><td class="diff_next"></td><td class="diff_header" id="to192_56">56</td><td nowrap="nowrap">**Inputs**</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to192__2">n</a></td><td class="diff_header" id="from192_59">59</td><td nowrap="nowrap">Between&nbsp;<span class="diff_chg">3</span>&nbsp;and&nbsp;4&nbsp;inputs.</td><td class="diff_next"><a href="#difflib_chg_to192__2">n</a></td><td class="diff_header" id="to192_57">57</td><td nowrap="nowrap">Between&nbsp;<span class="diff_chg">1</span>&nbsp;and&nbsp;4&nbsp;inputs.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_60">60</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_58">58</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_61">61</td><td nowrap="nowrap">*&nbsp;**X**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td><td class="diff_next"></td><td class="diff_header" id="to192_59">59</td><td nowrap="nowrap">*&nbsp;**X**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_62">62</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor</td><td class="diff_next"></td><td class="diff_header" id="to192_60">60</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to192__3"><a href="#difflib_chg_to192__3">n</a></td><td class="diff_header" id="from192_63">63</td><td nowrap="nowrap">*&nbsp;**roi**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T2**:</td><td class="diff_next"><a href="#difflib_chg_to192__3">n</a></td><td class="diff_header" id="to192_61">61</td><td nowrap="nowrap">*&nbsp;**roi**&nbsp;(<span class="diff_add">optional,&nbsp;</span>heterogeneous)&nbsp;-&nbsp;**T2**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_64">64</td><td nowrap="nowrap">&nbsp;&nbsp;1-D&nbsp;tensor&nbsp;given&nbsp;as&nbsp;[start1,&nbsp;...,&nbsp;startN,&nbsp;end1,&nbsp;...,&nbsp;endN],&nbsp;where&nbsp;N</td><td class="diff_next"></td><td class="diff_header" id="to192_62">62</td><td nowrap="nowrap">&nbsp;&nbsp;1-D&nbsp;tensor&nbsp;given&nbsp;as&nbsp;[start1,&nbsp;...,&nbsp;startN,&nbsp;end1,&nbsp;...,&nbsp;endN],&nbsp;where&nbsp;N</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_65">65</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;the&nbsp;rank&nbsp;of&nbsp;X.&nbsp;The&nbsp;RoIs'&nbsp;coordinates&nbsp;are&nbsp;normalized&nbsp;in&nbsp;the</td><td class="diff_next"></td><td class="diff_header" id="to192_63">63</td><td nowrap="nowrap">&nbsp;&nbsp;is&nbsp;the&nbsp;rank&nbsp;of&nbsp;X.&nbsp;The&nbsp;RoIs'&nbsp;coordinates&nbsp;are&nbsp;normalized&nbsp;in&nbsp;the</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_66">66</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;system&nbsp;of&nbsp;the&nbsp;input&nbsp;image.&nbsp;It&nbsp;only&nbsp;takes&nbsp;effect&nbsp;when</td><td class="diff_next"></td><td class="diff_header" id="to192_64">64</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate&nbsp;system&nbsp;of&nbsp;the&nbsp;input&nbsp;image.&nbsp;It&nbsp;only&nbsp;takes&nbsp;effect&nbsp;when</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to192__4"></td><td class="diff_header" id="from192_67">67</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"</td><td class="diff_next"></td><td class="diff_header" id="to192_65">65</td><td nowrap="nowrap">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to192__4">n</a></td><td class="diff_header" id="from192_68">68</td><td nowrap="nowrap">*&nbsp;**scales**&nbsp;(heterogeneous)&nbsp;-&nbsp;**tensor(float)**:</td><td class="diff_next"><a href="#difflib_chg_to192__4">n</a></td><td class="diff_header" id="to192_66">66</td><td nowrap="nowrap">*&nbsp;**scales**&nbsp;(<span class="diff_add">optional,&nbsp;</span>heterogeneous)&nbsp;-&nbsp;**tensor(float)**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_69">69</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;scale&nbsp;array&nbsp;along&nbsp;each&nbsp;dimension.&nbsp;It&nbsp;takes&nbsp;value&nbsp;greater&nbsp;than&nbsp;0.</td><td class="diff_next"></td><td class="diff_header" id="to192_67">67</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;scale&nbsp;array&nbsp;along&nbsp;each&nbsp;dimension.&nbsp;It&nbsp;takes&nbsp;value&nbsp;greater&nbsp;than&nbsp;0.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_70">70</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;it's&nbsp;less&nbsp;than&nbsp;1,&nbsp;it's&nbsp;sampling&nbsp;down,&nbsp;otherwise,&nbsp;it's&nbsp;upsampling.</td><td class="diff_next"></td><td class="diff_header" id="to192_68">68</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;it's&nbsp;less&nbsp;than&nbsp;1,&nbsp;it's&nbsp;sampling&nbsp;down,&nbsp;otherwise,&nbsp;it's&nbsp;upsampling.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_71">71</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'scales'&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of</td><td class="diff_next"></td><td class="diff_header" id="to192_69">69</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'scales'&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to192__5">n</a></td><td class="diff_header" id="from192_72">72</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;input&nbsp;'X'.&nbsp;If&nbsp;'size'&nbsp;is&nbsp;needed,&nbsp;the&nbsp;user&nbsp;must&nbsp;set&nbsp;'scales'&nbsp;to&nbsp;an</span></td><td class="diff_next"><a href="#difflib_chg_to192__5">n</a></td><td class="diff_header" id="to192_70">70</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;input&nbsp;'X'.&nbsp;One&nbsp;of&nbsp;'scales'&nbsp;and&nbsp;'sizes'&nbsp;MUST&nbsp;be&nbsp;specified&nbsp;and&nbsp;it&nbsp;is</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to192__5"></td><td class="diff_header" id="from192_73">73</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;empty&nbsp;tensor.</span></td><td class="diff_next"></td><td class="diff_header" id="to192_71">71</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;an&nbsp;error&nbsp;if&nbsp;both&nbsp;are&nbsp;specified.&nbsp;If&nbsp;'sizes'&nbsp;is&nbsp;needed,&nbsp;the&nbsp;user&nbsp;can</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_72">72</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;use&nbsp;an&nbsp;empty&nbsp;string&nbsp;as&nbsp;the&nbsp;name&nbsp;of&nbsp;'scales'&nbsp;in&nbsp;this&nbsp;operator's&nbsp;input</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_73">73</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;list.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_74">74</td><td nowrap="nowrap">*&nbsp;**sizes**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**tensor(int64)**:</td><td class="diff_next"></td><td class="diff_header" id="to192_74">74</td><td nowrap="nowrap">*&nbsp;**sizes**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**tensor(int64)**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_75">75</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;size&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor.&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'sizes'</td><td class="diff_next"></td><td class="diff_header" id="to192_75">75</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;size&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor.&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'sizes'</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to192__6">n</a></td><td class="diff_header" id="from192_76">76</td><td nowrap="nowrap">&nbsp;&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of&nbsp;input&nbsp;'X'.&nbsp;<span class="diff_chg">May&nbsp;o</span>nly&nbsp;<span class="diff_chg">b</span>e&nbsp;se<span class="diff_chg">t&nbsp;if</span></td><td class="diff_next"><a href="#difflib_chg_to192__6">n</a></td><td class="diff_header" id="to192_76">76</td><td nowrap="nowrap">&nbsp;&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of&nbsp;input&nbsp;'X'.&nbsp;<span class="diff_chg">O</span>nly&nbsp;<span class="diff_chg">on</span>e&nbsp;<span class="diff_add">of&nbsp;'</span>s<span class="diff_add">cal</span>e<span class="diff_chg">s'</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_77">77</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;'scales'&nbsp;is&nbsp;set&nbsp;to&nbsp;an&nbsp;empty&nbsp;tensor.</span></td><td class="diff_next"></td><td class="diff_header" id="to192_77">77</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;and&nbsp;'sizes'&nbsp;can&nbsp;be&nbsp;specified.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_78">78</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_78">78</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_79">79</td><td nowrap="nowrap">**Outputs**</td><td class="diff_next"></td><td class="diff_header" id="to192_79">79</td><td nowrap="nowrap">**Outputs**</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_80">80</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_80">80</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to192__6"></td><td class="diff_header" id="from192_81">81</td><td nowrap="nowrap">*&nbsp;**Y**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td><td class="diff_next"></td><td class="diff_header" id="to192_81">81</td><td nowrap="nowrap">*&nbsp;**Y**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T1**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_82">82</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor&nbsp;after&nbsp;resizing</td><td class="diff_next"></td><td class="diff_header" id="to192_82">82</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor&nbsp;after&nbsp;resizing</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_83">83</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to192_83">83</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_84">84</td><td nowrap="nowrap">**Type&nbsp;Constraints**</td><td class="diff_next"></td><td class="diff_header" id="to192_84">84</td><td nowrap="nowrap">**Type&nbsp;Constraints**</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_85">85</td><td nowrap="nowrap">*&nbsp;**T1**&nbsp;in&nbsp;(</td><td class="diff_next"></td><td class="diff_header" id="to192_85">85</td><td nowrap="nowrap">*&nbsp;**T1**&nbsp;in&nbsp;(</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to192__top">t</a></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"><a href="#difflib_chg_to192__top">t</a></td><td class="diff_header" id="to192_86">86</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;tensor(bfloat16),</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_86">86</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bool),</td><td class="diff_next"></td><td class="diff_header" id="to192_87">87</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bool),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_87">87</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex128),</td><td class="diff_next"></td><td class="diff_header" id="to192_88">88</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex128),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_88">88</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex64),</td><td class="diff_next"></td><td class="diff_header" id="to192_89">89</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_89">89</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td><td class="diff_next"></td><td class="diff_header" id="to192_90">90</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_90">90</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td><td class="diff_next"></td><td class="diff_header" id="to192_91">91</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_91">91</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16),</td><td class="diff_next"></td><td class="diff_header" id="to192_92">92</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_92">92</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int16),</td><td class="diff_next"></td><td class="diff_header" id="to192_93">93</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_93">93</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int32),</td><td class="diff_next"></td><td class="diff_header" id="to192_94">94</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int32),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_94">94</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int64),</td><td class="diff_next"></td><td class="diff_header" id="to192_95">95</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_95">95</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int8),</td><td class="diff_next"></td><td class="diff_header" id="to192_96">96</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int8),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_96">96</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(string),</td><td class="diff_next"></td><td class="diff_header" id="to192_97">97</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(string),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_97">97</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint16),</td><td class="diff_next"></td><td class="diff_header" id="to192_98">98</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_98">98</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint32),</td><td class="diff_next"></td><td class="diff_header" id="to192_99">99</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint32),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_99">99</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint64),</td><td class="diff_next"></td><td class="diff_header" id="to192_100">100</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_100">100</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint8)</td><td class="diff_next"></td><td class="diff_header" id="to192_101">101</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint8)</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_101">101</td><td nowrap="nowrap">&nbsp;&nbsp;):</td><td class="diff_next"></td><td class="diff_header" id="to192_102">102</td><td nowrap="nowrap">&nbsp;&nbsp;):</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_102">102</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;input&nbsp;'X'&nbsp;and&nbsp;output&nbsp;'Y'&nbsp;to&nbsp;all&nbsp;tensor&nbsp;types.</td><td class="diff_next"></td><td class="diff_header" id="to192_103">103</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;input&nbsp;'X'&nbsp;and&nbsp;output&nbsp;'Y'&nbsp;to&nbsp;all&nbsp;tensor&nbsp;types.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_103">103</td><td nowrap="nowrap">*&nbsp;**T2**&nbsp;in&nbsp;(</td><td class="diff_next"></td><td class="diff_header" id="to192_104">104</td><td nowrap="nowrap">*&nbsp;**T2**&nbsp;in&nbsp;(</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_104">104</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td><td class="diff_next"></td><td class="diff_header" id="to192_105">105</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_105">105</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td><td class="diff_next"></td><td class="diff_header" id="to192_106">106</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_106">106</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16)</td><td class="diff_next"></td><td class="diff_header" id="to192_107">107</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16)</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_107">107</td><td nowrap="nowrap">&nbsp;&nbsp;):</td><td class="diff_next"></td><td class="diff_header" id="to192_108">108</td><td nowrap="nowrap">&nbsp;&nbsp;):</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from192_108">108</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;roi&nbsp;type&nbsp;to&nbsp;float&nbsp;or&nbsp;double.</td><td class="diff_next"></td><td class="diff_header" id="to192_109">109</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;roi&nbsp;type&nbsp;to&nbsp;float&nbsp;or&nbsp;double.</td></tr>
            </tbody>
        </table>

.. _l-onnx-op-resize-11:
Resize - 11
===========
**Version**
* **name**: `Resize (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Resize>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Resize the input tensor. In general, it calculates every value in the output tensor as a weighted average of neighborhood (a.k.a. sampling locations) in the input tensor.
Each dimension value of the output tensor is:
  output_dimension = floor(input_dimension * (roi_end - roi_start) * scale) if input \"sizes\" is not specified.

**Attributes**
* **coordinate_transformation_mode**:
   This attribute describes how to transform the coordinate in the
  resized tensor to the coordinate in the original tensor. <br/>  The
  coordinate of each dimension is transformed individually. Let's
  describe a case using axis x as an example. Denote x_resized as the
  coordinate of axis x in the resized tensor, x_original as the
  coordinate of axis x in the original tensor, length_original as the
  length of the original tensor in axis x, length_resized as the
  length of the resized tensor in axis x, roi_x = (start_x, end_x) of
  the axis x in input "roi", scale = length_resized / length_original,
  <br/>  if coordinate_transformation_mode is "half_pixel", <br/>
  x_original = (x_resized + 0.5) / scale - 0.5, <br/>  if
  coordinate_transformation_mode is "pytorch_half_pixel", <br/>
  x_original = length_resized > 1 ? (x_resized + 0.5) / scale - 0.5 :
  0, <br/>  if coordinate_transformation_mode is "align_corners",
  <br/> x_original = x_resized * (length_original - 1) /
  (length_resized - 1), <br/>  if coordinate_transformation_mode is
  "asymmetric", <br/> x_original = x_resized / scale, <br/>  if
  coordinate_transformation_mode is "tf_half_pixel_for_nn", <br/>
  x_original = (x_resized + 0.5) / scale, <br/>  if
  coordinate_transformation_mode is "tf_crop_and_resize", <br/>
  x_original = length_resized > 1 ? start_x * (length_original - 1) +
  x_resized * (end_x - start_x) * (length_original - 1) /
  (length_resized - 1) : 0.5 * (start_x + end_x) * (length_original -
  1).
* **cubic_coeff_a**:
  The coefficient 'a' used in cubic interpolation. Two common choice
  are -0.5 (in some cases of TensorFlow) and -0.75 (in PyTorch). Check
  out Equation (4) in https://ieeexplore.ieee.org/document/1163711 for
  the details. This attribute is valid only if "mode" is "cubic".
* **exclude_outside**:
  If set to 1, the weight of sampling locations outside the tensor
  will be set to 0 and the weight will be renormalized so that their
  sum is 1.0. The default value is 0.
* **extrapolation_value**:
  When coordinate_transformation_mode is "tf_crop_and_resize" and
  x_original is outside the range [0, length_original - 1], this value
  is used as the corresponding output value. Default is 0.0f.
* **mode**:
  Three interpolation modes: nearest (default), linear and cubic. The
  "linear" mode includes linear interpolation for 1D tensor and
  N-linear interpolation for N-D tensor (for example, bilinear
  interpolation for 2D tensor). The "cubic" mode includes cubic
  interpolation for 1D tensor and N-cubic interpolation for N-D tensor
  (for example, bicubic interpolation for 2D tensor).
* **nearest_mode**:
  Four modes: round_prefer_floor (default, as known as round half
  down), round_prefer_ceil (as known as round half up), floor, ceil.
  Only used by nearest interpolation. It indicates how to get
  "nearest" pixel in input tensor from x_original, so this attribute
  is valid only if "mode" is "nearest".

**Inputs**
Between 3 and 4 inputs.

* **X** (heterogeneous) - **T1**:
  N-D tensor
* **roi** (heterogeneous) - **T2**:
  1-D tensor given as [start1, ..., startN, end1, ..., endN], where N
  is the rank of X. The RoIs' coordinates are normalized in the
  coordinate system of the input image. It only takes effect when
  coordinate_transformation_mode is "tf_crop_and_resize"
* **scales** (heterogeneous) - **tensor(float)**:
  The scale array along each dimension. It takes value greater than 0.
  If it's less than 1, it's sampling down, otherwise, it's upsampling.
  The number of elements of 'scales' should be the same as the rank of
  input 'X'. If 'size' is needed, the user must set 'scales' to an
  empty tensor.
* **sizes** (optional, heterogeneous) - **tensor(int64)**:
  The size of the output tensor. The number of elements of 'sizes'
  should be the same as the rank of input 'X'. May only be set if
  'scales' is set to an empty tensor.

**Outputs**

* **Y** (heterogeneous) - **T1**:
  N-D tensor after resizing

**Type Constraints**
* **T1** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input 'X' and output 'Y' to all tensor types.
* **T2** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain roi type to float or double.

**Differences**

.. raw:: html

        <table class="diff" id="difflib_chg_to193__top"
               cellspacing="0" cellpadding="0" rules="groups" >
            <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>
            <colgroup></colgroup> <colgroup></colgroup> <colgroup></colgroup>

            <tbody>
                <tr><td class="diff_next" id="difflib_chg_to193__2"><a href="#difflib_chg_to193__1">n</a></td><td class="diff_header" id="from193_1">1</td><td nowrap="nowrap"><span class="diff_sub">Resize&nbsp;the&nbsp;input&nbsp;tensor.</span></td><td class="diff_next"><a href="#difflib_chg_to193__1">n</a></td><td class="diff_header" id="to193_1">1</td><td nowrap="nowrap"><span class="diff_add">Resize&nbsp;the&nbsp;input&nbsp;tensor.&nbsp;In&nbsp;general,&nbsp;it&nbsp;calculates&nbsp;every&nbsp;value&nbsp;in&nbsp;the&nbsp;output&nbsp;tensor&nbsp;as&nbsp;a&nbsp;weighted&nbsp;average&nbsp;of&nbsp;neighborhood&nbsp;(a.k.a.&nbsp;sampling&nbsp;locations)&nbsp;in&nbsp;the&nbsp;input&nbsp;tensor.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_2">2</td><td nowrap="nowrap">Each&nbsp;dimension&nbsp;value&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor&nbsp;is:</td><td class="diff_next"></td><td class="diff_header" id="to193_2">2</td><td nowrap="nowrap">Each&nbsp;dimension&nbsp;value&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor&nbsp;is:</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__2">n</a></td><td class="diff_header" id="from193_3">3</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;output_dimension&nbsp;=&nbsp;floor(input_dimension&nbsp;*&nbsp;scale).</span></td><td class="diff_next"><a href="#difflib_chg_to193__2">n</a></td><td class="diff_header" id="to193_3">3</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;output_dimension&nbsp;=&nbsp;floor(input_dimension&nbsp;*&nbsp;(roi_end&nbsp;-&nbsp;roi_start)&nbsp;*&nbsp;scale)&nbsp;if&nbsp;input&nbsp;\"sizes\"&nbsp;is&nbsp;not&nbsp;specified.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_4">4</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_4">4</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_5">5</td><td nowrap="nowrap">**Attributes**</td><td class="diff_next"></td><td class="diff_header" id="to193_5">5</td><td nowrap="nowrap">**Attributes**</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__3">n</a></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"><a href="#difflib_chg_to193__3">n</a></td><td class="diff_header" id="to193_6">6</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**coordinate_transformation_mode**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_7">7</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;&nbsp;This&nbsp;attribute&nbsp;describes&nbsp;how&nbsp;to&nbsp;transform&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_8">8</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;resized&nbsp;tensor&nbsp;to&nbsp;the&nbsp;coordinate&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor.&nbsp;&lt;br/&gt;&nbsp;&nbsp;The</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_9">9</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;each&nbsp;dimension&nbsp;is&nbsp;transformed&nbsp;individually.&nbsp;Let's</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_10">10</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;describe&nbsp;a&nbsp;case&nbsp;using&nbsp;axis&nbsp;x&nbsp;as&nbsp;an&nbsp;example.&nbsp;Denote&nbsp;x_resized&nbsp;as&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_11">11</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;resized&nbsp;tensor,&nbsp;x_original&nbsp;as&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_12">12</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate&nbsp;of&nbsp;axis&nbsp;x&nbsp;in&nbsp;the&nbsp;original&nbsp;tensor,&nbsp;length_original&nbsp;as&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_13">13</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;original&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;length_resized&nbsp;as&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_14">14</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;length&nbsp;of&nbsp;the&nbsp;resized&nbsp;tensor&nbsp;in&nbsp;axis&nbsp;x,&nbsp;roi_x&nbsp;=&nbsp;(start_x,&nbsp;end_x)&nbsp;of</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_15">15</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;the&nbsp;axis&nbsp;x&nbsp;in&nbsp;input&nbsp;"roi",&nbsp;scale&nbsp;=&nbsp;length_resized&nbsp;/&nbsp;length_original,</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_16">16</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"half_pixel",&nbsp;&lt;br/&gt;</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_17">17</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;x_original&nbsp;=&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_18">18</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"pytorch_half_pixel",&nbsp;&lt;br/&gt;</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_19">19</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale&nbsp;-&nbsp;0.5&nbsp;:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_20">20</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;0,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"align_corners",</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_21">21</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_22">22</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;(length_resized&nbsp;-&nbsp;1),&nbsp;&lt;br/&gt;&nbsp;&nbsp;if&nbsp;coordinate_transformation_mode&nbsp;is</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_23">23</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;"asymmetric",&nbsp;&lt;br/&gt;&nbsp;x_original&nbsp;=&nbsp;x_resized&nbsp;/&nbsp;scale,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_24">24</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_half_pixel_for_nn",&nbsp;&lt;br/&gt;</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_25">25</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;x_original&nbsp;=&nbsp;(x_resized&nbsp;+&nbsp;0.5)&nbsp;/&nbsp;scale,&nbsp;&lt;br/&gt;&nbsp;&nbsp;if</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_26">26</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize",&nbsp;&lt;br/&gt;</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_27">27</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;x_original&nbsp;=&nbsp;length_resized&nbsp;&gt;&nbsp;1&nbsp;?&nbsp;start_x&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;+</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_28">28</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;x_resized&nbsp;*&nbsp;(end_x&nbsp;-&nbsp;start_x)&nbsp;*&nbsp;(length_original&nbsp;-&nbsp;1)&nbsp;/</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_29">29</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;(length_resized&nbsp;-&nbsp;1)&nbsp;:&nbsp;0.5&nbsp;*&nbsp;(start_x&nbsp;+&nbsp;end_x)&nbsp;*&nbsp;(length_original&nbsp;-</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_30">30</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;1).</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_31">31</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**cubic_coeff_a**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_32">32</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;The&nbsp;coefficient&nbsp;'a'&nbsp;used&nbsp;in&nbsp;cubic&nbsp;interpolation.&nbsp;Two&nbsp;common&nbsp;choice</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_33">33</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;are&nbsp;-0.5&nbsp;(in&nbsp;some&nbsp;cases&nbsp;of&nbsp;TensorFlow)&nbsp;and&nbsp;-0.75&nbsp;(in&nbsp;PyTorch).&nbsp;Check</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_34">34</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;out&nbsp;Equation&nbsp;(4)&nbsp;in&nbsp;https://ieeexplore.ieee.org/document/1163711&nbsp;for</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_35">35</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;the&nbsp;details.&nbsp;This&nbsp;attribute&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"cubic".</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_36">36</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**exclude_outside**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_37">37</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;If&nbsp;set&nbsp;to&nbsp;1,&nbsp;the&nbsp;weight&nbsp;of&nbsp;sampling&nbsp;locations&nbsp;outside&nbsp;the&nbsp;tensor</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_38">38</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;will&nbsp;be&nbsp;set&nbsp;to&nbsp;0&nbsp;and&nbsp;the&nbsp;weight&nbsp;will&nbsp;be&nbsp;renormalized&nbsp;so&nbsp;that&nbsp;their</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_39">39</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;sum&nbsp;is&nbsp;1.0.&nbsp;The&nbsp;default&nbsp;value&nbsp;is&nbsp;0.</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__3"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_40">40</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**extrapolation_value**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_41">41</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;When&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"&nbsp;and</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_42">42</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;x_original&nbsp;is&nbsp;outside&nbsp;the&nbsp;range&nbsp;[0,&nbsp;length_original&nbsp;-&nbsp;1],&nbsp;this&nbsp;value</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_43">43</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;is&nbsp;used&nbsp;as&nbsp;the&nbsp;corresponding&nbsp;output&nbsp;value.&nbsp;Default&nbsp;is&nbsp;0.0f.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_6">6</td><td nowrap="nowrap">*&nbsp;**mode**:</td><td class="diff_next"></td><td class="diff_header" id="to193_44">44</td><td nowrap="nowrap">*&nbsp;**mode**:</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__4">n</a></td><td class="diff_header" id="from193_7">7</td><td nowrap="nowrap">&nbsp;&nbsp;T<span class="diff_chg">wo</span>&nbsp;interpolation&nbsp;modes:&nbsp;nearest&nbsp;(default),&nbsp;<span class="diff_sub">and&nbsp;</span>linear&nbsp;<span class="diff_chg">(</span>i<span class="diff_sub">n</span>c<span class="diff_chg">luding</span></td><td class="diff_next"><a href="#difflib_chg_to193__4">n</a></td><td class="diff_header" id="to193_45">45</td><td nowrap="nowrap">&nbsp;&nbsp;T<span class="diff_chg">hree</span>&nbsp;interpolation&nbsp;modes:&nbsp;nearest&nbsp;(default),&nbsp;linear&nbsp;<span class="diff_chg">and&nbsp;cub</span>ic<span class="diff_chg">.&nbsp;The</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_8">8</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;bilinear,&nbsp;trilinear,&nbsp;etc)</span></td><td class="diff_next"></td><td class="diff_header" id="to193_46">46</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;"linear"&nbsp;mode&nbsp;includes&nbsp;linear&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_47">47</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;N-linear&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor&nbsp;(for&nbsp;example,&nbsp;bilinear</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_48">48</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).&nbsp;The&nbsp;"cubic"&nbsp;mode&nbsp;includes&nbsp;cubic</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_49">49</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;interpolation&nbsp;for&nbsp;1D&nbsp;tensor&nbsp;and&nbsp;N-cubic&nbsp;interpolation&nbsp;for&nbsp;N-D&nbsp;tensor</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_50">50</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;(for&nbsp;example,&nbsp;bicubic&nbsp;interpolation&nbsp;for&nbsp;2D&nbsp;tensor).</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_51">51</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**nearest_mode**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_52">52</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;Four&nbsp;modes:&nbsp;round_prefer_floor&nbsp;(default,&nbsp;as&nbsp;known&nbsp;as&nbsp;round&nbsp;half</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_53">53</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;down),&nbsp;round_prefer_ceil&nbsp;(as&nbsp;known&nbsp;as&nbsp;round&nbsp;half&nbsp;up),&nbsp;floor,&nbsp;ceil.</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__4"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_54">54</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;Only&nbsp;used&nbsp;by&nbsp;nearest&nbsp;interpolation.&nbsp;It&nbsp;indicates&nbsp;how&nbsp;to&nbsp;get</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_55">55</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;"nearest"&nbsp;pixel&nbsp;in&nbsp;input&nbsp;tensor&nbsp;from&nbsp;x_original,&nbsp;so&nbsp;this&nbsp;attribute</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__5"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_56">56</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;is&nbsp;valid&nbsp;only&nbsp;if&nbsp;"mode"&nbsp;is&nbsp;"nearest".</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_9">9</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_57">57</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__6"></td><td class="diff_header" id="from193_10">10</td><td nowrap="nowrap">**Inputs**</td><td class="diff_next"></td><td class="diff_header" id="to193_58">58</td><td nowrap="nowrap">**Inputs**</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__5">n</a></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"><a href="#difflib_chg_to193__5">n</a></td><td class="diff_header" id="to193_59">59</td><td nowrap="nowrap"><span class="diff_add">Between&nbsp;3&nbsp;and&nbsp;4&nbsp;inputs.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_11">11</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_60">60</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__6">n</a></td><td class="diff_header" id="from193_12">12</td><td nowrap="nowrap">*&nbsp;**X**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T**:</td><td class="diff_next"><a href="#difflib_chg_to193__6">n</a></td><td class="diff_header" id="to193_61">61</td><td nowrap="nowrap">*&nbsp;**X**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T<span class="diff_add">1</span>**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_13">13</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor</td><td class="diff_next"></td><td class="diff_header" id="to193_62">62</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__7">n</a></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"><a href="#difflib_chg_to193__7">n</a></td><td class="diff_header" id="to193_63">63</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**roi**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T2**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_64">64</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;1-D&nbsp;tensor&nbsp;given&nbsp;as&nbsp;[start1,&nbsp;...,&nbsp;startN,&nbsp;end1,&nbsp;...,&nbsp;endN],&nbsp;where&nbsp;N</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_65">65</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;is&nbsp;the&nbsp;rank&nbsp;of&nbsp;X.&nbsp;The&nbsp;RoIs'&nbsp;coordinates&nbsp;are&nbsp;normalized&nbsp;in&nbsp;the</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_66">66</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate&nbsp;system&nbsp;of&nbsp;the&nbsp;input&nbsp;image.&nbsp;It&nbsp;only&nbsp;takes&nbsp;effect&nbsp;when</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__7"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_67">67</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;coordinate_transformation_mode&nbsp;is&nbsp;"tf_crop_and_resize"</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_14">14</td><td nowrap="nowrap">*&nbsp;**scales**&nbsp;(heterogeneous)&nbsp;-&nbsp;**tensor(float)**:</td><td class="diff_next"></td><td class="diff_header" id="to193_68">68</td><td nowrap="nowrap">*&nbsp;**scales**&nbsp;(heterogeneous)&nbsp;-&nbsp;**tensor(float)**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_15">15</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;scale&nbsp;array&nbsp;along&nbsp;each&nbsp;dimension.&nbsp;It&nbsp;takes&nbsp;value&nbsp;greater&nbsp;than&nbsp;0.</td><td class="diff_next"></td><td class="diff_header" id="to193_69">69</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;scale&nbsp;array&nbsp;along&nbsp;each&nbsp;dimension.&nbsp;It&nbsp;takes&nbsp;value&nbsp;greater&nbsp;than&nbsp;0.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_16">16</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;it's&nbsp;less&nbsp;than&nbsp;1,&nbsp;it's&nbsp;sampling&nbsp;down,&nbsp;otherwise,&nbsp;it's&nbsp;upsampling.</td><td class="diff_next"></td><td class="diff_header" id="to193_70">70</td><td nowrap="nowrap">&nbsp;&nbsp;If&nbsp;it's&nbsp;less&nbsp;than&nbsp;1,&nbsp;it's&nbsp;sampling&nbsp;down,&nbsp;otherwise,&nbsp;it's&nbsp;upsampling.</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_17">17</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'scales'&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of</td><td class="diff_next"></td><td class="diff_header" id="to193_71">71</td><td nowrap="nowrap">&nbsp;&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'scales'&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__8">n</a></td><td class="diff_header" id="from193_18">18</td><td nowrap="nowrap"><span class="diff_sub">&nbsp;&nbsp;input&nbsp;'X'.</span></td><td class="diff_next"><a href="#difflib_chg_to193__8">n</a></td><td class="diff_header" id="to193_72">72</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;input&nbsp;'X'.&nbsp;If&nbsp;'size'&nbsp;is&nbsp;needed,&nbsp;the&nbsp;user&nbsp;must&nbsp;set&nbsp;'scales'&nbsp;to&nbsp;an</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_73">73</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;empty&nbsp;tensor.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_74">74</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**sizes**&nbsp;(optional,&nbsp;heterogeneous)&nbsp;-&nbsp;**tensor(int64)**:</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_75">75</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;The&nbsp;size&nbsp;of&nbsp;the&nbsp;output&nbsp;tensor.&nbsp;The&nbsp;number&nbsp;of&nbsp;elements&nbsp;of&nbsp;'sizes'</span></td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__8"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_76">76</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;should&nbsp;be&nbsp;the&nbsp;same&nbsp;as&nbsp;the&nbsp;rank&nbsp;of&nbsp;input&nbsp;'X'.&nbsp;May&nbsp;only&nbsp;be&nbsp;set&nbsp;if</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_77">77</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;'scales'&nbsp;is&nbsp;set&nbsp;to&nbsp;an&nbsp;empty&nbsp;tensor.</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_19">19</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_78">78</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_20">20</td><td nowrap="nowrap">**Outputs**</td><td class="diff_next"></td><td class="diff_header" id="to193_79">79</td><td nowrap="nowrap">**Outputs**</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__9"></td><td class="diff_header" id="from193_21">21</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_80">80</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__9">n</a></td><td class="diff_header" id="from193_22">22</td><td nowrap="nowrap">*&nbsp;**Y**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T**:</td><td class="diff_next"><a href="#difflib_chg_to193__9">n</a></td><td class="diff_header" id="to193_81">81</td><td nowrap="nowrap">*&nbsp;**Y**&nbsp;(heterogeneous)&nbsp;-&nbsp;**T<span class="diff_add">1</span>**:</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_23">23</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor&nbsp;after&nbsp;resizing</td><td class="diff_next"></td><td class="diff_header" id="to193_82">82</td><td nowrap="nowrap">&nbsp;&nbsp;N-D&nbsp;tensor&nbsp;after&nbsp;resizing</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_24">24</td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_83">83</td><td nowrap="nowrap"></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_25">25</td><td nowrap="nowrap">**Type&nbsp;Constraints**</td><td class="diff_next"></td><td class="diff_header" id="to193_84">84</td><td nowrap="nowrap">**Type&nbsp;Constraints**</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__10">n</a></td><td class="diff_header" id="from193_26">26</td><td nowrap="nowrap">*&nbsp;**T**&nbsp;in&nbsp;(</td><td class="diff_next"><a href="#difflib_chg_to193__10">n</a></td><td class="diff_header" id="to193_85">85</td><td nowrap="nowrap">*&nbsp;**T<span class="diff_add">1</span>**&nbsp;in&nbsp;(</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_27">27</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bool),</td><td class="diff_next"></td><td class="diff_header" id="to193_86">86</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(bool),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_28">28</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex128),</td><td class="diff_next"></td><td class="diff_header" id="to193_87">87</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex128),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_29">29</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex64),</td><td class="diff_next"></td><td class="diff_header" id="to193_88">88</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(complex64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_30">30</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td><td class="diff_next"></td><td class="diff_header" id="to193_89">89</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(double),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_31">31</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td><td class="diff_next"></td><td class="diff_header" id="to193_90">90</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_32">32</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16),</td><td class="diff_next"></td><td class="diff_header" id="to193_91">91</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(float16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_33">33</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int16),</td><td class="diff_next"></td><td class="diff_header" id="to193_92">92</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int16),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_34">34</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int32),</td><td class="diff_next"></td><td class="diff_header" id="to193_93">93</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int32),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_35">35</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int64),</td><td class="diff_next"></td><td class="diff_header" id="to193_94">94</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_36">36</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int8),</td><td class="diff_next"></td><td class="diff_header" id="to193_95">95</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(int8),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_37">37</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(string),</td><td class="diff_next"></td><td class="diff_header" id="to193_96">96</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(string),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_38">38</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint16),</td><td class="diff_next"></td><td class="diff_header" id="to193_97">97</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint16),</td></tr>
                <tr><td class="diff_next" id="difflib_chg_to193__10"></td><td class="diff_header" id="from193_39">39</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint32),</td><td class="diff_next"></td><td class="diff_header" id="to193_98">98</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint32),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_40">40</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint64),</td><td class="diff_next"></td><td class="diff_header" id="to193_99">99</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint64),</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_41">41</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint8)</td><td class="diff_next"></td><td class="diff_header" id="to193_100">100</td><td nowrap="nowrap">&nbsp;&nbsp;tensor(uint8)</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_42">42</td><td nowrap="nowrap">&nbsp;&nbsp;):</td><td class="diff_next"></td><td class="diff_header" id="to193_101">101</td><td nowrap="nowrap">&nbsp;&nbsp;):</td></tr>
                <tr><td class="diff_next"></td><td class="diff_header" id="from193_43">43</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;input&nbsp;'X'&nbsp;and&nbsp;output&nbsp;'Y'&nbsp;to&nbsp;all&nbsp;tensor&nbsp;types.</td><td class="diff_next"></td><td class="diff_header" id="to193_102">102</td><td nowrap="nowrap">&nbsp;&nbsp;Constrain&nbsp;input&nbsp;'X'&nbsp;and&nbsp;output&nbsp;'Y'&nbsp;to&nbsp;all&nbsp;tensor&nbsp;types.</td></tr>
                <tr><td class="diff_next"><a href="#difflib_chg_to193__top">t</a></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"><a href="#difflib_chg_to193__top">t</a></td><td class="diff_header" id="to193_103">103</td><td nowrap="nowrap"><span class="diff_add">*&nbsp;**T2**&nbsp;in&nbsp;(</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_104">104</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;tensor(double),</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_105">105</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;tensor(float),</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_106">106</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;tensor(float16)</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_107">107</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;):</span></td></tr>
                <tr><td class="diff_next"></td><td class="diff_header"></td><td nowrap="nowrap"></td><td class="diff_next"></td><td class="diff_header" id="to193_108">108</td><td nowrap="nowrap"><span class="diff_add">&nbsp;&nbsp;Constrain&nbsp;roi&nbsp;type&nbsp;to&nbsp;float&nbsp;or&nbsp;double.</span></td></tr>
            </tbody>
        </table>

.. _l-onnx-op-resize-10:
Resize - 10
===========
**Version**
* **name**: `Resize (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Resize>`_
* **domain**: **main**
* **since_version**: **10**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 10**.

**Summary**

Resize the input tensor.
Each dimension value of the output tensor is:
  output_dimension = floor(input_dimension * scale).

**Attributes**
* **mode**:
  Two interpolation modes: nearest (default), and linear (including
  bilinear, trilinear, etc)

**Inputs**

* **X** (heterogeneous) - **T**:
  N-D tensor
* **scales** (heterogeneous) - **tensor(float)**:
  The scale array along each dimension. It takes value greater than 0.
  If it's less than 1, it's sampling down, otherwise, it's upsampling.
  The number of elements of 'scales' should be the same as the rank of
  input 'X'.

**Outputs**

* **Y** (heterogeneous) - **T**:
  N-D tensor after resizing

**Type Constraints**
* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input 'X' and output 'Y' to all tensor types.
