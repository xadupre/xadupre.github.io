
.. _l-onnx-op-gemm-d6-7:

Gemm - 6 vs 7
=============

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_Gemm_5"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/Gemm6
    +++ b/Gemm7
    @@ -1 +1 @@
      General Matrix multiplication:
      https://en.wikipedia.org/wiki/Basic_Linear_Algebra_Subprograms#Level_3
    - 
    - A' = transpose(A) if transA else A
    - 
    - B' = transpose(B) if transB else B
    - 
    - Compute Y = alpha * A' * B' + beta * C, where input tensor A has shape (M, K) or (K, M),
    ?                      -    -                                     ------------------------
    + Compute Y = alpha * A * B + beta * C, where input tensor A has
    - input tensor B has shape (K, N) or (N, K), input tensor C is broadcastable to shape (M, N),
    - and output tensor Y has shape (M, N). A will be transposed before doing the
    + dimension (M X K), input tensor B has dimension (K X N), input tensor C and
    + output tensor Y have dimension (M X N).
    + If attribute broadcast is non-zero, input tensor C will be broadcasted to match
    + the dimension requirement. A will be transposed before doing the computation
    - computation if attribute transA is non-zero, same for B and transB.
    ? ------------
    + if attribute transA is non-zero, same for B and transB.
    - This operator supports **unidirectional broadcasting** (tensor C should be unidirectional broadcastable to tensor A * B); for more details please check Broadcasting in ONNX <https://github.com/onnx/onnx/blob/master/docs/Broadcasting.md>_.
  
      **Attributes**
  
      * **alpha**:
    -   Scalar multiplier for the product of input tensors A * B.
    ?                                                           ^
    +   Scalar multiplier for the product of input tensors A * B, the
    ?                                                           ^^^^^
    +   default value is 1.0.
      * **beta**:
    -   Scalar multiplier for input tensor C.
    +   Scalar multiplier for input tensor C, the default value is 1.0.
    ?                                       ++++++++++++++++++++++++++
    + * **broadcast**:
    +   Whether C should be broadcasted
      * **transA**:
        Whether A should be transposed
      * **transB**:
        Whether B should be transposed
  
      **Inputs**
  
      * **A** (heterogeneous) - **T**:
    +   Input tensor A
    -   Input tensor A. The shape of A should be (M, K) if transA is 0, or
    -   (K, M) if transA is non-zero.
      * **B** (heterogeneous) - **T**:
    +   Input tensor B
    -   Input tensor B. The shape of B should be (K, N) if transB is 0, or
    -   (N, K) if transB is non-zero.
      * **C** (heterogeneous) - **T**:
    +   Input tensor C
    -   Input tensor C. The shape of C should be unidirectional
    -   broadcastable to (M, N).
  
      **Outputs**
  
      * **Y** (heterogeneous) - **T**:
    -   Output tensor of shape (M, N).
    +   Output tensor.
  
      **Type Constraints**
  
      * **T** in (
        tensor(double),
        tensor(float),
        tensor(float16)
        ):
        Constrain input and output types to float tensors.
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_Gemm_5');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>