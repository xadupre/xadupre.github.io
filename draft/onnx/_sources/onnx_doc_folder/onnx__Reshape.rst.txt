
.. _l-onnx-doc-Reshape:

=======
Reshape
=======

.. contents::
    :local:


.. _l-onnx-op-reshape-14:

Reshape - 14
============

**Version**

* **name**: `Reshape (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape>`_
* **domain**: **main**
* **since_version**: **14**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 14**.

**Summary**

Reshape the input tensor similar to numpy.reshape.
First input is the data tensor, second input is a shape tensor which specifies the output shape. It outputs the reshaped tensor.
At most one dimension of the new shape can be -1. In this case, the value is
inferred from the size of the tensor and the remaining dimensions. A dimension
could also be 0, in which case the actual dimension value is unchanged (i.e. taken
from the input tensor). If &#39;allowzero&#39; is set, and the new shape includes 0, the
dimension will be set explicitly to zero (i.e. not taken from input tensor).
Shape (second input) could be an empty shape, which means converting to a scalar.
The input tensor&#39;s shape and the output tensor&#39;s shape are required to have the same number of elements.

**Attributes**

* **allowzero**:
  (Optional) By default, when any value in the &#39;shape&#39; input is equal
  to zero the corresponding dimension value is copied from the input
  tensor dynamically. allowzero=1 indicates that if any value in the
  &#39;shape&#39; input is set to zero, the zero value is honored, similar to
  NumPy.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.
* **shape** (heterogeneous) - **tensor(int64)**:
  Specified shape for output.

**Outputs**

* **reshaped** (heterogeneous) - **T**:
  Reshaped data.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

**Examples**

**_reshape**

::

    import numpy as np
    import onnx

    original_shape = [2, 3, 4]
    test_cases = {
        &#34;reordered_all_dims&#34;: np.array([4, 2, 3], dtype=np.int64),
        &#34;reordered_last_dims&#34;: np.array([2, 4, 3], dtype=np.int64),
        &#34;reduced_dims&#34;: np.array([2, 12], dtype=np.int64),
        &#34;extended_dims&#34;: np.array([2, 3, 2, 2], dtype=np.int64),
        &#34;one_dim&#34;: np.array([24], dtype=np.int64),
        &#34;negative_dim&#34;: np.array([2, -1, 2], dtype=np.int64),
        &#34;negative_extended_dims&#34;: np.array([-1, 2, 3, 4], dtype=np.int64),
        &#34;zero_dim&#34;: np.array([2, 0, 4, 1], dtype=np.int64),
        &#34;zero_and_negative_dim&#34;: np.array([2, 0, 1, -1], dtype=np.int64),
    }
    data = np.random.random_sample(original_shape).astype(np.float32)

    for test_name, shape in test_cases.items():
        node = onnx.helper.make_node(
            &#34;Reshape&#34;,
            inputs=[&#34;data&#34;, &#34;shape&#34;],
            outputs=[&#34;reshaped&#34;],
        )

        reshaped = reshape_reference_implementation(data, shape)

        expect(
            node,
            inputs=[data, shape],
            outputs=[reshaped],
            name=&#34;test_reshape_&#34; + test_name,
        )

**_allowzero**

::

    import numpy as np
    import onnx

    original_shape = [0, 3, 4]
    test_cases = {
        &#34;allowzero_reordered&#34;: np.array([3, 4, 0], dtype=np.int64),
    }
    data = np.random.random_sample(original_shape).astype(np.float32)

    for test_name, shape in test_cases.items():
        node = onnx.helper.make_node(
            &#34;Reshape&#34;,
            inputs=[&#34;data&#34;, &#34;shape&#34;],
            outputs=[&#34;reshaped&#34;],
            allowzero=1,  # if allowzero=1, final shape = (3, 4, 0)
            # if allowzero=0, final shape = (3, 4, 4)
        )

        reshaped = reshape_reference_implementation(data, shape, allowzero=1)

        expect(
            node,
            inputs=[data, shape],
            outputs=[reshaped],
            name=&#34;test_reshape_&#34; + test_name,
        )

.. toctree::

    text_diff_Reshape_13_14

.. _l-onnx-op-reshape-13:

Reshape - 13
============

**Version**

* **name**: `Reshape (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Reshape the input tensor similar to numpy.reshape.
First input is the data tensor, second input is a shape tensor which specifies the output shape. It outputs the reshaped tensor.
At most one dimension of the new shape can be -1. In this case, the value is
inferred from the size of the tensor and the remaining dimensions. A dimension
could also be 0, in which case the actual dimension value is unchanged (i.e. taken
from the input tensor). Shape (second input) could be an empty shape, which means converting to a scalar.
The input tensor&#39;s shape and the output tensor&#39;s shape are required to have the same number of elements.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.
* **shape** (heterogeneous) - **tensor(int64)**:
  Specified shape for output.

**Outputs**

* **reshaped** (heterogeneous) - **T**:
  Reshaped data.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

.. toctree::

    text_diff_Reshape_5_13

.. _l-onnx-op-reshape-5:

Reshape - 5
===========

**Version**

* **name**: `Reshape (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape>`_
* **domain**: **main**
* **since_version**: **5**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 5**.

**Summary**

Reshape the input tensor similar to numpy.reshape.
First input is the data tensor, second input is a shape tensor which specifies the output shape. It outputs the reshaped tensor.
At most one dimension of the new shape can be -1. In this case, the value is
inferred from the size of the tensor and the remaining dimensions. A dimension
could also be 0, in which case the actual dimension value is unchanged (i.e. taken
from the input tensor). Shape (second input) could be an empty shape, which means converting to a scalar.
The input tensor&#39;s shape and the output tensor&#39;s shape are required to have the same number of elements.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.
* **shape** (heterogeneous) - **tensor(int64)**:
  Specified shape for output.

**Outputs**

* **reshaped** (heterogeneous) - **T**:
  Reshaped data.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

.. toctree::

    text_diff_Reshape_1_5

.. _l-onnx-op-reshape-1:

Reshape - 1
===========

**Version**

* **name**: `Reshape (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Reshape>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: False

This version of the operator has been available
**since version 1**.

**Summary**

Reshape the input tensor similar to numpy.reshape.
It takes a tensor as input and an argument `shape`. It outputs the reshaped tensor.
At most one dimension of the new shape can be -1. In this case, the value is
inferred from the size of the tensor and the remaining dimensions. A dimension
could also be 0, in which case the actual dimension value is unchanged (i.e. taken
from the input tensor). Shape (second input) could be an empty shape, which means converting to a scalar.
The input tensor&#39;s shape and the output tensor&#39;s shape are required to have the same number of elements.

**Attributes**

* **consumed_inputs**:
  legacy optimization attribute.
* **shape**:
  New shape

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **reshaped** (heterogeneous) - **T**:
  Reshaped data.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
