OneHot - 9 vs 11
================

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_OneHot_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/OneHot9
    +++ b/OneHot11
    @@ -1 +1 @@
      Produces a one-hot tensor based on inputs.
      The locations represented by the index values in the &amp;#39;indices&amp;#39; input tensor will have &amp;#39;on_value&amp;#39;
      and the other locations will have &amp;#39;off_value&amp;#39; in the output tensor, where &amp;#39;on_value&amp;#39; and &amp;#39;off_value&amp;#39;
      are specified as part of required input argument &amp;#39;values&amp;#39;, which is a two-element tensor of format
      [off_value, on_value]. The rank of the output tensor will be one greater than the rank of the
      input tensor. The additional dimension is for one-hot representation. The additional dimension will
      be inserted at the position specified by &amp;#39;axis&amp;#39;. If &amp;#39;axis&amp;#39; is not specified then then additional
      dimension will be inserted as the innermost dimension, i.e. axis=-1. The size of the additional
      dimension is specified by required scalar input &amp;#39;depth&amp;#39;. The type of the output tensor is the same
      as the type of the &amp;#39;values&amp;#39; input. Any entries in the &amp;#39;indices&amp;#39; input tensor with values outside
    - the range [0, depth) will result in one-hot representation with all &amp;#39;off_value&amp;#39; values in the
    ?            ^       ^
    + the range [-depth, depth-1] will result in one-hot representation with all &amp;#39;off_value&amp;#39; values in the
    ?            ^^^^^^       ^^^
      output tensor.
    + 
    + when axis = 0:
    + output[input[i, j, k], i, j, k] = 1 for all i, j, k and 0 otherwise.
    + 
    + when axis = -1:
    + output[i, j, k, input[i, j, k]] = 1 for all i, j, k and 0 otherwise.
  
      **Attributes**
  
      * **axis**:
        (Optional) Axis along which one-hot representation in added.
        Default: axis=-1. axis=-1 means that the additional dimension will
        be inserted as the innermost/last dimension in the output tensor.
    +   Negative value means counting dimensions from the back. Accepted
    +   range is [-r-1, r] where r = rank(indices).
  
      **Inputs**
  
      * **indices** (heterogeneous) - **T1**:
    +   Input tensor containing indices. Any entries in the &amp;#39;indices&amp;#39; input
    +   tensor with values outside the range [-depth, depth-1] will result
    +   in one-hot representation with all &amp;#39;off_value&amp;#39; values in the output
    +   tensor.In case &amp;#39;indices&amp;#39; is of non-integer type, the values will be
    +   casted to int64 before use.
    -   Input tensor containing indices. The values must be non-negative
    -   integers. Any entries in the &amp;#39;indices&amp;#39; input tensor with values
    -   outside the range [0, depth) will result in one-hot representation
    -   with all &amp;#39;off_value&amp;#39; values in the output tensor.In case &amp;#39;indices&amp;#39;
    -   is of non-integer type, the values will be casted to int64 before
    -   use.
      * **depth** (heterogeneous) - **T2**:
        Scalar specifying the number of classes in one-hot tensor. This is
        also the size of the one-hot dimension (specified by &amp;#39;axis&amp;#39;
        attribute) added on in the output tensor. The values in the
    -   &amp;#39;indices&amp;#39; input tensor are expected to be in the range [0, depth).
    ?                                                                   ^^^     ^^
    +   &amp;#39;indices&amp;#39; input tensor are expected to be in the range [-depth,
    ?                                                                   ^     ^
    -   In case &amp;#39;depth&amp;#39; is of non-integer type, it will be casted to int64
    ?                                                                    ---------
    +   depth-1]. In case &amp;#39;depth&amp;#39; is of non-integer type, it will be casted
    ?  ++++++++++
    -   before use.
    +   to int64 before use.
    ?  +++++++++
      * **values** (heterogeneous) - **T3**:
        Rank 1 tensor containing exactly two elements, in the format
        [off_value, on_value], where &amp;#39;on_value&amp;#39; is the value used for
        filling locations specified in &amp;#39;indices&amp;#39; input tensor, and
        &amp;#39;off_value&amp;#39; is the value used for filling locations other than those
        specified in &amp;#39;indices&amp;#39; input tensor.
  
      **Outputs**
  
      * **output** (heterogeneous) - **T3**:
        Tensor of rank one greater than input tensor &amp;#39;indices&amp;#39;, i.e.
        rank(output) = rank(indices) + 1. The data type for the elements of
        the output tensor is the same as the type of input &amp;#39;values&amp;#39; is used.
  
      **Type Constraints**
  
      * **T1** in (
        tensor(double),
        tensor(float),
        tensor(float16),
        tensor(int16),
        tensor(int32),
        tensor(int64),
        tensor(int8),
        tensor(uint16),
        tensor(uint32),
        tensor(uint64),
        tensor(uint8)
        ):
        Constrain input to only numeric types.
      * **T2** in (
        tensor(double),
        tensor(float),
        tensor(float16),
        tensor(int16),
        tensor(int32),
        tensor(int64),
        tensor(int8),
        tensor(uint16),
        tensor(uint32),
        tensor(uint64),
        tensor(uint8)
        ):
        Constrain input to only numeric types.
      * **T3** in (
        tensor(bool),
        tensor(complex128),
        tensor(complex64),
        tensor(double),
        tensor(float),
        tensor(float16),
        tensor(int16),
        tensor(int32),
        tensor(int64),
        tensor(int8),
        tensor(string),
        tensor(uint16),
        tensor(uint32),
        tensor(uint64),
        tensor(uint8)
        ):
        Constrain to any tensor type.
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_OneHot_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>