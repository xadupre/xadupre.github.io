
.. _l-onnx-doc-RNN:

===
RNN
===

.. contents::
    :local:


.. _l-onnx-op-rnn-14:

RNN - 14
========

**Version**

* **name**: `RNN (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#RNN>`_
* **domain**: **main**
* **since_version**: **14**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 14**.

**Summary**

Computes an one-layer simple RNN. This operator is usually supported
via some custom implementation such as CuDNN.

Notations:

`X` - input tensor

`i` - input gate

`t` - time step (t-1 means previous time step)

`Wi` - W parameter weight matrix for input gate

`Ri` - R recurrence weight matrix for input gate

`Wbi` - W parameter bias vector for input gate

`Rbi` - R parameter bias vector for input gate

`WBi` - W parameter weight matrix for backward input gate

`RBi` - R recurrence weight matrix for backward input gate

`WBbi` - WR bias vectors for backward input gate

`RBbi` - RR bias vectors for backward input gate

`H` - Hidden state

`num_directions` - 2 if direction == bidirectional else 1

Activation functions:

  Relu(x)                - max(0, x)

  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})

  Sigmoid(x)             - 1/(1 + e^{-x})

  (NOTE: Below are optional)

  Affine(x)              - alpha*x + beta

  LeakyRelu(x)           - x if x >= 0 else alpha * x

  ThresholdedRelu(x)     - x if x >= alpha else 0

  ScaledTanh(x)          - alpha*Tanh(beta*x)

  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)

  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)

  Softsign(x)            - x/(1 + |x|)

  Softplus(x)            - log(1 + e^x)

Equations (Default: f=Tanh):

  - Ht = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Wbi + Rbi)
This operator has **optional** inputs/outputs. See `ONNX <https://github.com/onnx/onnx/blob/master/docs/IR.md>`_ for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.

**Attributes**

* **activation_alpha**:
  Optional scaling values used by some activation functions. The
  values are consumed in the order of activation functions, for
  example (f, g, h) in LSTM. Default values are the same as of
  corresponding ONNX operators.For example with LeakyRelu, the default
  alpha is 0.01.
* **activation_beta**:
  Optional scaling values used by some activation functions. The
  values are consumed in the order of activation functions, for
  example (f, g, h) in LSTM. Default values are the same as of
  corresponding ONNX operators.
* **activations**:
  One (or two if bidirectional) activation function for input gate.
  The activation function must be one of the activation functions
  specified above. Optional: Default `Tanh` if not specified.
* **clip**:
  Cell clip threshold. Clipping bounds the elements of a tensor in the
  range of [-threshold, +threshold] and is applied to the input of
  activations. No clip if not specified.
* **direction**:
  Specify if the RNN is forward, reverse, or bidirectional. Must be
  one of forward (default), reverse, or bidirectional.
* **hidden_size**:
  Number of neurons in the hidden layer
* **layout**:
  The shape format of inputs X, initial_h and outputs Y, Y_h. If 0,
  the following shapes are expected: X.shape = [seq_length,
  batch_size, input_size], Y.shape = [seq_length, num_directions,
  batch_size, hidden_size], initial_h.shape = Y_h.shape =
  [num_directions, batch_size, hidden_size]. If 1, the following
  shapes are expected: X.shape = [batch_size, seq_length, input_size],
  Y.shape = [batch_size, seq_length, num_directions, hidden_size],
  initial_h.shape = Y_h.shape = [batch_size, num_directions,
  hidden_size].

**Inputs**

Between 3 and 6 inputs.

* **X** (heterogeneous) - **T**:
  The input sequences packed (and potentially padded) into one 3-D
  tensor with the shape of `[seq_length, batch_size, input_size]`.
* **W** (heterogeneous) - **T**:
  The weight tensor for input gate. Concatenation of `Wi` and `WBi`
  (if bidirectional). The tensor has shape `[num_directions,
  hidden_size, input_size]`.
* **R** (heterogeneous) - **T**:
  The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if
  bidirectional). The tensor has shape `[num_directions, hidden_size,
  hidden_size]`.
* **B** (optional, heterogeneous) - **T**:
  The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and
  `[WBbi, RBbi]` (if bidirectional). The tensor has shape
  `[num_directions, 2*hidden_size]`. Optional: If not specified -
  assumed to be 0.
* **sequence_lens** (optional, heterogeneous) - **T1**:
  Optional tensor specifying lengths of the sequences in a batch. If
  not specified - assumed all sequences in the batch to have length
  `seq_length`. It has shape `[batch_size]`.
* **initial_h** (optional, heterogeneous) - **T**:
  Optional initial value of the hidden. If not specified - assumed to
  be 0. It has shape `[num_directions, batch_size, hidden_size]`.

**Outputs**

Between 0 and 2 outputs.

* **Y** (optional, heterogeneous) - **T**:
  A tensor that concats all the intermediate output values of the
  hidden. It has shape `[seq_length, num_directions, batch_size,
  hidden_size]`.
* **Y_h** (optional, heterogeneous) - **T**:
  The last output value of the hidden. It has shape `[num_directions,
  batch_size, hidden_size]`.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
* **T1** in (
  tensor(int32)
  ):
  Constrain seq_lens to integer tensor.

**Examples**

**_defaults**

::

    import numpy as np
    import onnx

    input = np.array([[[1.0, 2.0], [3.0, 4.0], [5.0, 6.0]]]).astype(np.float32)

    input_size = 2
    hidden_size = 4
    weight_scale = 0.1

    node = onnx.helper.make_node(
        "RNN", inputs=["X", "W", "R"], outputs=["", "Y_h"], hidden_size=hidden_size
    )

    W = weight_scale * np.ones((1, hidden_size, input_size)).astype(np.float32)
    R = weight_scale * np.ones((1, hidden_size, hidden_size)).astype(np.float32)

    rnn = RNN_Helper(X=input, W=W, R=R)
    _, Y_h = rnn.step()
    expect(
        node,
        inputs=[input, W, R],
        outputs=[Y_h.astype(np.float32)],
        name="test_simple_rnn_defaults",
    )

**_initial_bias**

::

    import numpy as np
    import onnx

    input = np.array([[[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]]]).astype(
        np.float32
    )

    input_size = 3
    hidden_size = 5
    custom_bias = 0.1
    weight_scale = 0.1

    node = onnx.helper.make_node(
        "RNN",
        inputs=["X", "W", "R", "B"],
        outputs=["", "Y_h"],
        hidden_size=hidden_size,
    )

    W = weight_scale * np.ones((1, hidden_size, input_size)).astype(np.float32)
    R = weight_scale * np.ones((1, hidden_size, hidden_size)).astype(np.float32)

    # Adding custom bias
    W_B = custom_bias * np.ones((1, hidden_size)).astype(np.float32)
    R_B = np.zeros((1, hidden_size)).astype(np.float32)
    B = np.concatenate((W_B, R_B), axis=1)

    rnn = RNN_Helper(X=input, W=W, R=R, B=B)
    _, Y_h = rnn.step()
    expect(
        node,
        inputs=[input, W, R, B],
        outputs=[Y_h.astype(np.float32)],
        name="test_simple_rnn_with_initial_bias",
    )

**_seq_length**

::

    import numpy as np
    import onnx

    input = np.array(
        [
            [[1.0, 2.0, 3.0], [4.0, 5.0, 6.0], [7.0, 8.0, 9.0]],
            [[10.0, 11.0, 12.0], [13.0, 14.0, 15.0], [16.0, 17.0, 18.0]],
        ]
    ).astype(np.float32)

    input_size = 3
    hidden_size = 5

    node = onnx.helper.make_node(
        "RNN",
        inputs=["X", "W", "R", "B"],
        outputs=["", "Y_h"],
        hidden_size=hidden_size,
    )

    W = np.random.randn(1, hidden_size, input_size).astype(np.float32)
    R = np.random.randn(1, hidden_size, hidden_size).astype(np.float32)

    # Adding custom bias
    W_B = np.random.randn(1, hidden_size).astype(np.float32)
    R_B = np.random.randn(1, hidden_size).astype(np.float32)
    B = np.concatenate((W_B, R_B), axis=1)

    rnn = RNN_Helper(X=input, W=W, R=R, B=B)
    _, Y_h = rnn.step()
    expect(
        node,
        inputs=[input, W, R, B],
        outputs=[Y_h.astype(np.float32)],
        name="test_rnn_seq_length",
    )

**_batchwise**

::

    import numpy as np
    import onnx

    input = np.array([[[1.0, 2.0]], [[3.0, 4.0]], [[5.0, 6.0]]]).astype(np.float32)

    input_size = 2
    hidden_size = 4
    weight_scale = 0.5
    layout = 1

    node = onnx.helper.make_node(
        "RNN",
        inputs=["X", "W", "R"],
        outputs=["Y", "Y_h"],
        hidden_size=hidden_size,
        layout=layout,
    )

    W = weight_scale * np.ones((1, hidden_size, input_size)).astype(np.float32)
    R = weight_scale * np.ones((1, hidden_size, hidden_size)).astype(np.float32)

    rnn = RNN_Helper(X=input, W=W, R=R, layout=layout)
    Y, Y_h = rnn.step()
    expect(
        node,
        inputs=[input, W, R],
        outputs=[Y.astype(np.float32), Y_h.astype(np.float32)],
        name="test_simple_rnn_batchwise",
    )

.. toctree::

    text_diff_RNN_7_14

.. _l-onnx-op-rnn-7:

RNN - 7
=======

**Version**

* **name**: `RNN (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#RNN>`_
* **domain**: **main**
* **since_version**: **7**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 7**.

**Summary**

Computes an one-layer simple RNN. This operator is usually supported
via some custom implementation such as CuDNN.

Notations:

`X` - input tensor

`i` - input gate

`t` - time step (t-1 means previous time step)

`Wi` - W parameter weight matrix for input gate

`Ri` - R recurrence weight matrix for input gate

`Wbi` - W parameter bias vector for input gate

`Rbi` - R parameter bias vector for input gate

`WBi` - W parameter weight matrix for backward input gate

`RBi` - R recurrence weight matrix for backward input gate

`WBbi` - WR bias vectors for backward input gate

`RBbi` - RR bias vectors for backward input gate

`H` - Hidden state

`num_directions` - 2 if direction == bidirectional else 1

Activation functions:

  Relu(x)                - max(0, x)

  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})

  Sigmoid(x)             - 1/(1 + e^{-x})

  (NOTE: Below are optional)

  Affine(x)              - alpha*x + beta

  LeakyRelu(x)           - x if x >= 0 else alpha * x

  ThresholdedRelu(x)     - x if x >= alpha else 0

  ScaledTanh(x)          - alpha*Tanh(beta*x)

  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)

  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)

  Softsign(x)            - x/(1 + |x|)

  Softplus(x)            - log(1 + e^x)

Equations (Default: f=Tanh):

  - Ht = f(Xt*(Wi^T) + Ht-1*(Ri^T) + Wbi + Rbi)
This operator has **optional** inputs/outputs. See `ONNX <https://github.com/onnx/onnx/blob/master/docs/IR.md>`_ for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.

**Attributes**

* **activation_alpha**:
  Optional scaling values used by some activation functions. The
  values are consumed in the order of activation functions, for
  example (f, g, h) in LSTM. Default values are the same as of
  corresponding ONNX operators.For example with LeakyRelu, the default
  alpha is 0.01.
* **activation_beta**:
  Optional scaling values used by some activation functions. The
  values are consumed in the order of activation functions, for
  example (f, g, h) in LSTM. Default values are the same as of
  corresponding ONNX operators.
* **activations**:
  One (or two if bidirectional) activation function for input gate.
  The activation function must be one of the activation functions
  specified above. Optional: Default `Tanh` if not specified.
* **clip**:
  Cell clip threshold. Clipping bounds the elements of a tensor in the
  range of [-threshold, +threshold] and is applied to the input of
  activations. No clip if not specified.
* **direction**:
  Specify if the RNN is forward, reverse, or bidirectional. Must be
  one of forward (default), reverse, or bidirectional.
* **hidden_size**:
  Number of neurons in the hidden layer

**Inputs**

Between 3 and 6 inputs.

* **X** (heterogeneous) - **T**:
  The input sequences packed (and potentially padded) into one 3-D
  tensor with the shape of `[seq_length, batch_size, input_size]`.
* **W** (heterogeneous) - **T**:
  The weight tensor for input gate. Concatenation of `Wi` and `WBi`
  (if bidirectional). The tensor has shape `[num_directions,
  hidden_size, input_size]`.
* **R** (heterogeneous) - **T**:
  The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if
  bidirectional). The tensor has shape `[num_directions, hidden_size,
  hidden_size]`.
* **B** (optional, heterogeneous) - **T**:
  The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and
  `[WBbi, RBbi]` (if bidirectional). The tensor has shape
  `[num_directions, 2*hidden_size]`. Optional: If not specified -
  assumed to be 0.
* **sequence_lens** (optional, heterogeneous) - **T1**:
  Optional tensor specifying lengths of the sequences in a batch. If
  not specified - assumed all sequences in the batch to have length
  `seq_length`. It has shape `[batch_size]`.
* **initial_h** (optional, heterogeneous) - **T**:
  Optional initial value of the hidden. If not specified - assumed to
  be 0. It has shape `[num_directions, batch_size, hidden_size]`.

**Outputs**

Between 0 and 2 outputs.

* **Y** (optional, heterogeneous) - **T**:
  A tensor that concats all the intermediate output values of the
  hidden. It has shape `[seq_length, num_directions, batch_size,
  hidden_size]`.
* **Y_h** (optional, heterogeneous) - **T**:
  The last output value of the hidden. It has shape `[num_directions,
  batch_size, hidden_size]`.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
* **T1** in (
  tensor(int32)
  ):
  Constrain seq_lens to integer tensor.

.. toctree::

    text_diff_RNN_1_7

.. _l-onnx-op-rnn-1:

RNN - 1
=======

**Version**

* **name**: `RNN (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#RNN>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Computes an one-layer simple RNN. This operator is usually supported
via some custom implementation such as CuDNN.

Notations:

`X` - input tensor

`i` - input gate

`t` - time step (t-1 means previous time step)

`Wi` - W parameter weight matrix for input gate

`Ri` - R recurrence weight matrix for input gate

`Wbi` - W parameter bias vector for input gate

`Rbi` - R parameter bias vector for input gate

`WBi` - W parameter weight matrix for backward input gate

`RBi` - R recurrence weight matrix for backward input gate

`WBbi` - WR bias vectors for backward input gate

`RBbi` - RR bias vectors for backward input gate

`H` - Hidden state

`num_directions` - 2 if direction == bidirectional else 1

Activation functions:

  Relu(x)                - max(0, x)

  Tanh(x)                - (1 - e^{-2x})/(1 + e^{-2x})

  Sigmoid(x)             - 1/(1 + e^{-x})

  (NOTE: Below are optional)

  Affine(x)              - alpha*x + beta

  LeakyRelu(x)           - x if x >= 0 else alpha * x

  ThresholdedRelu(x)     - x if x >= alpha else 0

  ScaledTanh(x)          - alpha*Tanh(beta*x)

  HardSigmoid(x)         - min(max(alpha*x + beta, 0), 1)

  Elu(x)                 - x if x >= 0 else alpha*(e^x - 1)

  Softsign(x)            - x/(1 + |x|)

  Softplus(x)            - log(1 + e^x)

Equations (Default: f=Tanh):

  - Ht = f(Xt*(Wi^T) + Ht-1*Ri + Wbi + Rbi)

**Attributes**

* **activation_alpha**:
  Optional scaling values used by some activation functions. The
  values are consumed in the order of activation functions, for
  example (f, g, h) in LSTM. Default values are the same as of
  corresponding ONNX operators.For example with LeakyRelu, the default
  alpha is 0.01.
* **activation_beta**:
  Optional scaling values used by some activation functions. The
  values are consumed in the order of activation functions, for
  example (f, g, h) in LSTM. Default values are the same as of
  corresponding ONNX operators.
* **activations**:
  One (or two if bidirectional) activation function for input gate.
  The activation function must be one of the activation functions
  specified above. Optional: Default `Tanh` if not specified.
* **clip**:
  Cell clip threshold. Clipping bounds the elements of a tensor in the
  range of [-threshold, +threshold] and is applied to the input of
  activations. No clip if not specified.
* **direction**:
  Specify if the RNN is forward, reverse, or bidirectional. Must be
  one of forward (default), reverse, or bidirectional.
* **hidden_size**:
  Number of neurons in the hidden layer
* **output_sequence**:
  The sequence output for the hidden is optional if 0. Default 0.

**Inputs**

Between 3 and 6 inputs.

* **X** (heterogeneous) - **T**:
  The input sequences packed (and potentially padded) into one 3-D
  tensor with the shape of `[seq_length, batch_size, input_size]`.
* **W** (heterogeneous) - **T**:
  The weight tensor for input gate. Concatenation of `Wi` and `WBi`
  (if bidirectional). The tensor has shape `[num_directions,
  hidden_size, input_size]`.
* **R** (heterogeneous) - **T**:
  The recurrence weight tensor. Concatenation of `Ri` and `RBi` (if
  bidirectional). The tensor has shape `[num_directions, hidden_size,
  hidden_size]`.
* **B** (optional, heterogeneous) - **T**:
  The bias tensor for input gate. Concatenation of `[Wbi, Rbi]` and
  `[WBbi, RBbi]` (if bidirectional). The tensor has shape
  `[num_directions, 2*hidden_size]`. Optional: If not specified -
  assumed to be 0.
* **sequence_lens** (optional, heterogeneous) - **T1**:
  Optional tensor specifying lengths of the sequences in a batch. If
  not specified - assumed all sequences in the batch to have length
  `seq_length`. It has shape `[batch_size]`.
* **initial_h** (optional, heterogeneous) - **T**:
  Optional initial value of the hidden. If not specified - assumed to
  be 0. It has shape `[num_directions, batch_size, hidden_size]`.

**Outputs**

Between 0 and 2 outputs.

* **Y** (optional, heterogeneous) - **T**:
  A tensor that concats all the intermediate output values of the
  hidden. It has shape `[seq_length, num_directions, batch_size,
  hidden_size]`. It is optional if `output_sequence` is 0.
* **Y_h** (optional, heterogeneous) - **T**:
  The last output value of the hidden. It has shape `[num_directions,
  batch_size, hidden_size]`.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
* **T1** in (
  tensor(int32)
  ):
  Constrain seq_lens to integer tensor.
