
.. _l-onnx-op-batchnormalization-d1-9:

BatchNormalization - 1 vs 9
===========================

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_BatchNormalization_6"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/BatchNormalization1
    +++ b/BatchNormalization9
    @@ -1 +1 @@
      Carries out batch normalization as described in the paper
      https://arxiv.org/abs/1502.03167. Depending on the mode it is being run,
      there are multiple cases for the number of outputs, which we list below:
  
      Output case #1: Y, mean, var, saved_mean, saved_var (training mode)
      Output case #2: Y (test mode)
  
    - For previous (depreciated) non-spatial cases, implementors are suggested
    - to flatten the input shape to (N x C*D1*D2 ..*Dn) before a BatchNormalization Op.
    - This operator has **optional** inputs/outputs. See ONNX <https://github.com/onnx/onnx/blob/master/docs/IR.md>_ for more details about the representation of optional arguments. An empty string may be used in the place of an actual argument's name to indicate a missing argument. Trailing optional arguments (those not followed by an argument that is present) may also be simply omitted.
    - 
      **Attributes**
  
    + * **consumed_inputs** (required):
    +   legacy optimization attribute.
      * **epsilon**:
    -   The epsilon value to use to avoid division by zero.
    ?                                                     ^
    +   The epsilon value to use to avoid division by zero, default is
    ?                                                     ^^^^^^^^^^^^
    +   1e-5f.
    + * **is_test**:
    +   If set to nonzero, run spatial batch normalization in test mode,
    +   default is 0.
      * **momentum**:
        Factor used in computing the running mean and variance.e.g.,
    -   running_mean = running_mean * momentum + mean * (1 - momentum).
    ?                                                                 ^
    +   running_mean = running_mean * momentum + mean * (1 - momentum),
    ?                                                                 ^
    +   default is 0.9f.
    + * **spatial**:
    +   If true, compute the mean and variance across all spatial elements
    +   If false, compute the mean and variance across per feature.Default
    +   is 1.
  
      **Inputs**
  
      * **X** (heterogeneous) - **T**:
    +   The input 4-dimensional tensor of shape NCHW.
    -   Input data tensor from the previous operator; dimensions are in the
    -   form of (N x C x D1 x D2 ... Dn), where N is the batch size, C is
    -   the number of channels. Statistics are computed for every channel of
    -   C over N and D1 to Dn dimensions. For image data, input dimensions
    -   become (N x C x H x W). The op also accepts single dimension input
    -   of size N in which case C is assumed to be 1
      * **scale** (heterogeneous) - **T**:
    -   Scale tensor of shape (C).
    +   The scale as a 1-dimensional tensor of size C to be applied to the
    +   output.
      * **B** (heterogeneous) - **T**:
    -   Bias tensor of shape (C).
    +   The bias as a 1-dimensional tensor of size C to be applied to the
    +   output.
      * **mean** (heterogeneous) - **T**:
    -   running (training) or estimated (testing) mean tensor of shape (C).
    +   The running mean (training) or the estimated mean (testing) as a
    +   1-dimensional tensor of size C.
      * **var** (heterogeneous) - **T**:
    -   running (training) or estimated (testing) variance tensor of shape
    -   (C).
    +   The running variance (training) or the estimated variance (testing)
    +   as a 1-dimensional tensor of size C.
  
      **Outputs**
  
      Between 1 and 5 outputs.
  
      * **Y** (heterogeneous) - **T**:
    -   The output tensor of the same shape as X
    +   The output 4-dimensional tensor of the same shape as X.
    ?             ++++++++++++++                              +
      * **mean** (optional, heterogeneous) - **T**:
    -   The running mean after the BatchNormalization operator.
    +   The running mean after the BatchNormalization operator. Must be in-
    ?                                                          ++++++++++++
    +   place with the input mean. Should not be used for testing.
      * **var** (optional, heterogeneous) - **T**:
    -   The running variance after the BatchNormalization operator.
    +   The running variance after the BatchNormalization operator. Must be
    ?                                                              ++++++++
    +   in-place with the input var. Should not be used for testing.
      * **saved_mean** (optional, heterogeneous) - **T**:
        Saved mean used during training to speed up gradient computation.
    +   Should not be used for testing.
      * **saved_var** (optional, heterogeneous) - **T**:
        Saved variance used during training to speed up gradient
    -   computation.
    +   computation. Should not be used for testing.
  
      **Type Constraints**
  
      * **T** in (
        tensor(double),
        tensor(float),
        tensor(float16)
        ):
        Constrain input and output types to float tensors.
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_BatchNormalization_6');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>