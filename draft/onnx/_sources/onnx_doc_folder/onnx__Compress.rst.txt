
.. _l-onnx-doc-Compress:

========
Compress
========

.. contents::
    :local:


.. _l-onnx-op-compress-11:

Compress - 11
=============

**Version**

* **name**: `Compress (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Compress>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Selects slices from an input tensor along a given axis where condition evaluates to True for each axis index.
In case axis is not provided, input is flattened before elements are selected.
Compress behaves like numpy.compress: https://docs.scipy.org/doc/numpy/reference/generated/numpy.compress.html

**Attributes**

* **axis**:
  (Optional) Axis along which to take slices. If not specified, input
  is flattened before elements being selected. Negative value means
  counting dimensions from the back. Accepted range is [-r, r-1] where
  r = rank(input).

**Inputs**

* **input** (heterogeneous) - **T**:
  Tensor of rank r &gt;= 1.
* **condition** (heterogeneous) - **T1**:
  Rank 1 tensor of booleans to indicate which slices or data elements
  to be selected. Its length can be less than the input length along
  the axis or the flattened input size if axis is not specified. In
  such cases data slices or elements exceeding the condition length
  are discarded.

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor of rank r if axis is specified. Otherwise output is a Tensor
  of rank 1.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.
* **T1** in (
  tensor(bool)
  ):
  Constrain to boolean tensors.

**Examples**

**_compress_0**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Compress&#34;,
        inputs=[&#34;input&#34;, &#34;condition&#34;],
        outputs=[&#34;output&#34;],
        axis=0,
    )
    input = np.array([[1, 2], [3, 4], [5, 6]]).astype(np.float32)
    condition = np.array([0, 1, 1])
    output = np.compress(condition, input, axis=0)
    # print(output)
    # [[ 3.  4.]
    # [ 5.  6.]]

    expect(
        node,
        inputs=[input, condition.astype(bool)],
        outputs=[output],
        name=&#34;test_compress_0&#34;,
    )

**_compress_1**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Compress&#34;,
        inputs=[&#34;input&#34;, &#34;condition&#34;],
        outputs=[&#34;output&#34;],
        axis=1,
    )
    input = np.array([[1, 2], [3, 4], [5, 6]]).astype(np.float32)
    condition = np.array([0, 1])
    output = np.compress(condition, input, axis=1)
    # print(output)
    # [[ 2.]
    # [ 4.]
    # [ 6.]]

    expect(
        node,
        inputs=[input, condition.astype(bool)],
        outputs=[output],
        name=&#34;test_compress_1&#34;,
    )

**_compress_default_axis**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Compress&#34;,
        inputs=[&#34;input&#34;, &#34;condition&#34;],
        outputs=[&#34;output&#34;],
    )
    input = np.array([[1, 2], [3, 4], [5, 6]]).astype(np.float32)
    condition = np.array([0, 1, 0, 0, 1])
    output = np.compress(condition, input)
    # print(output)
    # [ 2., 5.]

    expect(
        node,
        inputs=[input, condition.astype(bool)],
        outputs=[output],
        name=&#34;test_compress_default_axis&#34;,
    )

**_compress_negative_axis**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;Compress&#34;,
        inputs=[&#34;input&#34;, &#34;condition&#34;],
        outputs=[&#34;output&#34;],
        axis=-1,
    )
    input = np.array([[1, 2], [3, 4], [5, 6]]).astype(np.float32)
    condition = np.array([0, 1])
    output = np.compress(condition, input, axis=-1)
    # print(output)
    # [[ 2.]
    # [ 4.]
    # [ 6.]]
    expect(
        node,
        inputs=[input, condition.astype(bool)],
        outputs=[output],
        name=&#34;test_compress_negative_axis&#34;,
    )

.. toctree::

    text_diff_Compress_9_11

.. _l-onnx-op-compress-9:

Compress - 9
============

**Version**

* **name**: `Compress (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Compress>`_
* **domain**: **main**
* **since_version**: **9**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: False

This version of the operator has been available
**since version 9**.

**Summary**

Selects slices from an input tensor along a given axis where condition evaluates to True for each axis index.
In case axis is not provided, input is flattened before elements are selected.
Compress behaves like numpy.compress: https://docs.scipy.org/doc/numpy/reference/generated/numpy.compress.html

**Attributes**

* **axis**:
  (Optional) Axis along which to take slices. If not specified, input
  is flattened before elements being selected.

**Inputs**

* **input** (heterogeneous) - **T**:
  Tensor of rank r &gt;= 1.
* **condition** (heterogeneous) - **T1**:
  Rank 1 tensor of booleans to indicate which slices or data elements
  to be selected. Its length can be less than the input length alone
  the axis or the flattened input size if axis is not specified. In
  such cases data slices or elements exceeding the condition length
  are discarded.

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor of rank r if axis is specified. Otherwise output is a Tensor
  of rank 1.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.
* **T1** in (
  tensor(bool)
  ):
  Constrain to boolean tensors.
