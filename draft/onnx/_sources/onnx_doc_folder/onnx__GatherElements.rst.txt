
.. _l-onnx-doc-GatherElements:

==============
GatherElements
==============

.. contents::
    :local:


.. _l-onnx-op-gatherelements-13:

GatherElements - 13
===================

**Version**

* **name**: `GatherElements (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#GatherElements>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

GatherElements takes two inputs `data` and `indices` of the same rank r &gt;= 1
and an optional attribute `axis` that identifies an axis of `data`
(by default, the outer-most axis, that is axis 0). It is an indexing operation
that produces its output by indexing into the input data tensor at index
positions determined by elements of the `indices` tensor.
Its output shape is the same as the shape of `indices` and consists of one value
(gathered from the `data`) for each element in `indices`.

For instance, in the 3-D case (r = 3), the output produced is determined
by the following equations:
::

      out[i][j][k] = input[index[i][j][k]][j][k] if axis = 0,
      out[i][j][k] = input[i][index[i][j][k]][k] if axis = 1,
      out[i][j][k] = input[i][j][index[i][j][k]] if axis = 2,

This operator is also the inverse of ScatterElements. It is similar to Torch&#39;s gather operation.

Example 1:
::

      data = [
          [1, 2],
          [3, 4],
      ]
      indices = [
          [0, 0],
          [1, 0],
      ]
      axis = 1
      output = [
          [1, 1],
          [4, 3],
      ]

Example 2:
::

      data = [
          [1, 2, 3],
          [4, 5, 6],
          [7, 8, 9],
      ]
      indices = [
          [1, 2, 0],
          [2, 0, 0],
      ]
      axis = 0
      output = [
          [4, 8, 3],
          [7, 2, 3],
      ]

**Attributes**

* **axis**:
  Which axis to gather on. Negative value means counting dimensions
  from the back. Accepted range is [-r, r-1] where r = rank(data).

**Inputs**

* **data** (heterogeneous) - **T**:
  Tensor of rank r &gt;= 1.
* **indices** (heterogeneous) - **Tind**:
  Tensor of int32/int64 indices, with the same rank r as the input.
  All index values are expected to be within bounds [-s, s-1] along
  axis of size s. It is an error if any of the index values are out of
  bounds.

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor of the same shape as indices.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to any tensor type.
* **Tind** in (
  tensor(int32),
  tensor(int64)
  ):
  Constrain indices to integer types

**Examples**

**_gather_elements_0**

::

    import numpy as np
    import onnx

    axis = 1
    node = onnx.helper.make_node(
        &#34;GatherElements&#34;,
        inputs=[&#34;data&#34;, &#34;indices&#34;],
        outputs=[&#34;y&#34;],
        axis=axis,
    )
    data = np.array([[1, 2], [3, 4]], dtype=np.float32)
    indices = np.array([[0, 0], [1, 0]], dtype=np.int32)

    y = gather_elements(data, indices, axis)
    # print(y) produces
    # [[1, 1],
    #  [4, 3]]

    expect(
        node,
        inputs=[data, indices.astype(np.int64)],
        outputs=[y],
        name=&#34;test_gather_elements_0&#34;,
    )

**_gather_elements_1**

::

    import numpy as np
    import onnx

    axis = 0
    node = onnx.helper.make_node(
        &#34;GatherElements&#34;,
        inputs=[&#34;data&#34;, &#34;indices&#34;],
        outputs=[&#34;y&#34;],
        axis=axis,
    )
    data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float32)
    indices = np.array([[1, 2, 0], [2, 0, 0]], dtype=np.int32)

    y = gather_elements(data, indices, axis)
    # print(y) produces
    # [[4, 8, 3],
    #  [7, 2, 3]]

    expect(
        node,
        inputs=[data, indices.astype(np.int64)],
        outputs=[y],
        name=&#34;test_gather_elements_1&#34;,
    )

**_gather_elements_negative_indices**

::

    import numpy as np
    import onnx

    axis = 0
    node = onnx.helper.make_node(
        &#34;GatherElements&#34;,
        inputs=[&#34;data&#34;, &#34;indices&#34;],
        outputs=[&#34;y&#34;],
        axis=axis,
    )
    data = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]], dtype=np.float32)
    indices = np.array([[-1, -2, 0], [-2, 0, 0]], dtype=np.int32)

    y = gather_elements(data, indices, axis)
    # print(y) produces
    # [[7, 5, 3],
    #  [4, 2, 3]]

    expect(
        node,
        inputs=[data, indices.astype(np.int64)],
        outputs=[y],
        name=&#34;test_gather_elements_negative_indices&#34;,
    )

.. toctree::

    text_diff_GatherElements_11_13

.. _l-onnx-op-gatherelements-11:

GatherElements - 11
===================

**Version**

* **name**: `GatherElements (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#GatherElements>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

GatherElements takes two inputs `data` and `indices` of the same rank r &gt;= 1
and an optional attribute `axis` that identifies an axis of `data`
(by default, the outer-most axis, that is axis 0). It is an indexing operation
that produces its output by indexing into the input data tensor at index
positions determined by elements of the `indices` tensor.
Its output shape is the same as the shape of `indices` and consists of one value
(gathered from the `data`) for each element in `indices`.

For instance, in the 3-D case (r = 3), the output produced is determined
by the following equations:
::

      out[i][j][k] = input[index[i][j][k]][j][k] if axis = 0,
      out[i][j][k] = input[i][index[i][j][k]][k] if axis = 1,
      out[i][j][k] = input[i][j][index[i][j][k]] if axis = 2,

This operator is also the inverse of ScatterElements. It is similar to Torch&#39;s gather operation.

Example 1:
::

      data = [
          [1, 2],
          [3, 4],
      ]
      indices = [
          [0, 0],
          [1, 0],
      ]
      axis = 1
      output = [
          [
            [1, 1],
            [4, 3],
          ],
      ]

Example 2:
::

      data = [
          [1, 2, 3],
          [4, 5, 6],
          [7, 8, 9],
      ]
      indices = [
          [1, 2, 0],
          [2, 0, 0],
      ]
      axis = 0
      output = [
          [
            [4, 8, 3],
            [7, 2, 3],
          ],
      ]

**Attributes**

* **axis**:
  Which axis to gather on. Negative value means counting dimensions
  from the back. Accepted range is [-r, r-1] where r = rank(data).

**Inputs**

* **data** (heterogeneous) - **T**:
  Tensor of rank r &gt;= 1.
* **indices** (heterogeneous) - **Tind**:
  Tensor of int32/int64 indices, with the same rank r as the input.
  All index values are expected to be within bounds [-s, s-1] along
  axis of size s. It is an error if any of the index values are out of
  bounds.

**Outputs**

* **output** (heterogeneous) - **T**:
  Tensor of the same shape as indices.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to any tensor type.
* **Tind** in (
  tensor(int32),
  tensor(int64)
  ):
  Constrain indices to integer types
