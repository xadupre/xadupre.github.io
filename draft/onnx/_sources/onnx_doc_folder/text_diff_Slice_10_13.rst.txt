
.. _l-onnx-op-slice-d10-13:

Slice - 10 vs 13
================

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_Slice_3"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/Slice10
    +++ b/Slice13
    @@ -1 +1 @@
      Produces a slice of the input tensor along multiple axes. Similar to numpy:
    + https://docs.scipy.org/doc/numpy/reference/arrays.indexing.html
    - https://numpy.org/doc/stable/user/basics.indexing.html?highlight=slice#slicing-and-striding
    - 
    - Slice uses the starts, ends, axes and steps inputs to select a sub-tensor
    ?           ----                                         ^^      -----  ^^^
    + Slices uses starts, ends, axes and steps inputs to specify the start and end
    ?      +                                              ^  ++++++++++++   ++   ^
    - of its input data tensor.
    - 
    - An effective start[i], end[i], and step[i] must be computed for each i
    - in [0, ... r-1] where r = rank(input) as follows:
    - 
    + dimension and step for each axis in the list of axes, it uses this information to
    + slice the input data tensor. If a negative value is passed for any of the
    + start or end indices, it represent number of elements before the end of that
    + dimension. If the value passed to start or end is larger than the n (the
    + number of elements in this dimension), it represents n. For slicing to the
    + end of a dimension with unknown size, it is recommended to pass in INT_MAX.
    + If a negative value is passed for step, it represents slicing backward.
    - If axes are omitted, they are set to [0, ..., r-1].
    ?                                               ^
    + If axes are omitted, they are set to [0, ..., ndim-1].
    ?                                               ^^^^
      If steps are omitted, they are set to [1, ..., 1] of length len(starts)
    - 
    - The effective values are initialized as start[i] = 0, end[i] = dims[i] where
    - dims are the dimensions of input and step[i] = 1.
    - 
    - All negative elements of axes are made non-negatve by adding r to them, where
    - r =rank(input).
    - 
    - All negative values in starts[i] and ends[i] have dims[axes[i]] added to them,
    - where dims are the dimensions of input. Then start[axes[i]] is the adjusted
    - starts[i] is clamped into the range [0, dims[axes[i]]] for positive stepping
    - and [0, dims[axes[i]]-1] for negative stepping.
    - 
    - The clamping for the adjusted ends[i] depends on the sign of steps[i] and must
    - accommodate copying 0 through dims[axes[i]] elements, so for positive stepping
    - end[axes[i]] is clamped to [0, dims[axes[i]]], while for negative stepping it
    - is clamped to [-1, dims[axes[i]]-1].
    - 
    - Finally, step[axes[i]] = steps[i].
    - 
    - For slicing to the end of a dimension with unknown size, it is recommended to pass
    - in INT_MAX when slicing forward and 'INT_MIN' when slicing backward.
    - 
      Example 1:
        data = [
            [1, 2, 3, 4],
            [5, 6, 7, 8],
        ]
        axes = [0, 1]
        starts = [1, 0]
        ends = [2, 3]
        steps = [1, 2]
        result = [
            [5, 7],
        ]
      Example 2:
        data = [
            [1, 2, 3, 4],
            [5, 6, 7, 8],
        ]
        starts = [0, 1]
        ends = [-1, 1000]
        result = [
            [2, 3, 4],
        ]
  
      **Inputs**
  
      Between 3 and 5 inputs.
  
      * **data** (heterogeneous) - **T**:
        Tensor of data to extract slices from.
      * **starts** (heterogeneous) - **Tind**:
        1-D tensor of starting indices of corresponding axis in axes
      * **ends** (heterogeneous) - **Tind**:
        1-D tensor of ending indices (exclusive) of corresponding axis in
        axes
      * **axes** (optional, heterogeneous) - **Tind**:
    -   1-D tensor of axes that starts and ends apply to. Negative value
    ?                                                    ---------------
    +   1-D tensor of axes that starts and ends apply to.
    -   means counting dimensions from the back. Accepted range is [-r, r-1]
    -   where r = rank(data). Behavior is undefined if an axis is repeated.
      * **steps** (optional, heterogeneous) - **Tind**:
    -   1-D tensor of slice step of corresponding axis in axes. Negative
    ?                                                           ^ ^  ^^^
    +   1-D tensor of slice step of corresponding axis in axes. Default to
    ?                                                           ^ ^ ++ ^^^
    -   value means slicing backward. 'steps' cannot be 0. Defaults to 1s.
    +   1.
  
      **Outputs**
  
      * **output** (heterogeneous) - **T**:
        Sliced data tensor.
  
      **Type Constraints**
  
      * **T** in (
    -   tensor(bfloat16),
        tensor(bool),
        tensor(complex128),
        tensor(complex64),
        tensor(double),
        tensor(float),
        tensor(float16),
        tensor(int16),
        tensor(int32),
        tensor(int64),
        tensor(int8),
        tensor(string),
        tensor(uint16),
        tensor(uint32),
        tensor(uint64),
        tensor(uint8)
        ):
        Constrain input and output types to all tensor types.
      * **Tind** in (
        tensor(int32),
        tensor(int64)
        ):
        Constrain indices to integer types
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_Slice_3');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>