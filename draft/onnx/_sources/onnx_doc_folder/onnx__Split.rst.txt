
.. _l-onnx-doc-Split:

=====
Split
=====

.. contents::
    :local:


.. _l-onnx-op-split-13:

Split - 13
==========

**Version**

* **name**: `Split (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Split>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Split a tensor into a list of tensors, along the specified
&#39;axis&#39;. Lengths of the parts can be specified using input &#39;split&#39;.
Otherwise, the tensor is split to equal sized parts.

**Attributes**

* **axis**:
  Which axis to split on. A negative value means counting dimensions
  from the back. Accepted range is [-rank, rank-1] where r =
  rank(input).

**Inputs**

Between 1 and 2 inputs.

* **input** (heterogeneous) - **T**:
  The tensor to split
* **split** (optional, heterogeneous) - **tensor(int64)**:
  Optional length of each output. Values should be &gt;= 0.Sum of the
  values must be equal to the dim value at &#39;axis&#39; specified.

**Outputs**

Between 1 and 2147483647 outputs.

* **outputs** (variadic, heterogeneous) - **T**:
  One or more outputs forming list of tensors after splitting

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

**Examples**

**_1d**

::

    import numpy as np
    import onnx

    input = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]).astype(np.float32)

    node = onnx.helper.make_node(
        &#34;Split&#34;,
        inputs=[&#34;input&#34;],
        outputs=[&#34;output_1&#34;, &#34;output_2&#34;, &#34;output_3&#34;],
        axis=0,
    )

    expected_outputs = [
        np.array([1.0, 2.0]).astype(np.float32),
        np.array([3.0, 4.0]).astype(np.float32),
        np.array([5.0, 6.0]).astype(np.float32),
    ]
    expect(
        node,
        inputs=[input],
        outputs=[y for y in expected_outputs],
        name=&#34;test_split_equal_parts_1d&#34;,
    )

    split = np.array([2, 4]).astype(np.int64)
    node = onnx.helper.make_node(
        &#34;Split&#34;,
        inputs=[&#34;input&#34;, &#34;split&#34;],
        outputs=[&#34;output_1&#34;, &#34;output_2&#34;],
        axis=0,
    )

    expected_outputs = [
        np.array([1.0, 2.0]).astype(np.float32),
        np.array([3.0, 4.0, 5.0, 6.0]).astype(np.float32),
    ]
    expect(
        node,
        inputs=[input, split],
        outputs=[y for y in expected_outputs],
        name=&#34;test_split_variable_parts_1d&#34;,
    )

**_2d**

::

    import numpy as np
    import onnx

    input = np.array(
        [[1.0, 2.0, 3.0, 4.0, 5.0, 6.0], [7.0, 8.0, 9.0, 10.0, 11.0, 12.0]]
    ).astype(np.float32)

    node = onnx.helper.make_node(
        &#34;Split&#34;, inputs=[&#34;input&#34;], outputs=[&#34;output_1&#34;, &#34;output_2&#34;], axis=1
    )

    expected_outputs = [
        np.array([[1.0, 2.0, 3.0], [7.0, 8.0, 9.0]]).astype(np.float32),
        np.array([[4.0, 5.0, 6.0], [10.0, 11.0, 12.0]]).astype(np.float32),
    ]

    expect(
        node,
        inputs=[input],
        outputs=[y for y in expected_outputs],
        name=&#34;test_split_equal_parts_2d&#34;,
    )

    split = np.array([2, 4]).astype(np.int64)
    node = onnx.helper.make_node(
        &#34;Split&#34;,
        inputs=[&#34;input&#34;, &#34;split&#34;],
        outputs=[&#34;output_1&#34;, &#34;output_2&#34;],
        axis=1,
    )

    expected_outputs = [
        np.array([[1.0, 2.0], [7.0, 8.0]]).astype(np.float32),
        np.array([[3.0, 4.0, 5.0, 6.0], [9.0, 10.0, 11.0, 12.0]]).astype(
            np.float32
        ),
    ]

    expect(
        node,
        inputs=[input, split],
        outputs=[y for y in expected_outputs],
        name=&#34;test_split_variable_parts_2d&#34;,
    )

**_default_values**

::

    import numpy as np
    import onnx

    input = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]).astype(np.float32)

    # If axis is not specified, split is applied on default axis 0
    node = onnx.helper.make_node(
        &#34;Split&#34;, inputs=[&#34;input&#34;], outputs=[&#34;output_1&#34;, &#34;output_2&#34;, &#34;output_3&#34;]
    )

    expected_outputs = [
        np.array([1.0, 2.0]).astype(np.float32),
        np.array([3.0, 4.0]).astype(np.float32),
        np.array([5.0, 6.0]).astype(np.float32),
    ]
    expect(
        node,
        inputs=[input],
        outputs=[y for y in expected_outputs],
        name=&#34;test_split_equal_parts_default_axis&#34;,
    )

    split = np.array([2, 4]).astype(np.int64)
    node = onnx.helper.make_node(
        &#34;Split&#34;, inputs=[&#34;input&#34;, &#34;split&#34;], outputs=[&#34;output_1&#34;, &#34;output_2&#34;]
    )

    expected_outputs = [
        np.array([1.0, 2.0]).astype(np.float32),
        np.array([3.0, 4.0, 5.0, 6.0]).astype(np.float32),
    ]
    expect(
        node,
        inputs=[input, split],
        outputs=[y for y in expected_outputs],
        name=&#34;test_split_variable_parts_default_axis&#34;,
    )

**_zero_size_splits**

::

    import numpy as np
    import onnx

    input = np.array([]).astype(np.float32)

    # Split emtpy tensor to tensors of size zero
    split = np.array([0, 0, 0]).astype(np.int64)
    node = onnx.helper.make_node(
        &#34;Split&#34;,
        inputs=[&#34;input&#34;, &#34;split&#34;],
        outputs=[&#34;output_1&#34;, &#34;output_2&#34;, &#34;output_3&#34;],
    )

    expected_outputs = [
        np.array([]).astype(np.float32),
        np.array([]).astype(np.float32),
        np.array([]).astype(np.float32),
    ]
    expect(
        node,
        inputs=[input, split],
        outputs=[y for y in expected_outputs],
        name=&#34;test_split_zero_size_splits&#34;,
    )

.. toctree::

    text_diff_Split_11_13

.. _l-onnx-op-split-11:

Split - 11
==========

**Version**

* **name**: `Split (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Split>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Split a tensor into a list of tensors, along the specified
&#39;axis&#39;. Lengths of the parts can be specified using argument &#39;split&#39;.
Otherwise, the tensor is split to equal sized parts.

**Attributes**

* **axis**:
  Which axis to split on. A negative value means counting dimensions
  from the back. Accepted range is [-rank, rank-1] where r =
  rank(input).
* **split**:
  length of each output. Values should be &gt;= 0.

**Inputs**

* **input** (heterogeneous) - **T**:
  The tensor to split

**Outputs**

Between 1 and 2147483647 outputs.

* **outputs** (variadic, heterogeneous) - **T**:
  One or more outputs forming list of tensors after splitting

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

.. toctree::

    text_diff_Split_2_11

.. _l-onnx-op-split-2:

Split - 2
=========

**Version**

* **name**: `Split (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Split>`_
* **domain**: **main**
* **since_version**: **2**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 2**.

**Summary**

Split a tensor into a list of tensors, along the specified
&#39;axis&#39;. Lengths of the parts can be specified using argument &#39;split&#39;.
Otherwise, the tensor is split to equal sized parts.

**Attributes**

* **axis**:
  Which axis to split on.
* **split**:
  length of each output

**Inputs**

* **input** (heterogeneous) - **T**:
  The tensor to split

**Outputs**

Between 1 and 2147483647 outputs.

* **outputs** (variadic, heterogeneous) - **T**:
  One or more outputs forming list of tensors after splitting

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

.. toctree::

    text_diff_Split_1_2

.. _l-onnx-op-split-1:

Split - 1
=========

**Version**

* **name**: `Split (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Split>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: False

This version of the operator has been available
**since version 1**.

**Summary**

Split a tensor into a list of tensors, along the specified
&#39;axis&#39;. The lengths of the split can be specified using argument &#39;axis&#39; or
optional second input blob to the operator. Otherwise, the tensor is split
to equal sized parts.

**Attributes**

* **axis**:
  Which axis to split on
* **split**:
  length of each output

**Inputs**

Between 1 and 2 inputs.

* **input** (heterogeneous) - **T**:
  The tensor to split
* **split** (optional, heterogeneous) - **T**:
  Optional list of output lengths (see also arg &#39;split&#39;)

**Outputs**

Between 1 and 2147483647 outputs.

* **outputs...** (variadic, heterogeneous) - **T**:
  One or more outputs forming list of tensors after splitting

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input types to float tensors.
