NegativeLogLikelihoodLoss - 12 vs 13
====================================

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_NegativeLogLikelihoodLoss_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/NegativeLogLikelihoodLoss12
    +++ b/NegativeLogLikelihoodLoss13
    @@ -1 +1 @@
      A NegativeLogLikelihoodLoss operator computes (weighted) negative log likelihood loss.
      Its &amp;#34;input&amp;#34; tensor has the shape of (N, C, d1, d2, ..., dk) where k &amp;gt;= 0.
      The &amp;#34;input&amp;#34; tensor contains log-probabilities for input[n, :, d_1, d_2,..., d_k] being in a class of [0, C).
      The operator&amp;#39;s &amp;#34;target&amp;#34; input tensor has the shape of (N, d1, d2, ..., dk). It encodes class labels (one of C classes)
      or it may contain a special value (indicated by an attribute ignore_index) for N x d1 x d2 x ... x dk samples.
      The loss value for input[n, :, d_1, d_2,...d_k] being classified as class c = target[n][d_1][d_2]...[d_k] is computed as:
    + 
          loss[n][d_1][d_2]...[d_k] = -input[n][c][d_1][d_2]...[d_k].
    + 
      When an optional &amp;#34;weight&amp;#34; is provided, the sample loss is calculated as:
    + 
          loss[n][d_1][d_2]...[d_k] = -input[n][c][d_1][d_2]...[d_k] * weight[c].
    + 
      loss is zero for the case when target-value equals ignore_index.
  
          loss[n][d_1][d_2]...[d_k] = 0, when target[n][d_1][d_2]...[d_k] = ignore_index
    + 
      If &amp;#34;reduction&amp;#34; attribute is set to &amp;#34;none&amp;#34;, the operator&amp;#39;s output will be the above loss with shape (N, d1, d2, ..., dk).
      If &amp;#34;reduction&amp;#34; attribute is set to &amp;#34;mean&amp;#34; (the default attribute value), the output loss is (weight) averaged:
    + 
          mean(loss), if &amp;#34;weight&amp;#34; is not provided,
    + 
      or if weight is provided,
    + 
          sum(loss) / sum(weight[target[n][d_1][d_2]...[d_k]]]), for all samples.
    + 
      If &amp;#34;reduction&amp;#34; attribute is set to &amp;#34;sum&amp;#34;, the output is a scalar:
          sum(loss).
    + 
      See also https://pytorch.org/docs/stable/nn.html#torch.nn.NLLLoss.
    + 
      Example 1:
    + 
          // negative log likelihood loss, &amp;#34;none&amp;#34; reduction
          N, C, d1 = 2, 3, 2
          input = [[[1.0, 2.0], [2.0, 2.0], [3.0, 2.0]],
                   [[0.0, 1.0], [2.0, 2.0], [1.0, 2]]]
          target = [[2, 1], [0, 2]]
    + 
          loss = np.zeros((N, d1))
          for n in range(N):
              for d_1 in range(d1):
                  c = target[n][d_1]
                  loss[n][d_1] = -input[n][c][d_1]
    + 
          // print(loss)
          // [[-3. -2.]
          //  [-0. -2.]]
    + 
      Example 2:
    + 
          // weighted negative log likelihood loss, sum reduction
          N, C, d1 = 2, 3, 2
          input = [[[1.0, 2.0], [2.0, 2.0], [3.0, 2.0]],
                  [[0.0, 1.0], [2.0, 2.0], [1.0, 2]]]
          target = [[2, 1], [0, 2]]
          weight = [0.2, 0.3, 0.1]
          loss = np.zeros((N, d1))
          for n in range(N):
              for d_1 in range(d1):
                  c = target[n][d_1]
                  loss[n][d_1] = -input[n][c][d_1] * weight[c]
    + 
          loss = np.sum(loss)
          // print(loss)
          // -1.1
    + 
      Example 3:
    + 
          // weighted negative log likelihood loss, mean reduction
          N, C, d1 = 2, 3, 2
          input = [[[1.0, 2.0], [2.0, 2.0], [3.0, 2.0]],
                  [[0.0, 1.0], [2.0, 2.0], [1.0, 2]]]
          target = [[2, 1], [0, 2]]
          weight = [0.2, 0.3, 0.1]
          loss = np.zeros((N, d1))
          weight_total = 0
          for n in range(N):
              for d_1 in range(d1):
                  c = target[n][d_1]
                  loss[n][d_1] = -input[n][c][d_1] * weight[c]
                  weight_total = weight_total + weight[c]
    + 
          loss = np.sum(loss) / weight_total
          // print(loss)
          // -1.57
  
      **Attributes**
  
      * **ignore_index**:
        Specifies a target value that is ignored and does not contribute to
        the input gradient. It&amp;#39;s an optional value.
      * **reduction**:
        Type of reduction to apply to loss: none, sum, mean (default).
        &amp;#39;none&amp;#39;: the output is the loss for each sample. &amp;#39;sum&amp;#39;: the output
        will be summed. &amp;#39;mean&amp;#39;: the sum of the output will be divided by the
        sum of applied weights.
  
      **Inputs**
  
      Between 2 and 3 inputs.
  
      * **input** (heterogeneous) - **T**:
        Input tensor of shape (N, C) or (N, C, d1, d2, ..., dk).
      * **target** (heterogeneous) - **Tind**:
        Target tensor of shape (N) or (N, d1, d2, ..., dk). Target element
        value shall be in range of [0, C). If ignore_index is specified, it
        may have a value outside [0, C) and the target values should either
        be in the range [0, C) or have the value ignore_index.
      * **weight** (optional, heterogeneous) - **T**:
        Optional rescaling weight tensor. If given, it has to be a tensor of
        size C. Otherwise, it is treated as if having all ones.
  
      **Outputs**
  
      * **loss** (heterogeneous) - **T**:
        The negative log likelihood loss
  
      **Type Constraints**
  
      * **T** in (
        tensor(double),
        tensor(float),
        tensor(float16)
        ):
        Constrain input, weight, and output types to floating-point tensors.
      * **Tind** in (
        tensor(int32),
        tensor(int64)
        ):
        Constrain target to integer types
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_NegativeLogLikelihoodLoss_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>