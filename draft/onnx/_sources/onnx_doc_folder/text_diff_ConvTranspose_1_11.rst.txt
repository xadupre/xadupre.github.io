ConvTranspose - 1 vs 11
=======================

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_ConvTranspose_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/ConvTranspose1
    +++ b/ConvTranspose11
    @@ -1 +1 @@
      The convolution transpose operator consumes an input tensor and a filter,
      and computes the output.
  
      If the pads parameter is provided the shape of the output is calculated via the following equation:
  
        output_shape[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + ((kernel_shape[i] - 1) * dilations[i] + 1) - pads[start_i] - pads[end_i]
  
      output_shape can also be explicitly specified in which case pads values are auto generated using these equations:
  
        total_padding[i] = stride[i] * (input_size[i] - 1) + output_padding[i] + ((kernel_shape[i] - 1) * dilations[i] + 1) - output_shape[i]
    -   If (auto_pads != SAME_UPPER): pads[start_i] = total_padding[i]/2; pads[end_i] = total_padding[i] - (total_padding[i]/2)
    ?                 ^
    +   If (auto_pads == SAME_UPPER): pads[start_i] = total_padding[i]/2; pads[end_i] = total_padding[i] - (total_padding[i]/2)
    ?                 ^
        Else: pads[start_i] = total_padding[i] - (total_padding[i]/2); pads[end_i] = (total_padding[i]/2).
  
      **Attributes**
  
      * **auto_pad**:
        auto_pad must be either NOTSET, SAME_UPPER, SAME_LOWER or VALID.
        Where default value is NOTSET, which means explicit padding is used.
    -   SAME_UPPER or SAME_LOWER mean pad the input so that the output
    ?                                                       ----
    +   SAME_UPPER or SAME_LOWER mean pad the input so that output_shape[i]
    ?                                                             +++++++++
    -   spatial size match the input.In case of odd number add the extra
    -   padding at the end for SAME_UPPER and at the beginning for
    -   SAME_LOWER. VALID mean no padding.
    +   = input_shape[i] * strides[i] for each axis i. The padding is
    +   split between the two sides equally or almost equally (depending on
    +   whether it is even or odd). In case the padding is an odd number,
    +   the extra padding is added at the end for SAME_UPPER and at the
    +   beginning for SAME_LOWER.
      * **dilations**:
    -   dilation value along each spatial axis of the filter.
    +   dilation value along each spatial axis of the filter. If not
    ?                                                        +++++++
    +   present, the dilation defaults to 1 along each spatial axis.
      * **group**:
        number of groups input channels and output channels are divided
        into.
      * **kernel_shape**:
        The shape of the convolution kernel. If not present, should be
        inferred from input W.
      * **output_padding**:
    -   The zero-padding added to one side of the output. This is also
    -   called adjs/adjustment in some frameworks.
    +   Additional elements added to the side with higher coordinate indices
    +   in the output. Each padding value in &amp;#34;output_padding&amp;#34; must be less
    +   than the corresponding stride/dilation dimension. By default, this
    +   attribute is a zero vector. Note that this attribute doesn&amp;#39;t
    +   directly affect the computed output values. It only controls the
    +   selection of the computed values, so changing this attribute only
    +   adds or removes output elements. If &amp;#34;output_shape&amp;#34; is explicitly
    +   provided, &amp;#34;output_padding&amp;#34; does not contribute additional size to
    +   &amp;#34;output_shape&amp;#34; but participates in the computation of the needed
    +   padding amount. This is also called adjs or adjustment in some
    +   frameworks.
      * **output_shape**:
        The shape of the output can be explicitly set which will cause pads
        values to be auto generated. If output_shape is specified pads
        values are ignored. See doc for details for equations to generate
        pads
      * **pads**:
        Padding for the beginning and ending along each spatial axis, it can
        take any value greater than or equal to 0. The value represent the
        number of pixels added to the beginning and end part of the
        corresponding axis. pads format should be as follow [x1_begin,
        x2_begin...x1_end, x2_end,...], where xi_begin the number of pixels
        added at the beginning of axis i and xi_end, the number of pixels
        added at the end of axis i. This attribute cannot be used
        simultaneously with auto_pad attribute. If not present, the padding
        defaults to 0 along start and end of each spatial axis.
      * **strides**:
    +   Stride along each spatial axis. If not present, the stride defaults
    -   Stride along each spatial axis.
    ?   - ^^^^
    +   to 1 along each spatial axis.
    ?    ^^^
  
      **Inputs**
  
      Between 2 and 3 inputs.
  
      * **X** (heterogeneous) - **T**:
        Input data tensor from previous layer; has size (N x C x H x W),
        where N is the batch size, C is the number of channels, and H and W
        are the height and width. Note that this is for the 2D image.
        Otherwise the size is (N x C x D1 x D2 ... x Dn)
      * **W** (heterogeneous) - **T**:
        The weight tensor that will be used in the convolutions; has size (C
        x M/group x kH x kW), where C is the number of channels, and kH and
        kW are the height and width of the kernel, and M is the number of
        feature maps. For more than 2 dimensions, the weight shape will be
        (C x M/group x k1 x k2 x ... x kn), where (k1 x k2 x ... x kn) is
        the dimension of the kernel. The number of channels in the output
        should be equal to W.shape[1] * group (assuming zero based indices
        of the shape array)
      * **B** (optional, heterogeneous) - **T**:
        Optional 1D bias to be added to the convolution, has size of M.
  
      **Outputs**
  
      * **Y** (heterogeneous) - **T**:
        Output data tensor that contains the result of the convolution. The
        output dimensions are functions of the kernel size, stride size, pad
        lengths and group count. The number of channels in the output should
        be equal to W.shape[1] * group (assuming zero based indices of the
        shape array)
  
      **Type Constraints**
  
      * **T** in (
        tensor(double),
        tensor(float),
        tensor(float16)
        ):
        Constrain input and output types to float tensors.
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_ConvTranspose_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>