
.. _l-onnx-op-pad-d1-18:

Pad - 1 vs 18
=============

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_Pad_5"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/Pad1
    +++ b/Pad18
    @@ -1 +1 @@
    + Given data tensor, paddings, mode, and value.
    + Example:
    - Given a tensor containing the data to be padded (data), a tensor containing the number of start and end pad values for axis (pads), (optionally) a mode, and (optionally) constant_value,
    - a padded tensor (output) is generated.
    - 
    - The three supported modes are (similar to corresponding modes supported by numpy.pad):
    - 
    - 1) constant(default) - pads with a given constant value as specified by constant_value (which defaults to 0, empty string, or False)
    - 
    - 2) reflect - pads with the reflection of the vector mirrored on the first and last values of the vector along each axis
    - 
    - 3) edge - pads with the edge values of array
    - 
    - Example 1 (constant mode):
    -   Insert 0 pads to the beginning of the second dimension.
    +   Insert 0 paddings to the beginning of the second dimension.
    ?               ++++
    - 
    -   data =
    +   data = [
    ?         ++
    -   [
            [1.0, 1.2],
            [2.3, 3.4],
            [4.5, 5.7],
        ]
    - 
    -   pads = [0, 2, 0, 0]
    ?              ^  ^
    +   paddings = [0, 0, 2, 0]
    ?      ++++        ^  ^
    - 
    -   mode = 'constant'
    - 
    -   constant_value = 0.0
    - 
    -   output =
    +   output = [
    ?           ++
    -   [
    +       [
    -       [0.0, 0.0, 1.0, 1.2],
    +           [0.0, 0.0, 1.0, 1.2],
    ? ++++
    -       [0.0, 0.0, 2.3, 3.4],
    +           [0.0, 0.0, 2.3, 3.4],
    ? ++++
    -       [0.0, 0.0, 4.5, 5.7],
    +           [0.0, 0.0, 4.5, 5.7],
    ? ++++
    +       ],
    -   ]
    - 
    - Example 2 (reflect mode):
    -   data =
    -   [
    -       [1.0, 1.2],
    -       [2.3, 3.4],
    -       [4.5, 5.7],
    -   ]
    - 
    -   pads = [0, 2, 0, 0]
    - 
    -   mode = 'reflect'
    - 
    -   output =
    -   [
    -       [1.0, 1.2, 1.0, 1.2],
    -       [2.3, 3.4, 2.3, 3.4],
    -       [4.5, 5.7, 4.5, 5.7],
    -   ]
    - 
    - Example 3 (edge mode):
    -   data =
    -   [
    -       [1.0, 1.2],
    -       [2.3, 3.4],
    -       [4.5, 5.7],
    -   ]
    - 
    -   pads = [0, 2, 0, 0]
    - 
    -   mode = 'edge'
    - 
    -   output =
    -   [
    -       [1.0, 1.0, 1.0, 1.2],
    -       [2.3, 2.3, 2.3, 3.4],
    -       [4.5, 4.5, 4.5, 5.7],
        ]
  
      **Attributes**
  
      * **mode**:
    -   Supported modes: constant(default), reflect, edge
    ?   ^^^^^ - ^
    +   Three modes: constant(default), reflect, edge
    ?   ^^  ^
    + * **paddings** (required):
    +   List of integers indicate the padding element count at the beginning
    +   and end of each axis, for 2D it is the number of pixel. paddings
    +   rank should be double of the input's rank. paddings format should
    +   be as follow [x1_begin, x2_begin...x1_end, x2_end,...], where
    +   xi_begin the number of pixels added at the beginning of axis i and
    +   xi_end, the number of pixels added at the end of axis i.
    + * **value**:
    +   One float, indicates the value to be filled, default is 0
  
      **Inputs**
  
    - Between 2 and 4 inputs.
    - 
      * **data** (heterogeneous) - **T**:
        Input tensor.
    - * **pads** (heterogeneous) - **tensor(int64)**:
    -   Tensor of integers indicating the number of padding elements to add
    -   or remove (if negative) at the beginning and end of each axis. For
    -   2D input tensor, it is the number of pixels. pads should be a 1D
    -   tensor of shape [2 * num_axes] where num_axes refers to the number
    -   of elements in the axes input or the input rank if axes are not
    -   provided explicitly. pads format should be: [x1_begin, x2_begin,
    -   ..., x1_end, x2_end,...], where xi_begin is the number of pad values
    -   added at the beginning of axis axes[i] and xi_end, the number of
    -   pad values added at the end of axis axes[i].
    - * **constant_value** (optional, heterogeneous) - **T**:
    -   (Optional) A scalar value to be used if the mode chosen is
    -   constant (by default it is 0, empty string or False).
    - * **axes** (optional, heterogeneous) - **Tind**:
    -   1-D tensor of axes that pads apply to. Negative value means
    -   counting dimensions from the back. Accepted range is [-r, r-1] where
    -   r = rank(data). Behavior is undefined if an axis is repeated. If not
    -   provided, all axes are assumed ([0, 1, ..., input_rank-1]).
  
      **Outputs**
  
      * **output** (heterogeneous) - **T**:
        Tensor after padding.
  
      **Type Constraints**
  
      * **T** in (
    -   tensor(bfloat16),
    -   tensor(bool),
    -   tensor(complex128),
    -   tensor(complex64),
        tensor(double),
        tensor(float),
    -   tensor(float16),
    ?                  -
    +   tensor(float16)
    -   tensor(int16),
    -   tensor(int32),
    -   tensor(int64),
    -   tensor(int8),
    -   tensor(string),
    -   tensor(uint16),
    -   tensor(uint32),
    -   tensor(uint64),
    -   tensor(uint8)
        ):
    -   Constrain input and output types to all tensor types.
    ?                                        ^^       -----  -
    +   Constrain input and output types to float tensors.?                                       +++ ^
    - * **Tind** in (
    -   tensor(int32),
    -   tensor(int64)
    -   ):
    -   Constrain indices to integer types
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_Pad_5');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>