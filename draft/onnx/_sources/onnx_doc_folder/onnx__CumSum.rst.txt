
.. _l-onnx-doc-CumSum:

======
CumSum
======

.. contents::
    :local:


.. _l-onnx-op-cumsum-14:

CumSum - 14
===========

**Version**

* **name**: `CumSum (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#CumSum>`_
* **domain**: **main**
* **since_version**: **14**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 14**.

**Summary**

Performs cumulative sum of the input elements along the given axis.
By default, it will do the sum inclusively meaning the first element is copied as is.
Through an `exclusive` attribute, this behavior can change to exclude the first element.
It can also perform summation in the opposite direction of the axis. For that, set `reverse` attribute to 1.

Example:
::

    input_x = [1, 2, 3]
    axis=0
    output = [1, 3, 6]
    exclusive=1
    output = [0, 1, 3]
    exclusive=0
    reverse=1
    output = [6, 5, 3]
    exclusive=1
    reverse=1
    output = [5, 3, 0]

**Attributes**

* **exclusive**:
  If set to 1 will return exclusive sum in which the top element is
  not included. In other terms, if set to 1, the j-th output element
  would be the sum of the first (j-1) elements. Otherwise, it would be
  the sum of the first j elements.
* **reverse**:
  If set to 1 will perform the sums in reverse direction.

**Inputs**

* **x** (heterogeneous) - **T**:
  An input tensor that is to be processed.
* **axis** (heterogeneous) - **T2**:
  A 0-D tensor. Must be in the range [-rank(x), rank(x)-1]. Negative
  value means counting dimensions from the back.

**Outputs**

* **y** (heterogeneous) - **T**:
  Output tensor of the same type as 'x' with cumulative sums of the
  x's elements

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int32),
  tensor(int64),
  tensor(uint32),
  tensor(uint64)
  ):
  Constrain input and output types to high-precision numeric tensors.
* **T2** in (
  tensor(int32),
  tensor(int64)
  ):
  axis tensor can be int32 or int64 only

**Examples**

**_cumsum_1d**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node("CumSum", inputs=["x", "axis"], outputs=["y"])
    x = np.array([1.0, 2.0, 3.0, 4.0, 5.0]).astype(np.float64)
    axis = np.int32(0)
    y = np.array([1.0, 3.0, 6.0, 10.0, 15.0]).astype(np.float64)
    expect(node, inputs=[x, axis], outputs=[y], name="test_cumsum_1d")

**_cumsum_1d_exclusive**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "CumSum", inputs=["x", "axis"], outputs=["y"], exclusive=1
    )
    x = np.array([1.0, 2.0, 3.0, 4.0, 5.0]).astype(np.float64)
    axis = np.int32(0)
    y = np.array([0.0, 1.0, 3.0, 6.0, 10.0]).astype(np.float64)
    expect(node, inputs=[x, axis], outputs=[y], name="test_cumsum_1d_exclusive")

**_cumsum_1d_reverse**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "CumSum", inputs=["x", "axis"], outputs=["y"], reverse=1
    )
    x = np.array([1.0, 2.0, 3.0, 4.0, 5.0]).astype(np.float64)
    axis = np.int32(0)
    y = np.array([15.0, 14.0, 12.0, 9.0, 5.0]).astype(np.float64)
    expect(node, inputs=[x, axis], outputs=[y], name="test_cumsum_1d_reverse")

**_cumsum_1d_reverse_exclusive**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "CumSum", inputs=["x", "axis"], outputs=["y"], reverse=1, exclusive=1
    )
    x = np.array([1.0, 2.0, 3.0, 4.0, 5.0]).astype(np.float64)
    axis = np.int32(0)
    y = np.array([14.0, 12.0, 9.0, 5.0, 0.0]).astype(np.float64)
    expect(
        node, inputs=[x, axis], outputs=[y], name="test_cumsum_1d_reverse_exclusive"
    )

**_cumsum_2d_axis_0**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "CumSum",
        inputs=["x", "axis"],
        outputs=["y"],
    )
    x = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]).astype(np.float64).reshape((2, 3))
    axis = np.int32(0)
    y = np.array([1.0, 2.0, 3.0, 5.0, 7.0, 9.0]).astype(np.float64).reshape((2, 3))
    expect(node, inputs=[x, axis], outputs=[y], name="test_cumsum_2d_axis_0")

**_cumsum_2d_axis_1**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "CumSum",
        inputs=["x", "axis"],
        outputs=["y"],
    )
    x = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]).astype(np.float64).reshape((2, 3))
    axis = np.int32(1)
    y = np.array([1.0, 3.0, 6.0, 4.0, 9.0, 15.0]).astype(np.float64).reshape((2, 3))
    expect(node, inputs=[x, axis], outputs=[y], name="test_cumsum_2d_axis_1")

**_cumsum_2d_negative_axis**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "CumSum",
        inputs=["x", "axis"],
        outputs=["y"],
    )
    x = np.array([1.0, 2.0, 3.0, 4.0, 5.0, 6.0]).astype(np.float64).reshape((2, 3))
    axis = np.int32(-1)
    y = np.array([1.0, 3.0, 6.0, 4.0, 9.0, 15.0]).astype(np.float64).reshape((2, 3))
    expect(node, inputs=[x, axis], outputs=[y], name="test_cumsum_2d_negative_axis")

.. toctree::

    text_diff_CumSum_11_14

.. _l-onnx-op-cumsum-11:

CumSum - 11
===========

**Version**

* **name**: `CumSum (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#CumSum>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Performs cumulative sum of the input elements along the given axis.
By default, it will do the sum inclusively meaning the first element is copied as is.
Through an `exclusive` attribute, this behavior can change to exclude the first element.
It can also perform summation in the opposite direction of the axis. For that, set `reverse` attribute to 1.

Example:
::

    input_x = [1, 2, 3]
    axis=0
    output = [1, 3, 6]
    exclusive=1
    output = [0, 1, 3]
    exclusive=0
    reverse=1
    output = [6, 5, 3]
    exclusive=1
    reverse=1
    output = [5, 3, 0]

**Attributes**

* **exclusive**:
  If set to 1 will return exclusive sum in which the top element is
  not included. In other terms, if set to 1, the j-th output element
  would be the sum of the first (j-1) elements. Otherwise, it would be
  the sum of the first j elements.
* **reverse**:
  If set to 1 will perform the sums in reverse direction.

**Inputs**

* **x** (heterogeneous) - **T**:
  An input tensor that is to be processed.
* **axis** (heterogeneous) - **T2**:
  A 0-D tensor. Must be in the range [-rank(x), rank(x)-1]. Negative
  value means counting dimensions from the back.

**Outputs**

* **y** (heterogeneous) - **T**:
  Output tensor of the same type as 'x' with cumulative sums of the
  x's elements

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(int32),
  tensor(int64),
  tensor(uint32),
  tensor(uint64)
  ):
  Input can be of any tensor type.
* **T2** in (
  tensor(int32),
  tensor(int64)
  ):
  axis tensor can be int32 or int64 only
