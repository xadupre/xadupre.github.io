
.. _l-onnx-doc-BitShift:

========
BitShift
========

.. contents::
    :local:


.. _l-onnx-op-bitshift-11:

BitShift - 11
=============

**Version**

* **name**: `BitShift (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#BitShift>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Bitwise shift operator performs element-wise operation. For each input element, if the
 attribute &#34;direction&#34; is &#34;RIGHT&#34;, this operator moves its binary representation toward
 the right side so that the input value is effectively decreased. If the attribute &#34;direction&#34;
 is &#34;LEFT&#34;, bits of binary representation moves toward the left side, which results the
 increase of its actual value. The input X is the tensor to be shifted and another input
 Y specifies the amounts of shifting. For example, if &#34;direction&#34; is &#34;Right&#34;, X is [1, 4],
 and S is [1, 1], the corresponding output Z would be [0, 2]. If &#34;direction&#34; is &#34;LEFT&#34; with
 X=[1, 2] and S=[1, 2], the corresponding output Y would be [2, 8].

 Because this operator supports Numpy-style broadcasting, X&#39;s and Y&#39;s shapes are
 not necessarily identical.
This operator supports **multidirectional (i.e., Numpy-style) broadcasting**; for more details please check `Broadcasting in ONNX &lt;https://github.com/onnx/onnx/blob/master/docs/Broadcasting.md&gt;`_.

**Attributes**

* **direction** (required):
  Direction of moving bits. It can be either &#34;RIGHT&#34; (for right shift)
  or &#34;LEFT&#34; (for left shift).

**Inputs**

* **X** (heterogeneous) - **T**:
  First operand, input to be shifted.
* **Y** (heterogeneous) - **T**:
  Second operand, amounts of shift.

**Outputs**

* **Z** (heterogeneous) - **T**:
  Output tensor

**Type Constraints**

* **T** in (
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to integer tensors.

**Examples**

**_right_unit8**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;RIGHT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint8)
    y = np.array([1, 2, 3]).astype(np.uint8)
    z = x &gt;&gt; y  # expected output [8, 1, 0]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_right_uint8&#34;)

**_right_unit16**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;RIGHT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint16)
    y = np.array([1, 2, 3]).astype(np.uint16)
    z = x &gt;&gt; y  # expected output [8, 1, 0]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_right_uint16&#34;)

**_right_unit32**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;RIGHT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint32)
    y = np.array([1, 2, 3]).astype(np.uint32)
    z = x &gt;&gt; y  # expected output [8, 1, 0]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_right_uint32&#34;)

**_right_unit64**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;RIGHT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint64)
    y = np.array([1, 2, 3]).astype(np.uint64)
    z = x &gt;&gt; y  # expected output [8, 1, 0]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_right_uint64&#34;)

**_left_unit8**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;LEFT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint8)
    y = np.array([1, 2, 3]).astype(np.uint8)
    z = x &lt;&lt; y  # expected output [32, 16, 8]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_left_uint8&#34;)

**_left_unit16**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;LEFT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint16)
    y = np.array([1, 2, 3]).astype(np.uint16)
    z = x &lt;&lt; y  # expected output [32, 16, 8]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_left_uint16&#34;)

**_left_unit32**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;LEFT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint32)
    y = np.array([1, 2, 3]).astype(np.uint32)
    z = x &lt;&lt; y  # expected output [32, 16, 8]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_left_uint32&#34;)

**_left_unit64**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;BitShift&#34;, inputs=[&#34;x&#34;, &#34;y&#34;], outputs=[&#34;z&#34;], direction=&#34;LEFT&#34;
    )

    x = np.array([16, 4, 1]).astype(np.uint64)
    y = np.array([1, 2, 3]).astype(np.uint64)
    z = x &lt;&lt; y  # expected output [32, 16, 8]
    expect(node, inputs=[x, y], outputs=[z], name=&#34;test_bitshift_left_uint64&#34;)
