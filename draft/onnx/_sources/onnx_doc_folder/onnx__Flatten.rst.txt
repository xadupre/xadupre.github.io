
.. _l-onnx-doc-Flatten:

=======
Flatten
=======

.. contents::
    :local:


.. _l-onnx-op-flatten-13:

Flatten - 13
============

**Version**

* **name**: `Flatten (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Flatten>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Flattens the input tensor into a 2D matrix. If input tensor has shape
(d_0, d_1, ... d_n) then the output will have shape
(d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).

**Attributes**

* **axis**:
  Indicate up to which input dimensions (exclusive) should be
  flattened to the outer dimension of the output. The value for axis
  must be in the range [-r, r], where r is the rank of the input
  tensor. Negative value means counting dimensions from the back. When
  axis = 0, the shape of the output tensor is (1, (d_0 X d_1 ... d_n),
  where the shape of the input tensor is (d_0, d_1, ... d_n).

**Inputs**

* **input** (heterogeneous) - **T**:
  A tensor of rank >= axis.

**Outputs**

* **output** (heterogeneous) - **T**:
  A 2D tensor with the contents of the input tensor, with input
  dimensions up to axis flattened to the outer dimension of the output
  and remaining input dimensions flattened into the inner dimension of
  the output.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output to all tensor types.

**Examples**

**default**

::

    import numpy as np
    import onnx

    shape = (2, 3, 4, 5)
    a = np.random.random_sample(shape).astype(np.float32)

    for i in range(len(shape)):
        node = onnx.helper.make_node(
            "Flatten",
            inputs=["a"],
            outputs=["b"],
            axis=i,
        )

        new_shape = (1, -1) if i == 0 else (np.prod(shape[0:i]).astype(int), -1)
        b = np.reshape(a, new_shape)
        expect(node, inputs=[a], outputs=[b], name="test_flatten_axis" + str(i))

**_flatten_with_default_axis**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Flatten",
        inputs=["a"],
        outputs=["b"],  # Default value for axis: axis=1
    )

    shape = (5, 4, 3, 2)
    a = np.random.random_sample(shape).astype(np.float32)
    new_shape = (5, 24)
    b = np.reshape(a, new_shape)
    expect(node, inputs=[a], outputs=[b], name="test_flatten_default_axis")

**_flatten_negative_axis**

::

    import numpy as np
    import onnx

    shape = (2, 3, 4, 5)
    a = np.random.random_sample(shape).astype(np.float32)

    for i in range(-len(shape), 0):
        node = onnx.helper.make_node(
            "Flatten",
            inputs=["a"],
            outputs=["b"],
            axis=i,
        )

        new_shape = (np.prod(shape[0:i]).astype(int), -1)
        b = np.reshape(a, new_shape)
        expect(
            node,
            inputs=[a],
            outputs=[b],
            name="test_flatten_negative_axis" + str(abs(i)),
        )

.. toctree::
    diff_Flatten_11_13

.. _l-onnx-op-flatten-11:

Flatten - 11
============

**Version**

* **name**: `Flatten (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Flatten>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Flattens the input tensor into a 2D matrix. If input tensor has shape
(d_0, d_1, ... d_n) then the output will have shape
(d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).

**Attributes**

* **axis**:
  Indicate up to which input dimensions (exclusive) should be
  flattened to the outer dimension of the output. The value for axis
  must be in the range [-r, r], where r is the rank of the input
  tensor. Negative value means counting dimensions from the back. When
  axis = 0, the shape of the output tensor is (1, (d_0 X d_1 ... d_n),
  where the shape of the input tensor is (d_0, d_1, ... d_n).

**Inputs**

* **input** (heterogeneous) - **T**:
  A tensor of rank >= axis.

**Outputs**

* **output** (heterogeneous) - **T**:
  A 2D tensor with the contents of the input tensor, with input
  dimensions up to axis flattened to the outer dimension of the output
  and remaining input dimensions flattened into the inner dimension of
  the output.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output to all tensor types.

.. toctree::
    diff_Flatten_9_11

.. _l-onnx-op-flatten-9:

Flatten - 9
===========

**Version**

* **name**: `Flatten (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Flatten>`_
* **domain**: **main**
* **since_version**: **9**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 9**.

**Summary**

Flattens the input tensor into a 2D matrix. If input tensor has shape
(d_0, d_1, ... d_n) then the output will have shape
(d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).

**Attributes**

* **axis**:
  Indicate up to which input dimensions (exclusive) should be
  flattened to the outer dimension of the output. The value for axis
  must be in the range [0, R], where R is the rank of the input
  tensor. When axis = 0, the shape of the output tensor is (1, (d_0 X
  d_1 ... d_n), where the shape of the input tensor is (d_0, d_1, ...
  d_n).

**Inputs**

* **input** (heterogeneous) - **T**:
  A tensor of rank >= axis.

**Outputs**

* **output** (heterogeneous) - **T**:
  A 2D tensor with the contents of the input tensor, with input
  dimensions up to axis flattened to the outer dimension of the output
  and remaining input dimensions flattened into the inner dimension of
  the output.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output to all tensor types.

.. toctree::
    diff_Flatten_1_9

.. _l-onnx-op-flatten-1:

Flatten - 1
===========

**Version**

* **name**: `Flatten (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Flatten>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Flattens the input tensor into a 2D matrix. If input tensor has shape
(d_0, d_1, ... d_n) then the output will have shape
(d_0 X d_1 ... d_(axis-1), d_axis X d_(axis+1) ... X dn).

**Attributes**

* **axis**:
  Indicate up to which input dimensions (exclusive) should be
  flattened to the outer dimension of the output. The value for axis
  must be in the range [0, R], where R is the rank of the input
  tensor. When axis = 0, the shape of the output tensor is (1, (d_0 X
  d_1 ... d_n), where the shape of the input tensor is (d_0, d_1, ...
  d_n).

**Inputs**

* **input** (heterogeneous) - **T**:
  A tensor of rank >= axis.

**Outputs**

* **output** (heterogeneous) - **T**:
  A 2D tensor with the contents of the input tensor, with input
  dimensions up to axis flattened to the outer dimension of the output
  and remaining input dimensions flattened into the inner dimension of
  the output.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
