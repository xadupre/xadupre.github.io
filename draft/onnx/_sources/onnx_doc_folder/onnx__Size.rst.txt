
.. _l-onnx-doc-Size:

====
Size
====

.. contents::
    :local:


.. _l-onnx-op-size-13:

Size - 13
=========

**Version**

* **name**: `Size (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Size>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Takes a tensor as input and outputs a int64 scalar that equals to the total number of elements of the input tensor.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **size** (heterogeneous) - **T1**:
  Total number of elements of the input tensor

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Input tensor can be of arbitrary type.
* **T1** in (
  tensor(int64)
  ):
  Constrain output to int64 tensor, which should be a scalar though.

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Size",
        inputs=["x"],
        outputs=["y"],
    )

    x = np.array(
        [
            [1, 2, 3],
            [4, 5, 6],
        ]
    ).astype(np.float32)
    y = np.array(6).astype(np.int64)

    expect(node, inputs=[x], outputs=[y], name="test_size_example")

    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.array(x.size).astype(np.int64)

    expect(node, inputs=[x], outputs=[y], name="test_size")

.. toctree::
    text_diff_Size_1_13

.. _l-onnx-op-size-1:

Size - 1
========

**Version**

* **name**: `Size (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Size>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Takes a tensor as input and outputs a int64 scalar that equals to the total number of elements of the input tensor.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **size** (heterogeneous) - **T1**:
  Total number of elements of the input tensor

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Input tensor can be of arbitrary type.
* **T1** in (
  tensor(int64)
  ):
  Constrain output to int64 tensor, which should be a scalar though.
