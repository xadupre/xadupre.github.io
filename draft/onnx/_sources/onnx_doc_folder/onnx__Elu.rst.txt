
.. _l-onnx-doc-Elu:

===
Elu
===

.. contents::
    :local:


.. _l-onnx-op-elu-6:

Elu - 6
=======

**Version**

* **name**: `Elu (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Elu>`_
* **domain**: **main**
* **since_version**: **6**
* **function**: True
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 6**.

**Summary**

Elu takes one input data (Tensor<T>) and produces one output data
(Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x <
0`, `f(x) = x for x >= 0`., is applied to the tensor elementwise.

**Attributes**

* **alpha**:
  Coefficient of ELU.

**Inputs**

* **X** (heterogeneous) - **T**:
  1D input tensor

**Outputs**

* **Y** (heterogeneous) - **T**:
  1D output tensor

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.

**Examples**

**default**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node("Elu", inputs=["x"], outputs=["y"], alpha=2.0)

    x = np.array([-1, 0, 1]).astype(np.float32)
    # expected output [-1.2642411, 0., 1.]
    y = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0
    expect(node, inputs=[x], outputs=[y], name="test_elu_example")

    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * 2.0
    expect(node, inputs=[x], outputs=[y], name="test_elu")

**_elu_default**

::

    import numpy as np
    import onnx

    default_alpha = 1.0
    node = onnx.helper.make_node(
        "Elu",
        inputs=["x"],
        outputs=["y"],
    )
    x = np.random.randn(3, 4, 5).astype(np.float32)
    y = np.clip(x, 0, np.inf) + (np.exp(np.clip(x, -np.inf, 0)) - 1) * default_alpha
    expect(node, inputs=[x], outputs=[y], name="test_elu_default")

.. toctree::

    text_diff_Elu_1_6

.. _l-onnx-op-elu-1:

Elu - 1
=======

**Version**

* **name**: `Elu (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Elu>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: False

This version of the operator has been available
**since version 1**.

**Summary**

Elu takes one input data (Tensor<T>) and produces one output data
(Tensor<T>) where the function `f(x) = alpha * (exp(x) - 1.) for x <
0`, `f(x) = x for x >= 0`., is applied to the tensor elementwise.

**Attributes**

* **alpha**:
  Coefficient of ELU default to 1.0.
* **consumed_inputs**:
  legacy optimization attribute.

**Inputs**

* **X** (heterogeneous) - **T**:
  1D input tensor

**Outputs**

* **Y** (heterogeneous) - **T**:
  1D input tensor

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16)
  ):
  Constrain input and output types to float tensors.
