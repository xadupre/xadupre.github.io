
.. _l-onnx-doc-Unsqueeze:

=========
Unsqueeze
=========

.. contents::
    :local:


.. _l-onnx-op-unsqueeze-13:

Unsqueeze - 13
==============

**Version**

* **name**: `Unsqueeze (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Unsqueeze>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Insert single-dimensional entries to the shape of an input tensor (`data`).
Takes one required input `axes` - which contains a list of dimension indices and this operator will insert a dimension of value `1` into the corresponding index of the output tensor (`expanded`).

For example:
  Given an input tensor (`data`) of shape [3, 4, 5], then
  Unsqueeze(data, axes=[0, 4]) outputs a tensor (`expanded`) containing same data as `data` but with shape [1, 3, 4, 5, 1].

The input `axes` should not contain any duplicate entries. It is an error if it contains duplicates.
The rank of the output tensor (`output_rank`) is the rank of the input tensor (`data`) plus the number of values in `axes`.
Each value in `axes` should be within the (inclusive) range [-output_rank , output_rank - 1].
The order of values in `axes` does not matter and can come in any order.

**Inputs**

* **data** (heterogeneous) - **T**:
  Original tensor
* **axes** (heterogeneous) - **tensor(int64)**:
  List of integers indicating the dimensions to be inserted. Negative
  value means counting dimensions from the back. Accepted range is
  [-r, r-1] where r = rank(expanded).

**Outputs**

* **expanded** (heterogeneous) - **T**:
  Reshaped tensor with same data as input.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

**Examples**

**_unsqueeze_one_axis**

::

    import numpy as np
    import onnx

    x = np.random.randn(3, 4, 5).astype(np.float32)

    for i in range(x.ndim):
        axes = np.array([i]).astype(np.int64)
        node = onnx.helper.make_node(
            "Unsqueeze",
            inputs=["x", "axes"],
            outputs=["y"],
        )
        y = np.expand_dims(x, axis=i)

        expect(
            node,
            inputs=[x, axes],
            outputs=[y],
            name="test_unsqueeze_axis_" + str(i),
        )

**_unsqueeze_two_axes**

::

    import numpy as np
    import onnx

    x = np.random.randn(3, 4, 5).astype(np.float32)
    axes = np.array([1, 4]).astype(np.int64)

    node = onnx.helper.make_node(
        "Unsqueeze",
        inputs=["x", "axes"],
        outputs=["y"],
    )
    y = np.expand_dims(x, axis=1)
    y = np.expand_dims(y, axis=4)

    expect(node, inputs=[x, axes], outputs=[y], name="test_unsqueeze_two_axes")

**_unsqueeze_three_axes**

::

    import numpy as np
    import onnx

    x = np.random.randn(3, 4, 5).astype(np.float32)
    axes = np.array([2, 4, 5]).astype(np.int64)

    node = onnx.helper.make_node(
        "Unsqueeze",
        inputs=["x", "axes"],
        outputs=["y"],
    )
    y = np.expand_dims(x, axis=2)
    y = np.expand_dims(y, axis=4)
    y = np.expand_dims(y, axis=5)

    expect(node, inputs=[x, axes], outputs=[y], name="test_unsqueeze_three_axes")

**_unsqueeze_unsorted_axes**

::

    import numpy as np
    import onnx

    x = np.random.randn(3, 4, 5).astype(np.float32)
    axes = np.array([5, 4, 2]).astype(np.int64)

    node = onnx.helper.make_node(
        "Unsqueeze",
        inputs=["x", "axes"],
        outputs=["y"],
    )
    y = np.expand_dims(x, axis=2)
    y = np.expand_dims(y, axis=4)
    y = np.expand_dims(y, axis=5)

    expect(node, inputs=[x, axes], outputs=[y], name="test_unsqueeze_unsorted_axes")

**_unsqueeze_negative_axes**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        "Unsqueeze",
        inputs=["x", "axes"],
        outputs=["y"],
    )
    x = np.random.randn(1, 3, 1, 5).astype(np.float32)
    axes = np.array([-2]).astype(np.int64)
    y = np.expand_dims(x, axis=-2)
    expect(node, inputs=[x, axes], outputs=[y], name="test_unsqueeze_negative_axes")

.. toctree::

    text_diff_Unsqueeze_11_13

.. _l-onnx-op-unsqueeze-11:

Unsqueeze - 11
==============

**Version**

* **name**: `Unsqueeze (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Unsqueeze>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Insert single-dimensional entries to the shape of an input tensor (`data`).
Takes one required argument `axes` - which contains a list of dimension indices and this operator will insert a dimension of value `1` into the corresponding index of the output tensor (`expanded`).

For example:
  Given an input tensor (`data`) of shape [3, 4, 5], then
  Unsqueeze(data, axes=[0, 4]) outputs a tensor (`expanded`) containing same data as `data` but with shape [1, 3, 4, 5, 1].

The attribute `axes` should not contain any duplicate entries. It is an error if it contains duplicates.
The rank of the output tensor (`output_rank`) is the rank of the input tensor (`data`) plus the number of values in `axes`.
Each value in `axes` should be within the (inclusive) range [-output_rank , output_rank - 1].
The order of values in `axes` does not matter and can come in any order.

**Attributes**

* **axes** (required):
  List of integers indicating the dimensions to be inserted. Negative
  value means counting dimensions from the back. Accepted range is
  [-r, r-1] where r = rank(expanded).

**Inputs**

* **data** (heterogeneous) - **T**:
  Original tensor

**Outputs**

* **expanded** (heterogeneous) - **T**:
  Reshaped tensor with same data as input.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.

.. toctree::

    text_diff_Unsqueeze_1_11

.. _l-onnx-op-unsqueeze-1:

Unsqueeze - 1
=============

**Version**

* **name**: `Unsqueeze (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Unsqueeze>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Insert single-dimensional entries to the shape of a tensor.
Takes one required argument `axes`, a list of dimensions that will be inserted.
Dimension indices in `axes` are as seen in the output tensor. For example:
  Given a tensor such that tensor with shape [3, 4, 5], then
  Unsqueeze(tensor, axes=[0, 4]) has shape [1, 3, 4, 5, 1]

**Attributes**

* **axes** (required):
  List of non-negative integers, indicate the dimensions to be
  inserted

**Inputs**

* **data** (heterogeneous) - **T**:
  Original tensor

**Outputs**

* **expanded** (heterogeneous) - **T**:
  Reshaped tensor with same data as input.

**Type Constraints**

* **T** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  Constrain input and output types to all tensor types.
