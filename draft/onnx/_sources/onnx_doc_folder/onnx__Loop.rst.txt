
.. _l-onnx-doc-Loop:

====
Loop
====

.. contents::
    :local:


.. _l-onnx-op-loop-16:

Loop - 16
=========

**Version**

* **name**: `Loop (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Loop>`_
* **domain**: **main**
* **since_version**: **16**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 16**.

**Summary**

Generic Looping construct. This loop has multiple termination conditions:

1) Trip count. Iteration count specified at runtime. Set by
   specifying the input M. Optional. Set to empty string to omit.
   Note that a static trip count (specified at graph construction time) can be
   specified by passing in a constant node for input M.
2) Loop termination condition. This is an input to the op that determines
   whether to run the first iteration and also a loop-carried dependency for
   the body graph. The body graph must yield a value for the condition variable,
   whether this input is provided or not.

This table summarizes the operating modes of this operator with equivalent
C-style code:

    Operator inputs defined as (max_trip_count, condition_var).

    input ("", ""):
        for (int i=0; ; ++i) {
          cond = ... // Note this value is ignored, but is required in the body
        }

    input ("", cond) // Note this is analogous to a while loop
        bool cond = ...;
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input ("", 1) // Note this is analogous to a do-while loop
        bool cond = true
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input (trip_count, "") // Note this is analogous to a for loop
        int trip_count = ...
        for (int i=0; i < trip_count; ++i) {
          cond = ...; // ignored
        }

    input (trip_count, cond)
        int trip_count = ...;
        bool cond = ...;
        for (int i=0; i < trip_count && cond; ++i) {
          cond = ...;
        }

*Sample usage - cond as well as trip count*

    graph predict-net {
      %a = Constant[value = <Scalar Tensor [3]>]()
      %b = Constant[value = <Scalar Tensor [6]>]()
      %keepgoing = Constant[value = <Scalar Tensor [1]>]()
      %max_trip_count = Constant[value = <Scalar Tensor [10]>]()
      %keepgoing_out, %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing, %b)
      return
    }

    graph body-net (
      %i[INT32, scalar]           // iteration number
      %keepgoing_in[BOOL, scalar] // incoming loop-termination-condition; not used
      %b_in[INT32, scalar]        // incoming value of loop-carried-dependency b
    ) {
      %my_local = Add(%a, %b_in)
      %b_out = Sub(%a, %b_in) // outgoing value of loop-carried-dependency b
      %keepgoing_out = Greater(%my_local, %b_out) // outgoing loop-termination-condition
      %user_defined_val = Add(%b_in, %b_in) // scan-output value to be accumulated
      return %keepgoing_out, %b_out, %user_defined_val
    }

*Sample equivalent C code*

    {
      /* User-defined code (enclosing scope) */
      int a = 3, b = 6;
      bool keepgoing = true; // Analogous to input cond
      /* End user-defined code */

      /* Implicitly-defined code */
      const int max_trip_count = 10; // Analogous to input M
      int user_defined_vals[]; // Imagine this is resizable
      /* End implicitly-defined code */
      /* initialize loop-carried variables and scan-output variables */
      bool keepgoing_out = keepgoing
      int b_out = b

      for (int i=0; i < max_trip_count && keepgoing_out; ++i) {
        /* Implicitly-defined code: bind actual parameter values
           to formal parameter variables of loop-body */
        bool keepgoing_in = keepgoing_out;
        bool b_in = b_out;

        /* User-defined code (loop body) */
        int my_local = a + b_in; // Reading value "a" from the enclosing scope is fine
        b_out = a - b_in;
        keepgoing_out = my_local > b_out;
        user_defined_val = b_in + b_in; // b_in and b_out are different variables
        /* End user-defined code */

        /* Implicitly defined-code */
        user_defined_vals[i] = user_defined_val // accumulate scan-output values
      }
      // int t = my_local; // Can't do this. my_local is not accessible here.

      // The values below are bound to the output variables of the loop and therefore accessible
      // b_out; user_defined_vals; keepgoing_out;
    }

There are several things of note in this code snippet:

1) Values from the enclosing scope (i.e. variable "a" here) are in scope and can
   be referenced in the inputs of the loop.
2) Any values computed in the loop body that needs to be used in a subsequent
   iteration or after the loop are modelled using a pair of variables in the loop-body,
   consisting of an input variable (eg., b_in) and an output variable (eg., b_out).
   These are referred to as loop-carried dependences. The loop operation node
   supplies the input value of the input variable for the first iteration, and
   returns the output value of the output variable produced by the final
   iteration.
3) Scan_output variables are used to implicitly concatenate values computed across
   all the iterations. In the above example, the value of user_defined_val computed
   over all iterations are concatenated and returned as the value of user_defined_vals
   after the loop.
4) Values created in the body cannot be accessed in the enclosing scope,
   except using the mechanism described above.

Note that the semantics of this op support "diagonal" or "wavefront" execution.
(See Step 3 here for an example:
https://devblogs.nvidia.com/optimizing-recurrent-neural-networks-cudnn-5/).
Frontends should emit multi-layer RNNs as a series of While operators (with
time being the inner looping dimension), with each successive layer consuming
the scan_outputs from the previous layer, possibly going through several
point-wise operators (e.g. dropout, residual connections, linear layer).

The input/output of subgraph (produced by loop node) matching is based on order instead of name. The implementation will figure out the names based on this order.

**Attributes**

* **body** (required):
  The graph run each iteration. It has 2+N inputs: (iteration_num,
  condition, loop carried dependencies...). It has 1+N+K outputs:
  (condition, loop carried dependencies..., scan_outputs...). Each
  scan_output is created by concatenating the value of the specified
  output value at the end of each iteration of the loop. It is an
  error if the dimensions or data type of these scan_outputs change
  across loop iterations.

**Inputs**

Between 2 and 2147483647 inputs.

* **M** (optional, heterogeneous) - **I**:
  A maximum trip-count for the loop specified at runtime. Optional.
  Pass empty string to skip.
* **cond** (optional, heterogeneous) - **B**:
  A boolean termination condition. Optional. Pass empty string to
  skip.
* **v_initial** (variadic) - **V**:
  The initial values of any loop-carried dependencies (values that
  change across loop iterations)

**Outputs**

Between 1 and 2147483647 outputs.

* **v_final_and_scan_outputs** (variadic) - **V**:
  Final N loop carried dependency values then K scan_outputs. Scan
  outputs must be Tensors.

**Type Constraints**

* **V** in (
  optional(seq(tensor(bfloat16))),
  optional(seq(tensor(bool))),
  optional(seq(tensor(complex128))),
  optional(seq(tensor(complex64))),
  optional(seq(tensor(double))),
  optional(seq(tensor(float))),
  optional(seq(tensor(float16))),
  optional(seq(tensor(int16))),
  optional(seq(tensor(int32))),
  optional(seq(tensor(int64))),
  optional(seq(tensor(int8))),
  optional(seq(tensor(string))),
  optional(seq(tensor(uint16))),
  optional(seq(tensor(uint32))),
  optional(seq(tensor(uint64))),
  optional(seq(tensor(uint8))),
  optional(tensor(bfloat16)),
  optional(tensor(bool)),
  optional(tensor(complex128)),
  optional(tensor(complex64)),
  optional(tensor(double)),
  optional(tensor(float)),
  optional(tensor(float16)),
  optional(tensor(int16)),
  optional(tensor(int32)),
  optional(tensor(int64)),
  optional(tensor(int8)),
  optional(tensor(string)),
  optional(tensor(uint16)),
  optional(tensor(uint32)),
  optional(tensor(uint64)),
  optional(tensor(uint8)),
  seq(tensor(bfloat16)),
  seq(tensor(bool)),
  seq(tensor(complex128)),
  seq(tensor(complex64)),
  seq(tensor(double)),
  seq(tensor(float)),
  seq(tensor(float16)),
  seq(tensor(int16)),
  seq(tensor(int32)),
  seq(tensor(int64)),
  seq(tensor(int8)),
  seq(tensor(string)),
  seq(tensor(uint16)),
  seq(tensor(uint32)),
  seq(tensor(uint64)),
  seq(tensor(uint8)),
  tensor(bfloat16),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  All Tensor, Sequence(Tensor), Optional(Tensor), and
  Optional(Sequence(Tensor)) types
* **I** in (
  tensor(int64)
  ):
  tensor of int64, which should be a scalar.
* **B** in (
  tensor(bool)
  ):
  tensor of bool, which should be a scalar.

**Examples**

**_loop_11**

::

    import numpy as np
    import onnx

    # Given a tensor x of values [x1, ..., xN], and initial tensor y
    # sum up its elements using a scan
    # returning the final state (y+x1+x2+...+xN) as well the scan_output
    # [y+x1, y+x1+x2, ..., y+x1+x2+...+xN]

    y_in = onnx.helper.make_tensor_value_info("y_in", onnx.TensorProto.FLOAT, [1])
    y_out = onnx.helper.make_tensor_value_info("y_out", onnx.TensorProto.FLOAT, [1])
    scan_out = onnx.helper.make_tensor_value_info(
        "scan_out", onnx.TensorProto.FLOAT, [1]
    )
    cond_in = onnx.helper.make_tensor_value_info(
        "cond_in", onnx.TensorProto.BOOL, []
    )
    cond_out = onnx.helper.make_tensor_value_info(
        "cond_out", onnx.TensorProto.BOOL, []
    )
    iter_count = onnx.helper.make_tensor_value_info(
        "iter_count", onnx.TensorProto.INT64, []
    )

    x = np.array([1, 2, 3, 4, 5]).astype(np.float32)
    y = np.array([-2]).astype(np.float32)

    x_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["x"],
        value=onnx.helper.make_tensor(
            name="const_tensor_x",
            data_type=onnx.TensorProto.FLOAT,
            dims=x.shape,
            vals=x.flatten().astype(float),
        ),
    )

    one_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["one"],
        value=onnx.helper.make_tensor(
            name="const_tensor_one",
            data_type=onnx.TensorProto.INT64,
            dims=(),
            vals=[1],
        ),
    )

    i_add_node = onnx.helper.make_node(
        "Add", inputs=["iter_count", "one"], outputs=["end"]
    )

    start_unsqueeze_node = onnx.helper.make_node(
        "Unsqueeze", inputs=["iter_count"], outputs=["slice_start"], axes=[0]
    )

    end_unsqueeze_node = onnx.helper.make_node(
        "Unsqueeze", inputs=["end"], outputs=["slice_end"], axes=[0]
    )

    slice_node = onnx.helper.make_node(
        "Slice", inputs=["x", "slice_start", "slice_end"], outputs=["slice_out"]
    )

    y_add_node = onnx.helper.make_node(
        "Add", inputs=["y_in", "slice_out"], outputs=["y_out"]
    )

    identity_node = onnx.helper.make_node(
        "Identity", inputs=["cond_in"], outputs=["cond_out"]
    )

    scan_identity_node = onnx.helper.make_node(
        "Identity", inputs=["y_out"], outputs=["scan_out"]
    )

    loop_body = onnx.helper.make_graph(
        [
            identity_node,
            x_const_node,
            one_const_node,
            i_add_node,
            start_unsqueeze_node,
            end_unsqueeze_node,
            slice_node,
            y_add_node,
            scan_identity_node,
        ],
        "loop_body",
        [iter_count, cond_in, y_in],
        [cond_out, y_out, scan_out],
    )

    node = onnx.helper.make_node(
        "Loop",
        inputs=["trip_count", "cond", "y"],
        outputs=["res_y", "res_scan"],
        body=loop_body,
    )

    trip_count = np.array(5).astype(np.int64)
    res_y = np.array([13]).astype(np.float32)
    cond = np.array(1).astype(bool)
    res_scan = np.array([-1, 1, 4, 8, 13]).astype(np.float32).reshape((5, 1))
    expect(
        node,
        inputs=[trip_count, cond, y],
        outputs=[res_y, res_scan],
        name="test_loop11",
        opset_imports=[onnx.helper.make_opsetid("", 11)],
    )

**_loop_13**

::

    import numpy as np
    import onnx

    # Given a tensor x of values [x1, ..., xN],
    # Return a sequence of tensors of
    #   [[x1], [x1, x2], ..., [x1, ..., xN]]

    seq_in = onnx.helper.make_tensor_sequence_value_info(
        "seq_in", onnx.TensorProto.FLOAT, None
    )
    seq_out = onnx.helper.make_tensor_sequence_value_info(
        "seq_out", onnx.TensorProto.FLOAT, None
    )
    cond_in = onnx.helper.make_tensor_value_info(
        "cond_in", onnx.TensorProto.BOOL, []
    )
    cond_out = onnx.helper.make_tensor_value_info(
        "cond_out", onnx.TensorProto.BOOL, []
    )
    iter_count = onnx.helper.make_tensor_value_info(
        "iter_count", onnx.TensorProto.INT64, []
    )

    x = np.array([1, 2, 3, 4, 5]).astype(np.float32)

    x_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["x"],
        value=onnx.helper.make_tensor(
            name="const_tensor_x",
            data_type=onnx.TensorProto.FLOAT,
            dims=x.shape,
            vals=x.flatten().astype(float),
        ),
    )

    one_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["one"],
        value=onnx.helper.make_tensor(
            name="const_tensor_one",
            data_type=onnx.TensorProto.INT64,
            dims=(),
            vals=[1],
        ),
    )

    zero_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["slice_start"],
        value=onnx.helper.make_tensor(
            name="const_tensor_zero",
            data_type=onnx.TensorProto.INT64,
            dims=(1,),
            vals=[0],
        ),
    )

    axes_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["axes"],
        value=onnx.helper.make_tensor(
            name="const_tensor_axes",
            data_type=onnx.TensorProto.INT64,
            dims=(),
            vals=[0],
        ),
    )

    add_node = onnx.helper.make_node(
        "Add", inputs=["iter_count", "one"], outputs=["end"]
    )

    end_unsqueeze_node = onnx.helper.make_node(
        "Unsqueeze", inputs=["end", "axes"], outputs=["slice_end"]
    )

    slice_node = onnx.helper.make_node(
        "Slice", inputs=["x", "slice_start", "slice_end"], outputs=["slice_out"]
    )

    insert_node = onnx.helper.make_node(
        "SequenceInsert", inputs=["seq_in", "slice_out"], outputs=["seq_out"]
    )

    identity_node = onnx.helper.make_node(
        "Identity", inputs=["cond_in"], outputs=["cond_out"]
    )

    loop_body = onnx.helper.make_graph(
        [
            identity_node,
            x_const_node,
            one_const_node,
            zero_const_node,
            add_node,
            axes_node,
            end_unsqueeze_node,
            slice_node,
            insert_node,
        ],
        "loop_body",
        [iter_count, cond_in, seq_in],
        [cond_out, seq_out],
    )

    node = onnx.helper.make_node(
        "Loop",
        inputs=["trip_count", "cond", "seq_empty"],
        outputs=["seq_res"],
        body=loop_body,
    )

    trip_count = np.array(5).astype(np.int64)
    seq_empty: List[Any] = []
    seq_res = [x[: int(i)] for i in x]
    cond = np.array(1).astype(bool)
    expect(
        node,
        inputs=[trip_count, cond, seq_empty],
        outputs=[seq_res],
        name="test_loop13_seq",
        opset_imports=[onnx.helper.make_opsetid("", 13)],
        input_type_protos=[
            onnx.helper.make_tensor_type_proto(
                onnx.TensorProto.INT64, trip_count.shape
            ),
            onnx.helper.make_tensor_type_proto(onnx.TensorProto.BOOL, cond.shape),
            onnx.helper.make_sequence_type_proto(
                onnx.helper.make_tensor_type_proto(onnx.TensorProto.FLOAT, [])
            ),
        ],
    )

**_loop_16_none**

::

    import numpy as np
    import onnx

    # Given a tensor sequence of values [x1, ..., xN], and an initial optional sequence of tensors [x0],
    # Return a concatenated sequence of tensors of
    #   [x0, [x1], [x1, x2], ..., [x1, ..., xN]]

    ten_in_tp = onnx.helper.make_tensor_type_proto(onnx.TensorProto.FLOAT, [])
    seq_in_tp = onnx.helper.make_sequence_type_proto(ten_in_tp)
    opt_in_tp = onnx.helper.make_optional_type_proto(seq_in_tp)
    opt_in = onnx.helper.make_value_info("opt_seq_in", opt_in_tp)
    seq_out = onnx.helper.make_tensor_sequence_value_info(
        "seq_out", onnx.TensorProto.FLOAT, []
    )
    cond_in = onnx.helper.make_tensor_value_info(
        "cond_in", onnx.TensorProto.BOOL, []
    )
    cond_out = onnx.helper.make_tensor_value_info(
        "cond_out", onnx.TensorProto.BOOL, []
    )
    iter_count = onnx.helper.make_tensor_value_info(
        "iter_count", onnx.TensorProto.INT64, []
    )

    x0 = np.array(0).astype(np.float32)
    x = np.array([1, 2, 3, 4, 5]).astype(np.float32)

    optional_has_elem_node = onnx.helper.make_node(
        "OptionalHasElement", inputs=["opt_seq_in"], outputs=["optional_has_elem"]
    )

    optional_is_none = onnx.helper.make_node(
        "Not", inputs=["optional_has_elem"], outputs=["optional_is_none"]
    )

    optional_get_elem = onnx.helper.make_node(
        "OptionalGetElement", inputs=["opt_seq_in"], outputs=["seq_in"]
    )

    constant_in = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["constant_in"],
        value=onnx.helper.make_tensor(
            name="const_tensor", data_type=onnx.TensorProto.FLOAT, dims=(), vals=[0]
        ),
    )

    seq_const_in = onnx.helper.make_node(
        "SequenceConstruct", inputs=["constant_in"], outputs=["init_seq_in"]
    )

    then_seq_out = onnx.helper.make_tensor_sequence_value_info(
        "init_seq_in", onnx.TensorProto.FLOAT, []
    )
    then_body = onnx.helper.make_graph(
        [constant_in, seq_const_in], "then_body", [], [then_seq_out]
    )

    else_seq_out = onnx.helper.make_tensor_sequence_value_info(
        "seq_in", onnx.TensorProto.FLOAT, []
    )
    else_body = onnx.helper.make_graph(
        [optional_get_elem], "else_body", [], [else_seq_out]
    )

    if_node = onnx.helper.make_node(
        "If",
        inputs=["optional_is_none"],
        outputs=["sequence"],
        then_branch=then_body,
        else_branch=else_body,
    )

    x_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["x"],
        value=onnx.helper.make_tensor(
            name="const_tensor_x",
            data_type=onnx.TensorProto.FLOAT,
            dims=x.shape,
            vals=x.flatten().astype(float),
        ),
    )

    one_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["one"],
        value=onnx.helper.make_tensor(
            name="const_tensor_one",
            data_type=onnx.TensorProto.INT64,
            dims=(),
            vals=[1],
        ),
    )

    zero_const_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["slice_start"],
        value=onnx.helper.make_tensor(
            name="const_tensor_zero",
            data_type=onnx.TensorProto.INT64,
            dims=(1,),
            vals=[0],
        ),
    )

    axes_node = onnx.helper.make_node(
        "Constant",
        inputs=[],
        outputs=["axes"],
        value=onnx.helper.make_tensor(
            name="const_tensor_axes",
            data_type=onnx.TensorProto.INT64,
            dims=(),
            vals=[0],
        ),
    )

    add_node = onnx.helper.make_node(
        "Add", inputs=["iter_count", "one"], outputs=["end"]
    )

    end_unsqueeze_node = onnx.helper.make_node(
        "Unsqueeze", inputs=["end", "axes"], outputs=["slice_end"]
    )

    slice_node = onnx.helper.make_node(
        "Slice", inputs=["x", "slice_start", "slice_end"], outputs=["slice_out"]
    )

    insert_node = onnx.helper.make_node(
        "SequenceInsert", inputs=["sequence", "slice_out"], outputs=["seq_out"]
    )

    identity_node = onnx.helper.make_node(
        "Identity", inputs=["cond_in"], outputs=["cond_out"]
    )

    loop_body = onnx.helper.make_graph(
        [
            identity_node,
            optional_has_elem_node,
            optional_is_none,
            if_node,
            x_const_node,
            one_const_node,
            zero_const_node,
            add_node,
            axes_node,
            end_unsqueeze_node,
            slice_node,
            insert_node,
        ],
        "loop_body",
        [iter_count, cond_in, opt_in],
        [cond_out, seq_out],
    )

    node = onnx.helper.make_node(
        "Loop",
        inputs=["trip_count", "cond", "opt_seq"],
        outputs=["seq_res"],
        body=loop_body,
    )

    trip_count = np.array(5).astype(np.int64)
    cond = np.array(1).astype(bool)
    seq_res = compute_loop_outputs(x, [x0], trip_count)
    opt_seq_in: List[Any] = [x0]
    expect(
        node,
        inputs=[trip_count, cond, opt_seq_in],
        outputs=[seq_res],
        name="test_loop16_seq_none",
        opset_imports=[onnx.helper.make_opsetid("", 16)],
        input_type_protos=[
            onnx.helper.make_tensor_type_proto(
                onnx.TensorProto.INT64, trip_count.shape
            ),
            onnx.helper.make_tensor_type_proto(onnx.TensorProto.BOOL, cond.shape),
            opt_in_tp,
        ],
    )

.. toctree::

    text_diff_Loop_13_16

.. _l-onnx-op-loop-13:

Loop - 13
=========

**Version**

* **name**: `Loop (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Loop>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Generic Looping construct. This loop has multiple termination conditions:

1) Trip count. Iteration count specified at runtime. Set by
   specifying the input M. Optional. Set to empty string to omit.
   Note that a static trip count (specified at graph construction time) can be
   specified by passing in a constant node for input M.
2) Loop termination condition. This is an input to the op that determines
   whether to run the first iteration and also a loop-carried dependency for
   the body graph. The body graph must yield a value for the condition variable,
   whether this input is provided or not.

This table summarizes the operating modes of this operator with equivalent
C-style code:

    Operator inputs defined as (max_trip_count, condition_var).

    input ("", ""):
        for (int i=0; ; ++i) {
          cond = ... // Note this value is ignored, but is required in the body
        }

    input ("", cond) // Note this is analogous to a while loop
        bool cond = ...;
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input ("", 1) // Note this is analogous to a do-while loop
        bool cond = true
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input (trip_count, "") // Note this is analogous to a for loop
        int trip_count = ...
        for (int i=0; i < trip_count; ++i) {
          cond = ...; // ignored
        }

    input (trip_count, cond)
        int trip_count = ...;
        bool cond = ...;
        for (int i=0; i < trip_count && cond; ++i) {
          cond = ...;
        }

*Sample usage - cond as well as trip count*

    graph predict-net {
      %a = Constant[value = <Scalar Tensor [3]>]()
      %b = Constant[value = <Scalar Tensor [6]>]()
      %keepgoing = Constant[value = <Scalar Tensor [1]>]()
      %max_trip_count = Constant[value = <Scalar Tensor [10]>]()
      %keepgoing_out, %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing, %b)
      return
    }

    graph body-net (
      %i[INT32, scalar]           // iteration number
      %keepgoing_in[BOOL, scalar] // incoming loop-termination-condition; not used
      %b_in[INT32, scalar]        // incoming value of loop-carried-dependency b
    ) {
      %my_local = Add(%a, %b_in)
      %b_out = Sub(%a, %b_in) // outgoing value of loop-carried-dependency b
      %keepgoing_out = Greater(%my_local, %b_out) // outgoing loop-termination-condition
      %user_defined_val = Add(%b_in, %b_in) // scan-output value to be accumulated
      return %keepgoing_out, %b_out, %user_defined_val
    }

*Sample equivalent C code*

    {
      /* User-defined code (enclosing scope) */
      int a = 3, b = 6;
      bool keepgoing = true; // Analogous to input cond
      /* End user-defined code */

      /* Implicitly-defined code */
      const int max_trip_count = 10; // Analogous to input M
      int user_defined_vals[]; // Imagine this is resizable
      /* End implicitly-defined code */
      /* initialize loop-carried variables and scan-output variables */
      bool keepgoing_out = keepgoing
      int b_out = b

      for (int i=0; i < max_trip_count && keepgoing_out; ++i) {
        /* Implicitly-defined code: bind actual parameter values
           to formal parameter variables of loop-body */
        bool keepgoing_in = keepgoing_out;
        bool b_in = b_out;

        /* User-defined code (loop body) */
        int my_local = a + b_in; // Reading value "a" from the enclosing scope is fine
        b_out = a - b_in;
        keepgoing_out = my_local > b_out;
        user_defined_val = b_in + b_in; // b_in and b_out are different variables
        /* End user-defined code */

        /* Implicitly defined-code */
        user_defined_vals[i] = user_defined_val // accumulate scan-output values
      }
      // int t = my_local; // Can't do this. my_local is not accessible here.

      // The values below are bound to the output variables of the loop and therefore accessible
      // b_out; user_defined_vals; keepgoing_out;
    }

There are several things of note in this code snippet:

1) Values from the enclosing scope (i.e. variable "a" here) are in scope and can
   be referenced in the inputs of the loop.
2) Any values computed in the loop body that needs to be used in a subsequent
   iteration or after the loop are modelled using a pair of variables in the loop-body,
   consisting of an input variable (eg., b_in) and an output variable (eg., b_out).
   These are referred to as loop-carried dependences. The loop operation node
   supplies the input value of the input variable for the first iteration, and
   returns the output value of the output variable produced by the final
   iteration.
3) Scan_output variables are used to implicitly concatenate values computed across
   all the iterations. In the above example, the value of user_defined_val computed
   over all iterations are concatenated and returned as the value of user_defined_vals
   after the loop.
4) Values created in the body cannot be accessed in the enclosing scope,
   except using the mechanism described above.

Note that the semantics of this op support "diagonal" or "wavefront" execution.
(See Step 3 here for an example:
https://devblogs.nvidia.com/optimizing-recurrent-neural-networks-cudnn-5/).
Frontends should emit multi-layer RNNs as a series of While operators (with
time being the inner looping dimension), with each successive layer consuming
the scan_outputs from the previous layer, possibly going through several
point-wise operators (e.g. dropout, residual connections, linear layer).

The input/output of subgraph (produced by loop node) matching is based on order instead of name. The implementation will figure out the names based on this order.

**Attributes**

* **body** (required):
  The graph run each iteration. It has 2+N inputs: (iteration_num,
  condition, loop carried dependencies...). It has 1+N+K outputs:
  (condition, loop carried dependencies..., scan_outputs...). Each
  scan_output is created by concatenating the value of the specified
  output value at the end of each iteration of the loop. It is an
  error if the dimensions or data type of these scan_outputs change
  across loop iterations.

**Inputs**

Between 2 and 2147483647 inputs.

* **M** (optional, heterogeneous) - **I**:
  A maximum trip-count for the loop specified at runtime. Optional.
  Pass empty string to skip.
* **cond** (optional, heterogeneous) - **B**:
  A boolean termination condition. Optional. Pass empty string to
  skip.
* **v_initial** (variadic) - **V**:
  The initial values of any loop-carried dependencies (values that
  change across loop iterations)

**Outputs**

Between 1 and 2147483647 outputs.

* **v_final_and_scan_outputs** (variadic) - **V**:
  Final N loop carried dependency values then K scan_outputs. Scan
  outputs must be Tensors.

**Type Constraints**

* **V** in (
  seq(tensor(bool)),
  seq(tensor(complex128)),
  seq(tensor(complex64)),
  seq(tensor(double)),
  seq(tensor(float)),
  seq(tensor(float16)),
  seq(tensor(int16)),
  seq(tensor(int32)),
  seq(tensor(int64)),
  seq(tensor(int8)),
  seq(tensor(string)),
  seq(tensor(uint16)),
  seq(tensor(uint32)),
  seq(tensor(uint64)),
  seq(tensor(uint8)),
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  All Tensor and Sequence types
* **I** in (
  tensor(int64)
  ):
  tensor of int64, which should be a scalar.
* **B** in (
  tensor(bool)
  ):
  tensor of bool, which should be a scalar.

.. toctree::

    text_diff_Loop_11_13

.. _l-onnx-op-loop-11:

Loop - 11
=========

**Version**

* **name**: `Loop (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Loop>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Generic Looping construct. This loop has multiple termination conditions:

1) Trip count. Iteration count specified at runtime. Set by
   specifying the input M. Optional. Set to empty string to omit.
   Note that a static trip count (specified at graph construction time) can be
   specified by passing in a constant node for input M.
2) Loop termination condition. This is an input to the op that determines
   whether to run the first iteration and also a loop-carried dependency for
   the body graph. The body graph must yield a value for the condition variable,
   whether this input is provided or not.

This table summarizes the operating modes of this operator with equivalent
C-style code:

    Operator inputs defined as (max_trip_count, condition_var).

    input ("", ""):
        for (int i=0; ; ++i) {
          cond = ... // Note this value is ignored, but is required in the body
        }

    input ("", cond) // Note this is analogous to a while loop
        bool cond = ...;
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input ("", 1) // Note this is analogous to a do-while loop
        bool cond = true
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input (trip_count, "") // Note this is analogous to a for loop
        int trip_count = ...
        for (int i=0; i < trip_count; ++i) {
          cond = ...; // ignored
        }

    input (trip_count, cond)
        int trip_count = ...;
        bool cond = ...;
        for (int i=0; i < trip_count && cond; ++i) {
          cond = ...;
        }

*Sample usage - cond as well as trip count*

    graph predict-net {
      %a = Constant[value = <Scalar Tensor [3]>]()
      %b = Constant[value = <Scalar Tensor [6]>]()
      %keepgoing = Constant[value = <Scalar Tensor [1]>]()
      %max_trip_count = Constant[value = <Scalar Tensor [10]>]()
      %keepgoing_out, %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing, %b)
      return
    }

    graph body-net (
      %i[INT32, scalar]           // iteration number
      %keepgoing_in[BOOL, scalar] // incoming loop-termination-condition; not used
      %b_in[INT32, scalar]        // incoming value of loop-carried-dependency b
    ) {
      %my_local = Add(%a, %b_in)
      %b_out = Sub(%a, %b_in) // outgoing value of loop-carried-dependency b
      %keepgoing_out = Greater(%my_local, %b_out) // outgoing loop-termination-condition
      %user_defined_val = Add(%b_in, %b_in) // scan-output value to be accumulated
      return %keepgoing_out, %b_out, %user_defined_val
    }

*Sample equivalent C code*

    {
      /* User-defined code (enclosing scope) */
      int a = 3, b = 6;
      bool keepgoing = true; // Analogous to input cond
      /* End user-defined code */

      /* Implicitly-defined code */
      const int max_trip_count = 10; // Analogous to input M
      int user_defined_vals[]; // Imagine this is resizable
      /* End implicitly-defined code */
      /* initialize loop-carried variables and scan-output variables */
      bool keepgoing_out = keepgoing
      int b_out = b

      for (int i=0; i < max_trip_count && keepgoing_out; ++i) {
        /* Implicitly-defined code: bind actual parameter values
           to formal parameter variables of loop-body */
        bool keepgoing_in = keepgoing_out;
        bool b_in = b_out;

        /* User-defined code (loop body) */
        int my_local = a + b_in; // Reading value "a" from the enclosing scope is fine
        b_out = a - b_in;
        keepgoing_out = my_local > b_out;
        user_defined_val = b_in + b_in; // b_in and b_out are different variables
        /* End user-defined code */

        /* Implicitly defined-code */
        user_defined_vals[i] = user_defined_val // accumulate scan-output values
      }
      // int t = my_local; // Can't do this. my_local is not accessible here.

      // The values below are bound to the output variables of the loop and therefore accessible
      // b_out; user_defined_vals; keepgoing_out;
    }

There are several things of note in this code snippet:

1) Values from the enclosing scope (i.e. variable "a" here) are in scope and can
   be referenced in the inputs of the loop.
2) Any values computed in the loop body that needs to be used in a subsequent
   iteration or after the loop are modelled using a pair of variables in the loop-body,
   consisting of an input variable (eg., b_in) and an output variable (eg., b_out).
   These are referred to as loop-carried dependences. The loop operation node
   supplies the input value of the input variable for the first iteration, and
   returns the output value of the output variable produced by the final
   iteration.
3) Scan_output variables are used to implicitly concatenate values computed across
   all the iterations. In the above example, the value of user_defined_val computed
   over all iterations are concatenated and returned as the value of user_defined_vals
   after the loop.
4) Values created in the body cannot be accessed in the enclosing scope,
   except using the mechanism described above.

Note that the semantics of this op support "diagonal" or "wavefront" execution.
(See Step 3 here for an example:
https://devblogs.nvidia.com/optimizing-recurrent-neural-networks-cudnn-5/).
Frontends should emit multi-layer RNNs as a series of While operators (with
time being the inner looping dimension), with each successive layer consuming
the scan_outputs from the previous layer, possibly going through several
point-wise operators (e.g. dropout, residual connections, linear layer).

**Attributes**

* **body** (required):
  The graph run each iteration. It has 2+N inputs: (iteration_num,
  condition, loop carried dependencies...). It has 1+N+K outputs:
  (condition, loop carried dependencies..., scan_outputs...). Each
  scan_output is created by concatenating the value of the specified
  output value at the end of each iteration of the loop. It is an
  error if the dimensions or data type of these scan_outputs change
  across loop iterations.

**Inputs**

Between 2 and 2147483647 inputs.

* **M** (optional, heterogeneous) - **I**:
  A maximum trip-count for the loop specified at runtime. Optional.
  Pass empty string to skip.
* **cond** (optional, heterogeneous) - **B**:
  A boolean termination condition. Optional. Pass empty string to
  skip.
* **v_initial** (variadic) - **V**:
  The initial values of any loop-carried dependencies (values that
  change across loop iterations)

**Outputs**

Between 1 and 2147483647 outputs.

* **v_final_and_scan_outputs** (variadic) - **V**:
  Final N loop carried dependency values then K scan_outputs

**Type Constraints**

* **V** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  All Tensor types
* **I** in (
  tensor(int64)
  ):
  tensor of int64, which should be a scalar.
* **B** in (
  tensor(bool)
  ):
  tensor of bool, which should be a scalar.

.. toctree::

    text_diff_Loop_1_11

.. _l-onnx-op-loop-1:

Loop - 1
========

**Version**

* **name**: `Loop (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#Loop>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Generic Looping construct. This loop has multiple termination conditions:

1) Trip count. Iteration count specified at runtime. Set by
   specifying the input M. Optional. Set to empty string to omit.
   Note that a static trip count (specified at graph construction time) can be
   specified by passing in a constant node for input M.
2) Loop termination condition. This is an input to the op that determines
   whether to run the first iteration and also a loop-carried dependency for
   the body graph. The body graph must yield a value for the condition variable,
   whether this input is provided or not.

This table summarizes the operating modes of this operator with equivalent
C-style code:

    Operator inputs defined as (max_trip_count, condition_var).

    input ("", ""):
        for (int i=0; ; ++i) {
          cond = ... // Note this value is ignored, but is required in the body
        }

    input ("", cond) // Note this is analogous to a while loop
        bool cond = ...;
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input ("", 1) // Note this is analogous to a do-while loop
        bool cond = true
        for (int i=0; cond; ++i) {
          cond = ...;
        }

    input (trip_count, "") // Note this is analogous to a for loop
        int trip_count = ...
        for (int i=0; i < trip_count; ++i) {
          cond = ...; // ignored
        }

    input (trip_count, cond)
        int trip_count = ...;
        bool cond = ...;
        for (int i=0; i < trip_count && cond; ++i) {
          cond = ...;
        }

*Sample usage - cond as well as trip count*

    graph predict-net {
      %a = Constant[value = <Scalar Tensor [3]>]()
      %b = Constant[value = <Scalar Tensor [6]>]()
      %keepgoing = Constant[value = <Scalar Tensor [1]>]()
      %max_trip_count = Constant[value = <Scalar Tensor [10]>]()
      %keepgoing_out, %b_out, %user_defined_vals = Loop[body = <graph body-net>](%max_trip_count, %keepgoing, %b)
      return
    }

    graph body-net (
      %i[INT32, scalar]
      %keepgoing[BOOL, scalar]
      %b[INT32, scalar]
    ) {
      %my_local = Add(%a, %b)
      %b_out = Sub(%a, %b)
      %keepgoing_out = Greater(%my_local, %b_out)
      %user_defined_vals = Add(%b, %b)
      return %keepgoing_out, %b_out, %user_defined_vals
    }

*Sample equivalent C code*

    {
      /* User-defined code (enclosing scope) */
      int a = 3, b = 6;
      bool keepgoing = true; // Analogous to input cond
      /* End user-defined code */

      /* Implicitly-defined code */
      const int max_trip_count = 10; // Analogous to input M
      int user_defined_vals[]; // Imagine this is resizable
      /* End implicitly-defined code */
      for (int i=0; i < max_trip_count && keepgoing; ++i) {
        /* User-defined code (loop body) */
        int my_local = a + b; // Reading values in the enclosing scope is fine
        b = a - b; // writes fine if we specify b as a loop-carried dependency
        keepgoing = my_local > b; // keepgoing is a loop-carried dependency
        user_defined_vals[i] = b + b;
        /* End user-defined code */
      }
      // my_local = 123; // Can't do this. my_local was defined in the body

      // These below values are live-out from the loop and therefore accessible
      b_out; user_defined_vals; keepgoing_out;
    }

There are several things of note in this code snippet:

1) Values from the enclosing scope (i.e. variable a here) are in scope and can
   be referenced in the inputs of the loop.
2) Any variables which you wish to make available in the enclosing scope (i.e.
   the variables b and keepgoing) must be declared as either loop-carried
   dependencies (both at the op inputs and output and at the body net input and
   output) or scan_outputs.
3) Values created in the body cannot be accessed in the enclosing scope.

Note that the semantics of this op support "diagonal" or "wavefront" execution.
(See Step 3 here for an example:
https://devblogs.nvidia.com/optimizing-recurrent-neural-networks-cudnn-5/).
Frontends should emit multi-layer RNNs as a series of While operators (with
time being the inner looping dimension), with each successive layer consuming
the scan_outputs from the previous layer, possibly going through several
point-wise operators (e.g. dropout, residual connections, linear layer).

**Attributes**

* **body** (required):
  The graph run each iteration. It has 2+N inputs: (iteration_num,
  condition, loop carried dependencies...). It has 1+N+K outputs:
  (condition, loop carried dependencies..., scan_outputs...). Each
  scan_output is created by concatenating the value of the specified
  output value at the end of each iteration of the loop. It is an
  error if the dimensions or data type of these scan_outputs change
  across loop iterations.

**Inputs**

Between 3 and 2147483647 inputs.

* **M** (optional, heterogeneous) - **I**:
  A maximum trip-count for the loop specified at runtime. Optional.
  Pass empty string to skip.
* **cond** (optional, heterogeneous) - **B**:
  A boolean termination condition. Optional. Pass empty string to
  skip.
* **v_initial** (variadic) - **V**:
  The initial values of any loop-carried dependencies (values that
  change across loop iterations)

**Outputs**

Between 1 and 2147483647 outputs.

* **v_final_and_scan_outputs** (variadic) - **V**:
  Final N loop carried dependency values then K scan_outputs

**Type Constraints**

* **V** in (
  tensor(bool),
  tensor(complex128),
  tensor(complex64),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int16),
  tensor(int32),
  tensor(int64),
  tensor(int8),
  tensor(string),
  tensor(uint16),
  tensor(uint32),
  tensor(uint64),
  tensor(uint8)
  ):
  All Tensor types
* **I** in (
  tensor(int64)
  ):
  tensor of int64, which should be a scalar.
* **B** in (
  tensor(bool)
  ):
  tensor of bool, which should be a scalar.
