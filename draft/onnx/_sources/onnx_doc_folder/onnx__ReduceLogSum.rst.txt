
.. _l-onnx-doc-ReduceLogSum:

============
ReduceLogSum
============

.. contents::
    :local:


.. _l-onnx-op-reducelogsum-13:

ReduceLogSum - 13
=================

**Version**

* **name**: `ReduceLogSum (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#ReduceLogSum>`_
* **domain**: **main**
* **since_version**: **13**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 13**.

**Summary**

Computes the log sum of the input tensor&#39;s element along the provided axes. The resulting
tensor has the same rank as the input if keepdims equals 1. If keepdims equals 0, then
the resulting tensor has the reduced dimension pruned.

The above behavior is similar to numpy, with the exception that numpy defaults keepdims to
False instead of True.

**Attributes**

* **axes**:
  A list of integers, along which to reduce. The default is to reduce
  over all the dimensions of the input tensor. Accepted range is [-r,
  r-1] where r = rank(data).
* **keepdims**:
  Keep the reduced dimension or not, default 1 means keep reduced
  dimension.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **reduced** (heterogeneous) - **T**:
  Reduced output tensor.

**Type Constraints**

* **T** in (
  tensor(bfloat16),
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int32),
  tensor(int64),
  tensor(uint32),
  tensor(uint64)
  ):
  Constrain input and output types to high-precision numeric tensors.

**Examples**

**_nokeepdims**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;ReduceLogSum&#34;,
        inputs=[&#34;data&#34;],
        outputs=[&#34;reduced&#34;],
        axes=[2, 1],
        keepdims=0,
    )
    data = np.random.ranf([3, 4, 5]).astype(np.float32)
    reduced = np.log(np.sum(data, axis=(2, 1), keepdims=False))
    expect(
        node, inputs=[data], outputs=[reduced], name=&#34;test_reduce_log_sum_desc_axes&#34;
    )

    node = onnx.helper.make_node(
        &#34;ReduceLogSum&#34;,
        inputs=[&#34;data&#34;],
        outputs=[&#34;reduced&#34;],
        axes=[0, 1],
        keepdims=0,
    )
    data = np.random.ranf([3, 4, 5]).astype(np.float32)
    reduced = np.log(np.sum(data, axis=(0, 1), keepdims=False))
    expect(
        node, inputs=[data], outputs=[reduced], name=&#34;test_reduce_log_sum_asc_axes&#34;
    )

**_keepdims**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;ReduceLogSum&#34;, inputs=[&#34;data&#34;], outputs=[&#34;reduced&#34;]
    )
    data = np.random.ranf([3, 4, 5]).astype(np.float32)
    reduced = np.log(np.sum(data, keepdims=True))
    expect(
        node, inputs=[data], outputs=[reduced], name=&#34;test_reduce_log_sum_default&#34;
    )

**_negative_axes_keepdims**

::

    import numpy as np
    import onnx

    node = onnx.helper.make_node(
        &#34;ReduceLogSum&#34;, inputs=[&#34;data&#34;], outputs=[&#34;reduced&#34;], axes=[-2]
    )
    data = np.random.ranf([3, 4, 5]).astype(np.float32)
    reduced = np.log(np.sum(data, axis=(-2), keepdims=True))
    # print(reduced)
    expect(
        node,
        inputs=[data],
        outputs=[reduced],
        name=&#34;test_reduce_log_sum_negative_axes&#34;,
    )

.. toctree::

    text_diff_ReduceLogSum_11_13

.. _l-onnx-op-reducelogsum-11:

ReduceLogSum - 11
=================

**Version**

* **name**: `ReduceLogSum (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#ReduceLogSum>`_
* **domain**: **main**
* **since_version**: **11**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 11**.

**Summary**

Computes the log sum of the input tensor&#39;s element along the provided axes. The resulting
tensor has the same rank as the input if keepdims equals 1. If keepdims equal 0, then
the resulted tensor have the reduced dimension pruned.

The above behavior is similar to numpy, with the exception that numpy defaults keepdims to
False instead of True.

**Attributes**

* **axes**:
  A list of integers, along which to reduce. The default is to reduce
  over all the dimensions of the input tensor. Accepted range is [-r,
  r-1] where r = rank(data).
* **keepdims**:
  Keep the reduced dimension or not, default 1 means keep reduced
  dimension.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **reduced** (heterogeneous) - **T**:
  Reduced output tensor.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int32),
  tensor(int64),
  tensor(uint32),
  tensor(uint64)
  ):
  Constrain input and output types to high-precision numeric tensors.

.. toctree::

    text_diff_ReduceLogSum_1_11

.. _l-onnx-op-reducelogsum-1:

ReduceLogSum - 1
================

**Version**

* **name**: `ReduceLogSum (GitHub) <https://github.com/onnx/onnx/blob/main/docs/Operators.md#ReduceLogSum>`_
* **domain**: **main**
* **since_version**: **1**
* **function**: False
* **support_level**: SupportType.COMMON
* **shape inference**: True

This version of the operator has been available
**since version 1**.

**Summary**

Computes the log sum of the input tensor&#39;s element along the provided axes. The resulting
tensor has the same rank as the input if keepdims equals 1. If keepdims equal 0, then
the resulted tensor have the reduced dimension pruned.

The above behavior is similar to numpy, with the exception that numpy defaults keepdims to
False instead of True.

**Attributes**

* **axes**:
  A list of integers, along which to reduce. The default is to reduce
  over all the dimensions of the input tensor.
* **keepdims**:
  Keep the reduced dimension or not, default 1 means keep reduced
  dimension.

**Inputs**

* **data** (heterogeneous) - **T**:
  An input tensor.

**Outputs**

* **reduced** (heterogeneous) - **T**:
  Reduced output tensor.

**Type Constraints**

* **T** in (
  tensor(double),
  tensor(float),
  tensor(float16),
  tensor(int32),
  tensor(int64),
  tensor(uint32),
  tensor(uint64)
  ):
  Constrain input and output types to high-precision numeric tensors.
