RoiAlign - 10 vs 16
===================

Next section compares an older to a newer version of the same operator 
after both definition are converted into markdown text.
Green means an addition to the newer version, red means a deletion.
Anything else is unchanged.

.. raw:: html


    <div id="div_RoiAlign_2"></div>
    <link rel="stylesheet" type="text/css" href="../_static/diff2html.min.css" />
    <script type="text/javascript" src="../_static/diff2html-ui.min.js"></script>
    <script>
    const diffString = `
    --- a/RoiAlign10
    +++ b/RoiAlign16
    @@ -1 +1 @@
      Region of Interest (RoI) align operation described in the
      [Mask R-CNN paper](https://arxiv.org/abs/1703.06870).
      RoiAlign consumes an input tensor X and region of interests (rois)
      to apply pooling across each RoI; it produces a 4-D tensor of shape
      (num_rois, C, output_height, output_width).
  
      RoiAlign is proposed to avoid the misalignment by removing
      quantizations while converting from original image into feature
      map and from feature map into RoI feature; in each ROI bin,
      the value of the sampled locations are computed directly
      through bilinear interpolation.
  
      **Attributes**
  
    + * **coordinate_transformation_mode**:
    +   Allowed values are &amp;#39;half_pixel&amp;#39; and &amp;#39;output_half_pixel&amp;#39;. Use the
    +   value &amp;#39;half_pixel&amp;#39; to pixel shift the input coordinates by -0.5 (the
    +   recommended behavior). Use the value &amp;#39;output_half_pixel&amp;#39; to omit the
    +   pixel shift for the input (use this for a backward-compatible
    +   behavior).
      * **mode**:
        The pooling method. Two modes are supported: &amp;#39;avg&amp;#39; and &amp;#39;max&amp;#39;.
        Default is &amp;#39;avg&amp;#39;.
      * **output_height**:
        default 1; Pooled output Y&amp;#39;s height.
      * **output_width**:
        default 1; Pooled output Y&amp;#39;s width.
      * **sampling_ratio**:
        Number of sampling points in the interpolation grid used to compute
        the output value of each pooled output bin. If &amp;gt; 0, then exactly
        sampling_ratio x sampling_ratio grid points are used. If == 0, then
        an adaptive number of grid points are used (computed as
        ceil(roi_width / output_width), and likewise for height). Default is
        0.
      * **spatial_scale**:
        Multiplicative spatial scale factor to translate ROI coordinates
        from their input spatial scale to the scale used when pooling, i.e.,
        spatial scale of the input feature map X relative to the input
        image. E.g.; default is 1.0f.
  
      **Inputs**
  
      * **X** (heterogeneous) - **T1**:
        Input data tensor from the previous operator; 4-D feature map of
        shape (N, C, H, W), where N is the batch size, C is the number of
        channels, and H and W are the height and the width of the data.
      * **rois** (heterogeneous) - **T1**:
        RoIs (Regions of Interest) to pool over; rois is 2-D input of shape
        (num_rois, 4) given as [[x1, y1, x2, y2], ...]. The RoIs&amp;#39;
        coordinates are in the coordinate system of the input image. Each
        coordinate set has a 1:1 correspondence with the &amp;#39;batch_indices&amp;#39;
        input.
      * **batch_indices** (heterogeneous) - **T2**:
        1-D tensor of shape (num_rois,) with each element denoting the index
        of the corresponding image in the batch.
  
      **Outputs**
  
      * **Y** (heterogeneous) - **T1**:
        RoI pooled output, 4-D tensor of shape (num_rois, C, output_height,
        output_width). The r-th batch element Y[r-1] is a pooled feature map
        corresponding to the r-th RoI X[r-1].
  
      **Type Constraints**
  
      * **T1** in (
        tensor(double),
        tensor(float),
        tensor(float16)
        ):
        Constrain types to float tensors.
      * **T2** in (
        tensor(int64)
        ):
        Constrain types to int tensors.
    `;

    document.addEventListener('DOMContentLoaded', function () {
    var targetElement = document.getElementById('div_RoiAlign_2');
    var configuration = {
        drawFileList: true,
        fileListToggle: false,
        fileListStartVisible: false,
        fileContentToggle: false,
        matching: 'lines',
        outputFormat: 'line-by-line',
        synchronisedScroll: true,
        highlight: true,
        renderNothingWhenEmpty: false,
    };
    var diff2htmlUi = new Diff2HtmlUI(targetElement, diffString, configuration);
    diff2htmlUi.draw();
    diff2htmlUi.highlightCode();
    });
    </script>