.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_load_and_predict.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_load_and_predict.py:


.. _l-example-simple-usage:

Load and predict with ONNX Runtime and a very simple model
==========================================================

This example demonstrates how to load a model and compute
the output for an input vector. It also shows how to
retrieve the definition of its inputs and outputs.



.. code-block:: python


    import onnxruntime as rt
    import numpy
    from onnxruntime.datasets import get_example







Let's load a very simple model.
The model is available on github `onnx...test_sigmoid <https://github.com/onnx/onnx/tree/master/onnx/backend/test/data/node/test_sigmoid>`_.



.. code-block:: python


    example1 = get_example("sigmoid.onnx")
    sess = rt.InferenceSession(example1)







Let's see the input name and shape.



.. code-block:: python


    input_name = sess.get_inputs()[0].name
    print("input name", input_name)
    input_shape = sess.get_inputs()[0].shape
    print("input shape", input_shape)
    input_type = sess.get_inputs()[0].type
    print("input type", input_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    input name x
    input shape [3, 4, 5]
    input type tensor(float)


Let's see the output name and shape.



.. code-block:: python


    output_name = sess.get_outputs()[0].name
    print("output name", output_name)  
    output_shape = sess.get_outputs()[0].shape
    print("output shape", output_shape)
    output_type = sess.get_outputs()[0].type
    print("output type", output_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    output name y
    output shape [3, 4, 5]
    output type tensor(float)


Let's compute its outputs (or predictions if it is a machine learned model).



.. code-block:: python


    import numpy.random
    x = numpy.random.random((3,4,5))
    x = x.astype(numpy.float32)
    res = sess.run([output_name], {input_name: x})
    print(res)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([[[0.656214  , 0.5825963 , 0.6838408 , 0.62868285, 0.68848306],
            [0.6540813 , 0.5684695 , 0.53868353, 0.69386196, 0.5356444 ],
            [0.54247206, 0.6600489 , 0.54008275, 0.6605173 , 0.60014457],
            [0.6514372 , 0.647213  , 0.72603464, 0.5065895 , 0.59871674]],

           [[0.6964775 , 0.6857919 , 0.72706544, 0.5404554 , 0.6744666 ],
            [0.6073198 , 0.6645689 , 0.59911907, 0.54659957, 0.6996078 ],
            [0.53873825, 0.6846687 , 0.61220497, 0.52666324, 0.7054352 ],
            [0.520812  , 0.63533443, 0.67036545, 0.5890815 , 0.5544897 ]],

           [[0.5667578 , 0.5625295 , 0.68317914, 0.69872826, 0.6871143 ],
            [0.6784531 , 0.5353059 , 0.66448736, 0.69585437, 0.6677127 ],
            [0.50981987, 0.6532491 , 0.6730479 , 0.63837755, 0.58817965],
            [0.59712356, 0.6069511 , 0.6657166 , 0.7301001 , 0.6379339 ]]],
          dtype=float32)]


**Total running time of the script:** ( 0 minutes  0.004 seconds)


.. _sphx_glr_download_auto_examples_plot_load_and_predict.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_load_and_predict.py <plot_load_and_predict.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_load_and_predict.ipynb <plot_load_and_predict.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
