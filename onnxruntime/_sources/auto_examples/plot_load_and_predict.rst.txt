.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_load_and_predict.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_load_and_predict.py:


.. _l-example-simple-usage:

Load and predict with ONNX Runtime and a very simple model
==========================================================

This example demonstrates how to load a model and compute
the output for an input vector. It also shows how to
retrieve the definition of its inputs and outputs.



.. code-block:: python


    import onnxruntime as rt
    import numpy
    from onnxruntime.datasets import get_example







Let's load a very simple model.
The model is available on github `onnx...test_sigmoid <https://github.com/onnx/onnx/tree/master/onnx/backend/test/data/node/test_sigmoid>`_.



.. code-block:: python


    example1 = get_example("sigmoid.onnx")
    sess = rt.InferenceSession(example1)







Let's see the input name and shape.



.. code-block:: python


    input_name = sess.get_inputs()[0].name
    print("input name", input_name)
    input_shape = sess.get_inputs()[0].shape
    print("input shape", input_shape)
    input_type = sess.get_inputs()[0].type
    print("input type", input_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    input name x
    input shape [3, 4, 5]
    input type tensor(float)


Let's see the output name and shape.



.. code-block:: python


    output_name = sess.get_outputs()[0].name
    print("output name", output_name)  
    output_shape = sess.get_outputs()[0].shape
    print("output shape", output_shape)
    output_type = sess.get_outputs()[0].type
    print("output type", output_type)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    output name y
    output shape [3, 4, 5]
    output type tensor(float)


Let's compute its outputs (or predictions if it is a machine learned model).



.. code-block:: python


    import numpy.random
    x = numpy.random.random((3,4,5))
    x = x.astype(numpy.float32)
    res = sess.run([output_name], {input_name: x})
    print(res)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [array([[[0.5812468 , 0.5183948 , 0.5384436 , 0.57124126, 0.6557991 ],
            [0.70270735, 0.68785524, 0.63900703, 0.6300754 , 0.6384108 ],
            [0.63054264, 0.6965487 , 0.723807  , 0.55093855, 0.6406569 ],
            [0.6037159 , 0.6595244 , 0.58553666, 0.5453194 , 0.6956898 ]],

           [[0.5184633 , 0.6905939 , 0.5285479 , 0.5776977 , 0.57371384],
            [0.682603  , 0.6889186 , 0.5188618 , 0.5130127 , 0.67758334],
            [0.69526994, 0.55376047, 0.59694993, 0.5866287 , 0.686063  ],
            [0.69043744, 0.6384794 , 0.69265276, 0.5706267 , 0.6805883 ]],

           [[0.6274158 , 0.719545  , 0.55061615, 0.60793334, 0.53906304],
            [0.6698307 , 0.69567955, 0.70884526, 0.7303218 , 0.50209165],
            [0.70482993, 0.60729706, 0.5166897 , 0.66757673, 0.71880925],
            [0.5337441 , 0.6396456 , 0.6610355 , 0.6212788 , 0.7207047 ]]],
          dtype=float32)]


**Total running time of the script:** ( 0 minutes  0.006 seconds)


.. _sphx_glr_download_auto_examples_plot_load_and_predict.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_load_and_predict.py <plot_load_and_predict.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_load_and_predict.ipynb <plot_load_and_predict.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
