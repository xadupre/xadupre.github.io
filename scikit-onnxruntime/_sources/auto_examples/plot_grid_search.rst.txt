.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_grid_search.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_grid_search.py:


.. _l-example-grid-search:

Grid search ONNX models
=======================

This example uses *OnnxTransformer* to freeze a model.
Many preprocessing are fitted, converted into *ONNX*
and inserted into a pipeline with *OnnxTransformer*
si that they do not have to be fitted again.
The grid search will pick the best one for the task.

.. contents::
    :local:

Fit all preprocessings and serialize with ONNX
++++++++++++++++++++++++++++++++++++++++++++++



.. code-block:: python


    from sklearn.pipeline import make_pipeline
    from sklearn.decomposition import PCA
    from sklearn.preprocessing import StandardScaler
    from sklearn.datasets import load_iris
    from sklearn.linear_model import LogisticRegression
    from sklearn.model_selection import train_test_split
    from sklearn.model_selection import GridSearchCV
    from sklearn.metrics import classification_report
    import onnxruntime
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx import convert_sklearn
    from skonnxrt.sklapi import OnnxTransformer

    iris = load_iris()
    X, y = iris.data, iris.target
    X_train, X_test, y_train, y_test = train_test_split(X, y)

    dec_models = [
        PCA(n_components=1),
        PCA(n_components=2),
        StandardScaler(),
    ]

    onx_bytes = []

    for model in dec_models:
        model.fit(X_train)
        onx = convert_sklearn(model,
                              initial_types=[('X', FloatTensorType((1, X.shape[1])))])
        onx_bytes.append(onx.SerializeToString())







Pipeline with OnnxTransformer
+++++++++++++++++++++++++++++++



.. code-block:: python


    pipe = make_pipeline(OnnxTransformer(onx_bytes[0]),
                         LogisticRegression())







Grid Search
+++++++++++

The serialized models are now used as a parameter
in the grid search.



.. code-block:: python


    param_grid = [{'onnxtransformer__onnx_bytes': onx_bytes,
                   'logisticregression__penalty': ['l2', 'l1'],
                   'logisticregression__solver': ['liblinear', 'saga']
                   }]

    clf = GridSearchCV(pipe, param_grid, cv=3)
    clf.fit(X_train, y_train)

    y_true, y_pred = y_test, clf.predict(X_test)
    cl = classification_report(y_true, y_pred)
    print(cl)





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    precision    recall  f1-score   support

               0       1.00      1.00      1.00        12
               1       1.00      0.93      0.97        15
               2       0.92      1.00      0.96        11

        accuracy                           0.97        38
       macro avg       0.97      0.98      0.97        38
    weighted avg       0.98      0.97      0.97        38


Best preprocessing?
+++++++++++++++++++

We get the best parameters returned by the grid search
and we search for it in the list of serialized
preprocessing models.
And the winner is...



.. code-block:: python


    bp = clf.best_params_
    best_step = onx_bytes.index(bp["onnxtransformer__onnx_bytes"])
    print(dec_models[best_step])




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    PCA(copy=True, iterated_power='auto', n_components=2, random_state=None,
        svd_solver='auto', tol=0.0, whiten=False)


**Total running time of the script:** ( 0 minutes  1.086 seconds)


.. _sphx_glr_download_auto_examples_plot_grid_search.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_grid_search.py <plot_grid_search.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_grid_search.ipynb <plot_grid_search.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
