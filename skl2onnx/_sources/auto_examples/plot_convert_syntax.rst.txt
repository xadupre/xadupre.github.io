.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_convert_syntax.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_convert_syntax.py:


.. _l-convert-syntax:

Different ways to convert a model
=================================

This example leverages some code added to implement custom converters
in an easy way.

.. contents::
    :local:
    

Predict with onnxruntime
++++++++++++++++++++++++

Simple function to check the converted model
works fine.

.. code-block:: default

    import numpy as np
    from sklearn.base import BaseEstimator, TransformerMixin
    from sklearn.cluster import KMeans
    from sklearn.pipeline import make_pipeline
    from onnxruntime import InferenceSession
    from skl2onnx import convert_sklearn, to_onnx, wrap_as_onnx_mixin
    from skl2onnx.common.data_types import FloatTensorType
    from skl2onnx.algebra.onnx_ops import OnnxSub, OnnxDiv
    from skl2onnx.algebra.onnx_operator_mixin import OnnxOperatorMixin
    from onnxruntime import InferenceSession


    def predict_with_onnxruntime(onx, X):
        sess = InferenceSession(onx.SerializeToString())
        input = sess.get_inputs()[0].name
        res = sess.run(None, {input: X.astype(np.float32)})
        return res[0]







Simple KMeans
+++++++++++++

The first way: :func:`convert_sklearn`.


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = KMeans(n_clusters=2)
    tr.fit(X)

    onx = convert_sklearn(tr, initial_types=[('X', FloatTensorType((1, X.shape[1])))])
    print(predict_with_onnxruntime(onx, X))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 1 1 1 1 0 0 0 0 0]


The second way: :func:`to_onnx`: no need to play with
:class:`FloatTensorType` anymore.


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = KMeans(n_clusters=2)
    tr.fit(X)

    onx = to_onnx(tr, X.astype(np.float32))
    print(predict_with_onnxruntime(onx, X))






.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 1 1 1 1 0 0 0 0 0]


The third way: :func:`wrap_as_onnx_mixin`: wraps
the machine learned model into a new class
inheriting from :class:`OnnxOperatorMixin`.


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = KMeans(n_clusters=2)
    tr.fit(X)

    tr_mixin = wrap_as_onnx_mixin(tr)

    onx = tr_mixin.to_onnx(X.astype(np.float32))
    print(predict_with_onnxruntime(onx, X))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 0 0 0 0 1 1 1 1 1]


The fourth way: :func:`wrap_as_onnx_mixin`: can be called
before fitting the model.


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = wrap_as_onnx_mixin(KMeans(n_clusters=2))
    tr.fit(X)

    onx = tr.to_onnx(X.astype(np.float32))
    print(predict_with_onnxruntime(onx, X))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 1 1 1 1 0 0 0 0 0]


Pipeline and a custom object
++++++++++++++++++++++++++++

This is a simple scaler.


.. code-block:: default



    class CustomOpTransformer(BaseEstimator, TransformerMixin,
                              OnnxOperatorMixin):

        def __init__(self):
            BaseEstimator.__init__(self)
            TransformerMixin.__init__(self)

        def fit(self, X, y=None):
            self.W_ = np.mean(X, axis=0)
            self.S_ = np.std(X, axis=0)
            return self

        def transform(self, X):
            return (X - self.W_) / self.S_
        
        def onnx_shape_calculator(self):        
            def shape_calculator(operator):
                operator.outputs[0].type = operator.inputs[0].type
            return shape_calculator
    
        def to_onnx_operator(self, inputs=None, outputs=('Y', )):
            if inputs is None:
                raise RuntimeError("inputs should contain one name")
            i0 = self.get_inputs(inputs, 0)
            W = self.W_
            S = self.S_
            return OnnxDiv(OnnxSub(i0, W), S,
                           output_names=outputs)







Way 1


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = make_pipeline(CustomOpTransformer (), KMeans(n_clusters=2))
    tr.fit(X)

    onx = convert_sklearn(tr, initial_types=[('X', FloatTensorType((1, X.shape[1])))])
    print(predict_with_onnxruntime(onx, X))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [1 1 1 1 1 0 0 0 0 0]


Way 2


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = make_pipeline(CustomOpTransformer(), KMeans(n_clusters=2))
    tr.fit(X)

    onx = to_onnx(tr, X.astype(np.float32))
    print(predict_with_onnxruntime(onx, X))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 0 0 0 0 1 1 1 1 1]


Way 3


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = make_pipeline(CustomOpTransformer(), KMeans(n_clusters=2))
    tr.fit(X)

    tr_mixin = wrap_as_onnx_mixin(tr)
    tr_mixin.to_onnx(X.astype(np.float32))

    print(predict_with_onnxruntime(onx, X))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 0 0 0 0 1 1 1 1 1]


Way 4


.. code-block:: default


    X = np.arange(20).reshape(10, 2)
    tr = wrap_as_onnx_mixin(make_pipeline(CustomOpTransformer(), KMeans(n_clusters=2)))

    tr.fit(X)

    onx = tr.to_onnx(X.astype(np.float32))
    print(predict_with_onnxruntime(onx, X))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    [0 0 0 0 0 1 1 1 1 1]


Display the ONNX graph
++++++++++++++++++++++

Finally, let's see the graph converted with *sklearn-onnx*.


.. code-block:: default


    from onnx.tools.net_drawer import GetPydotGraph, GetOpNodeProducer
    pydot_graph = GetPydotGraph(onx.graph, name=onx.graph.name, rankdir="TB",
                                node_producer=GetOpNodeProducer("docstring", color="yellow",
                                                                fillcolor="yellow", style="filled"))
    pydot_graph.write_dot("pipeline_onnx_mixin.dot")

    import os
    os.system('dot -O -Gdpi=300 -Tpng pipeline_onnx_mixin.dot')

    import matplotlib.pyplot as plt
    image = plt.imread("pipeline_onnx_mixin.dot.png")
    fig, ax = plt.subplots(figsize=(40, 20))
    ax.imshow(image)
    ax.axis('off')
                             



.. image:: /auto_examples/images/sphx_glr_plot_convert_syntax_001.png
    :class: sphx-glr-single-img




**Versions used for this example**


.. code-block:: default


    import numpy, sklearn
    print("numpy:", numpy.__version__)
    print("scikit-learn:", sklearn.__version__)
    import onnx, onnxruntime, skl2onnx
    print("onnx: ", onnx.__version__)
    print("onnxruntime: ", onnxruntime.__version__)
    print("skl2onnx: ", skl2onnx.__version__)




.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    numpy: 1.16.2
    scikit-learn: 0.21.dev0
    onnx:  1.4.1
    onnxruntime:  0.3.0
    skl2onnx:  1.4.5



.. rst-class:: sphx-glr-timing

   **Total running time of the script:** ( 0 minutes  3.505 seconds)


.. _sphx_glr_download_auto_examples_plot_convert_syntax.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_convert_syntax.py <plot_convert_syntax.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_convert_syntax.ipynb <plot_convert_syntax.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
