.. note::
    :class: sphx-glr-download-link-note

    Click :ref:`here <sphx_glr_download_auto_examples_plot_pipeline_lightgbm.py>` to download the full example code
.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_plot_pipeline_lightgbm.py:


.. _example-lightgbm:

Convert a pipeline with a LightGbm model
========================================

*sklearn-onnx* only converts *scikit-learn* models into *ONNX*
but many libraries implement *scikit-learn* API so that their models
can be included in a *scikit-learn* pipeline. This example considers
a pipeline including a *LightGbm* model. *sklearn-onnx* can convert
the whole pipeline as long as it knows the converter associated to
a *LGBMClassifier*. Let's see how to do it.

A couple of errors might happen while trying to convert
your own pipeline, some of them are described
and explained in :ref:`errors-pipeline`.

.. contents::
    :local:

Train a LightGBM classifier
+++++++++++++++++++++++++++



.. code-block:: python

    import numpy
    from sklearn.datasets import load_iris
    from sklearn.pipeline import Pipeline
    from sklearn.preprocessing import StandardScaler
    from lightgbm import LGBMClassifier
    data = load_iris()
    X = data.data[:, :2]
    y = data.target

    ind = numpy.arange(X.shape[0])
    numpy.random.shuffle(ind)
    X = X[ind, :].copy()
    y = y[ind].copy()

    pipe = Pipeline([('scaler', StandardScaler()),
                     ('lgbm', LGBMClassifier(n_estimators=3))])
    pipe.fit(X, y)







Register the converter for LGBMClassifier
+++++++++++++++++++++++++++++++++++++++++

The converter is implemented in *onnxmltools* and
follows a different design than the current one
of *sklearn-onnx*. This will change in a short future.
See also :ref:`l-register-converter`.
First the converter implemented in
`onnxmltools...LightGbm.py <https://github.com/onnx/onnxmltools/blob/master/onnxmltools/convert/lightgbm/operator_converters/LightGbm.py>`_.



.. code-block:: python

    from onnxmltools.convert.lightgbm.operator_converters.LightGbm import convert_lightgbm







The shape calculator of *onnxmltools* must be adapted for our case.
This will change in a short future.



.. code-block:: python

    import numbers
    from skl2onnx import convert_sklearn
    from skl2onnx.common.data_types import Int64TensorType, FloatTensorType, StringTensorType, DictionaryType, SequenceType

    def lightgbm_classifier_shape_extractor(operator):
        N = operator.inputs[0].type.shape[0]

        class_labels = operator.raw_operator.classes_
        if all(isinstance(i, numpy.ndarray) for i in class_labels):
            class_labels = numpy.concatenate(class_labels)
        if all(isinstance(i, str) for i in class_labels):
            operator.outputs[0].type = StringTensorType(shape=[N])
            operator.outputs[1].type = SequenceType(DictionaryType(StringTensorType([]), FloatTensorType([])), N)
        elif all(isinstance(i, (numbers.Real, bool, numpy.bool_)) for i in class_labels):
            operator.outputs[0].type = Int64TensorType(shape=[N])
            operator.outputs[1].type = SequenceType(DictionaryType(Int64TensorType([]), FloatTensorType([])), N)
        else:
            raise ValueError('Unsupported or mixed label types')







Let's register the new converter.



.. code-block:: python

    from skl2onnx import update_registered_converter
    update_registered_converter(LGBMClassifier, 'LightGbmLGBMClassifier',                                    
                                lightgbm_classifier_shape_extractor,
                                convert_lightgbm)







Convert again
+++++++++++++



.. code-block:: python


    model_onnx = convert_sklearn(pipe, 'pipeline',
                                 [('input', FloatTensorType([1, 2]))])

    # And save.
    with open("pipeline_lightgbm.onnx", "wb") as f:
        f.write(model_onnx.SerializeToString())







Compare the predictions
+++++++++++++++++++++++

Predictions with LightGbm.



.. code-block:: python


    print("predict", pipe.predict(X[:5]))
    print("predict_proba", pipe.predict_proba(X[:1]))





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    predict [0 1 1 2 2]
    predict_proba [[0.4801257  0.25982411 0.26005019]]


Predictions with onnxruntime.



.. code-block:: python


    import onnxruntime as rt
    import numpy
    sess = rt.InferenceSession("pipeline_lightgbm.onnx")
    pred_onx = sess.run(None, {"input": X[:5].astype(numpy.float32)})
    print("predict", pred_onx[0])
    print("predict_proba", pred_onx[1][:1])





.. rst-class:: sphx-glr-script-out

 Out:

 .. code-block:: none

    predict [0 1 1 2 2]
    predict_proba [{0: 0.48012566566467285, 1: 0.25982412695884705, 2: 0.2600501775741577}]


Display the ONNX graph
++++++++++++++++++++++



.. code-block:: python


    from onnx.tools.net_drawer import GetPydotGraph, GetOpNodeProducer
    pydot_graph = GetPydotGraph(model_onnx.graph, name=model_onnx.graph.name, rankdir="TB",
                                node_producer=GetOpNodeProducer("docstring", color="yellow",
                                                                fillcolor="yellow", style="filled"))
    pydot_graph.write_dot("pipeline.dot")

    import os
    os.system('dot -O -Gdpi=300 -Tpng pipeline.dot')

    import matplotlib.pyplot as plt
    image = plt.imread("pipeline.dot.png")
    fig, ax = plt.subplots(figsize=(40, 20))
    ax.imshow(image)
    ax.axis('off')



.. image:: /auto_examples/images/sphx_glr_plot_pipeline_lightgbm_001.png
    :class: sphx-glr-single-img




**Total running time of the script:** ( 0 minutes  1.800 seconds)


.. _sphx_glr_download_auto_examples_plot_pipeline_lightgbm.py:


.. only :: html

 .. container:: sphx-glr-footer
    :class: sphx-glr-footer-example



  .. container:: sphx-glr-download

     :download:`Download Python source code: plot_pipeline_lightgbm.py <plot_pipeline_lightgbm.py>`



  .. container:: sphx-glr-download

     :download:`Download Jupyter notebook: plot_pipeline_lightgbm.ipynb <plot_pipeline_lightgbm.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.readthedocs.io>`_
